#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so')
env.select()

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = ELF(env.libc) if env.libc else binf.libc
'''
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
'''

#==========

def attack(conn):
    rt = Router(conn)

    '''
    conn.recvuntil('> ')
    conn.sendline('hoge')

    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    '''
    
class Router:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        outs = commands.getoutput("snmpwalk -v 2c -c private {} .".format(self.host)).splitlines()
        self.index  = outs[0].split(' = ')[0]
        self.device = outs[1].split(' = ')[0]

    def setDevice(self, v):
        commands.getoutput('snmpset -v 2c -c public {} {} i {}'.format(self.host, self.device, v))

    def setIndex(self, v):
        commands.getoutput('snmpset -v 2c -c public {} {} i {}'.format(self.host, self.index, v))

    def getDevice(self):
        return int(commands.getoutput('snmpget -v 2c -c public {} {}'.format(self.host, self.device)).split(' INTEGER: ')[1])

    def getIndex(self):
        return int(commands.getoutput('snmpget -v 2c -c public {} {}'.format(self.host, self.index)).split(' INTEGER: ')[1])

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
