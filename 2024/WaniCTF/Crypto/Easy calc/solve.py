#!/usr/bin/env python3
from hashlib import md5
from Cryptodome.Cipher import AES
from Cryptodome.Util.number import long_to_bytes, getPrime

def decrypt(c: bytes, key: int, iv: bytes) -> bytes:
    key = long_to_bytes(key)
    key = md5(key).digest()
    cipher = AES.new(key, AES.MODE_CBC, iv=iv)
    return cipher.decrypt(c)

def main():
    p = 108159532265181242371960862176089900437183046655107822712736597793129430067645352619047923366465213553080964155205008757015024406041606723580700542617009651237415277095236385696694741342539811786180063943404300498027896890240121098409649537982185247548732754713793214557909539077228488668731016501718242238229
    A = 60804426023059829529243916100868813693528686280274100232668009387292986893221484159514697867975996653561494260686110180269479231384753818873838897508257692444056934156009244570713404772622837916262561177765724587140931364577707149626116683828625211736898598854127868638686640564102372517526588283709560663960
    ciphertext = '9fb749ef7467a5aff04ec5c751e7dceca4f3386987f252a2fc14a8970ff097a81fcb1a8fbe173465eecb74fb1a843383'
    ciphertext = bytes.fromhex(ciphertext)

    msg = decrypt(ciphertext[16:], pow(A*pow(A+1, -1, p), 1, p), ciphertext[:16])
    print(msg)

if __name__ == '__main__':
    main()

