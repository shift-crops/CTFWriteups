var f64 = new Float64Array(1);
var u64 = new BigUint64Array(f64.buffer);

function f2u(v) {
	f64[0] = v;
	return parseFloat(u64[0]);
}

function u2f(v) {
	u64[0] = BigInt(v);
	return f64[0];
}

function hex(v) {
	if (typeof(v) == 'number' && !Number.isInteger(v))
		v = f2u(v);
	return "0x"+v.toString(16);
}

function gc() {
	for (let i = 0; i < 0x10; i++)
		new ArrayBuffer(0x1000000);
}

function ip2long(IP) {
	//  discuss at: http://phpjs.org/functions/ip2long/
	// original by: Waldo Malqui Silva (http://waldo.malqui.info)

	var i = 0;
	IP = IP.match(/^([1-9]\d*|0[0-7]*|0x[\da-f]+)(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?$/i);
	if (!IP) 
		return false;

	IP[0] = 0;
	for (i = 1; i < 5; i += 1) {
		IP[0] += !!((IP[i] || '')
			.length);
		IP[i] = parseInt(IP[i]) || 0;
	}
	IP.push(256, 256, 256, 256);
	IP[4 + IP[0]] *= Math.pow(256, 4 - IP[0]);
	if (IP[1] >= IP[5] || IP[2] >= IP[6] || IP[3] >= IP[7] || IP[4] >= IP[8])
		return false;

	return IP[1] * (IP[0] === 1 || 16777216) + IP[2] * (IP[0] <= 2 || 65536) + IP[3] * (IP[0] <= 3 || 256) + IP[4] * 1;
}
